/*
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtuml.bp.xtext.ide.contentassist.antlr.internal.InternalMaslParser;
import org.xtuml.bp.xtext.services.MaslGrammarAccess;

public class MaslParser extends AbstractContentAssistParser {

	@Inject
	private MaslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMaslParser createParser() {
		InternalMaslParser result = new InternalMaslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTerminatorItemAccess().getAlternatives(), "rule__TerminatorItem__Alternatives");
					put(grammarAccess.getServiceVisibilityAccess().getAlternatives(), "rule__ServiceVisibility__Alternatives");
					put(grammarAccess.getParameterModeAccess().getAlternatives(), "rule__ParameterMode__Alternatives");
					put(grammarAccess.getTypeReferenceAccess().getAlternatives(), "rule__TypeReference__Alternatives");
					put(grammarAccess.getDeprecatedTypeAccess().getAlternatives(), "rule__DeprecatedType__Alternatives");
					put(grammarAccess.getPragmaValueAccess().getAlternatives(), "rule__PragmaValue__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getTYPEAccess().getAlternatives(), "rule__TYPE__Alternatives");
					put(grammarAccess.getProjectDefinitionAccess().getGroup(), "rule__ProjectDefinition__Group__0");
					put(grammarAccess.getDomainPrjDefinitionAccess().getGroup(), "rule__DomainPrjDefinition__Group__0");
					put(grammarAccess.getTerminatorDefinitionAccess().getGroup(), "rule__TerminatorDefinition__Group__0");
					put(grammarAccess.getTerminatorServiceDeclarationAccess().getGroup(), "rule__TerminatorServiceDeclaration__Group__0");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getGroup(), "rule__TerminatorFunctionDeclaration__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_3(), "rule__ParameterList__Group_3__0");
					put(grammarAccess.getParameterDefinitionAccess().getGroup(), "rule__ParameterDefinition__Group__0");
					put(grammarAccess.getNamedTypeRefAccess().getGroup(), "rule__NamedTypeRef__Group__0");
					put(grammarAccess.getNamedTypeRefAccess().getGroup_1(), "rule__NamedTypeRef__Group_1__0");
					put(grammarAccess.getPragmaListAccess().getGroup(), "rule__PragmaList__Group__0");
					put(grammarAccess.getPragmaListAccess().getGroup_1(), "rule__PragmaList__Group_1__0");
					put(grammarAccess.getPragmaAccess().getGroup(), "rule__Pragma__Group__0");
					put(grammarAccess.getPragmaAccess().getGroup_3(), "rule__Pragma__Group_3__0");
					put(grammarAccess.getPragmaAccess().getGroup_3_1(), "rule__Pragma__Group_3_1__0");
					put(grammarAccess.getProjectDefinitionAccess().getProjectNameAssignment_1(), "rule__ProjectDefinition__ProjectNameAssignment_1");
					put(grammarAccess.getProjectDefinitionAccess().getProjectItemAssignment_3(), "rule__ProjectDefinition__ProjectItemAssignment_3");
					put(grammarAccess.getProjectDefinitionAccess().getPragmaListAssignment_7(), "rule__ProjectDefinition__PragmaListAssignment_7");
					put(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameAssignment_1(), "rule__DomainPrjDefinition__DomainNameAssignment_1");
					put(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemAssignment_3(), "rule__DomainPrjDefinition__DomainPrjItemAssignment_3");
					put(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListAssignment_7(), "rule__DomainPrjDefinition__PragmaListAssignment_7");
					put(grammarAccess.getProjectNameAccess().getIdentifierAssignment(), "rule__ProjectName__IdentifierAssignment");
					put(grammarAccess.getDomainNameAccess().getIdentifierAssignment(), "rule__DomainName__IdentifierAssignment");
					put(grammarAccess.getTerminatorNameAccess().getIdentifierAssignment(), "rule__TerminatorName__IdentifierAssignment");
					put(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameAssignment_1(), "rule__TerminatorDefinition__TerminatorNameAssignment_1");
					put(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemAssignment_3(), "rule__TerminatorDefinition__TerminatorItemAssignment_3");
					put(grammarAccess.getTerminatorDefinitionAccess().getPragmaListAssignment_7(), "rule__TerminatorDefinition__PragmaListAssignment_7");
					put(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityAssignment_0(), "rule__TerminatorServiceDeclaration__ServiceVisibilityAssignment_0");
					put(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameAssignment_2(), "rule__TerminatorServiceDeclaration__ServiceNameAssignment_2");
					put(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListAssignment_3(), "rule__TerminatorServiceDeclaration__ParameterListAssignment_3");
					put(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListAssignment_5(), "rule__TerminatorServiceDeclaration__PragmaListAssignment_5");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityAssignment_0(), "rule__TerminatorFunctionDeclaration__ServiceVisibilityAssignment_0");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameAssignment_2(), "rule__TerminatorFunctionDeclaration__ServiceNameAssignment_2");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListAssignment_3(), "rule__TerminatorFunctionDeclaration__ParameterListAssignment_3");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeAssignment_5(), "rule__TerminatorFunctionDeclaration__ReturnTypeAssignment_5");
					put(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListAssignment_7(), "rule__TerminatorFunctionDeclaration__PragmaListAssignment_7");
					put(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_2(), "rule__ParameterList__ParameterDefinitionAssignment_2");
					put(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_3_1(), "rule__ParameterList__ParameterDefinitionAssignment_3_1");
					put(grammarAccess.getParameterDefinitionAccess().getParameterNameAssignment_0(), "rule__ParameterDefinition__ParameterNameAssignment_0");
					put(grammarAccess.getParameterDefinitionAccess().getParameterModeAssignment_2(), "rule__ParameterDefinition__ParameterModeAssignment_2");
					put(grammarAccess.getParameterDefinitionAccess().getParameterTypeAssignment_3(), "rule__ParameterDefinition__ParameterTypeAssignment_3");
					put(grammarAccess.getServiceNameAccess().getIdentifierAssignment(), "rule__ServiceName__IdentifierAssignment");
					put(grammarAccess.getParameterNameAccess().getIdentifierAssignment(), "rule__ParameterName__IdentifierAssignment");
					put(grammarAccess.getParameterTypeAccess().getTypeReferenceAssignment(), "rule__ParameterType__TypeReferenceAssignment");
					put(grammarAccess.getReturnTypeAccess().getTypeReferenceAssignment(), "rule__ReturnType__TypeReferenceAssignment");
					put(grammarAccess.getDeprecatedTypeAccess().getINSTANCEAssignment_0(), "rule__DeprecatedType__INSTANCEAssignment_0");
					put(grammarAccess.getDeprecatedTypeAccess().getEVENTAssignment_1(), "rule__DeprecatedType__EVENTAssignment_1");
					put(grammarAccess.getDeprecatedTypeAccess().getSERVICEAssignment_2(), "rule__DeprecatedType__SERVICEAssignment_2");
					put(grammarAccess.getNamedTypeRefAccess().getAnonymousAssignment_0(), "rule__NamedTypeRef__AnonymousAssignment_0");
					put(grammarAccess.getNamedTypeRefAccess().getDomainNameAssignment_1_0(), "rule__NamedTypeRef__DomainNameAssignment_1_0");
					put(grammarAccess.getNamedTypeRefAccess().getTypeNameAssignment_2(), "rule__NamedTypeRef__TypeNameAssignment_2");
					put(grammarAccess.getTypeNameAccess().getIdentifierAssignment(), "rule__TypeName__IdentifierAssignment");
					put(grammarAccess.getPragmaListAccess().getPragmaAssignment_1_0(), "rule__PragmaList__PragmaAssignment_1_0");
					put(grammarAccess.getPragmaAccess().getPragmaNameAssignment_1(), "rule__Pragma__PragmaNameAssignment_1");
					put(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_0(), "rule__Pragma__PragmaValueAssignment_3_0");
					put(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_1_1(), "rule__Pragma__PragmaValueAssignment_3_1_1");
					put(grammarAccess.getPragmaNameAccess().getIdentifierAssignment(), "rule__PragmaName__IdentifierAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMaslParser typedParser = (InternalMaslParser) parser;
			typedParser.entryRuleprojectDefinition();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MaslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MaslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
