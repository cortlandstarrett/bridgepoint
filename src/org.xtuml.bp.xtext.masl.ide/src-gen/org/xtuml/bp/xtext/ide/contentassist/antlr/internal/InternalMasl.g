/*
 * generated by Xtext 2.9.1
 */
grammar InternalMasl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtuml.bp.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtuml.bp.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtuml.bp.xtext.services.MaslGrammarAccess;

}
@parser::members {
	private MaslGrammarAccess grammarAccess;

	public void setGrammarAccess(MaslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleprojectDefinition
entryRuleprojectDefinition
:
{ before(grammarAccess.getProjectDefinitionRule()); }
	 ruleprojectDefinition
{ after(grammarAccess.getProjectDefinitionRule()); } 
	 EOF 
;

// Rule projectDefinition
ruleprojectDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectDefinitionAccess().getGroup()); }
		(rule__ProjectDefinition__Group__0)
		{ after(grammarAccess.getProjectDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprojectItem
entryRuleprojectItem
:
{ before(grammarAccess.getProjectItemRule()); }
	 ruleprojectItem
{ after(grammarAccess.getProjectItemRule()); } 
	 EOF 
;

// Rule projectItem
ruleprojectItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectItemAccess().getDomainPrjDefinitionParserRuleCall()); }
		ruledomainPrjDefinition
		{ after(grammarAccess.getProjectItemAccess().getDomainPrjDefinitionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledomainPrjDefinition
entryRuledomainPrjDefinition
:
{ before(grammarAccess.getDomainPrjDefinitionRule()); }
	 ruledomainPrjDefinition
{ after(grammarAccess.getDomainPrjDefinitionRule()); } 
	 EOF 
;

// Rule domainPrjDefinition
ruledomainPrjDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainPrjDefinitionAccess().getGroup()); }
		(rule__DomainPrjDefinition__Group__0)
		{ after(grammarAccess.getDomainPrjDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledomainPrjItem
entryRuledomainPrjItem
:
{ before(grammarAccess.getDomainPrjItemRule()); }
	 ruledomainPrjItem
{ after(grammarAccess.getDomainPrjItemRule()); } 
	 EOF 
;

// Rule domainPrjItem
ruledomainPrjItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainPrjItemAccess().getTerminatorDefinitionParserRuleCall()); }
		ruleterminatorDefinition
		{ after(grammarAccess.getDomainPrjItemAccess().getTerminatorDefinitionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprojectName
entryRuleprojectName
:
{ before(grammarAccess.getProjectNameRule()); }
	 ruleprojectName
{ after(grammarAccess.getProjectNameRule()); } 
	 EOF 
;

// Rule projectName
ruleprojectName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectNameAccess().getIdentifierAssignment()); }
		(rule__ProjectName__IdentifierAssignment)
		{ after(grammarAccess.getProjectNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledomainName
entryRuledomainName
:
{ before(grammarAccess.getDomainNameRule()); }
	 ruledomainName
{ after(grammarAccess.getDomainNameRule()); } 
	 EOF 
;

// Rule domainName
ruledomainName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainNameAccess().getIdentifierAssignment()); }
		(rule__DomainName__IdentifierAssignment)
		{ after(grammarAccess.getDomainNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterminatorName
entryRuleterminatorName
:
{ before(grammarAccess.getTerminatorNameRule()); }
	 ruleterminatorName
{ after(grammarAccess.getTerminatorNameRule()); } 
	 EOF 
;

// Rule terminatorName
ruleterminatorName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminatorNameAccess().getIdentifierAssignment()); }
		(rule__TerminatorName__IdentifierAssignment)
		{ after(grammarAccess.getTerminatorNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterminatorDefinition
entryRuleterminatorDefinition
:
{ before(grammarAccess.getTerminatorDefinitionRule()); }
	 ruleterminatorDefinition
{ after(grammarAccess.getTerminatorDefinitionRule()); } 
	 EOF 
;

// Rule terminatorDefinition
ruleterminatorDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminatorDefinitionAccess().getGroup()); }
		(rule__TerminatorDefinition__Group__0)
		{ after(grammarAccess.getTerminatorDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterminatorItem
entryRuleterminatorItem
:
{ before(grammarAccess.getTerminatorItemRule()); }
	 ruleterminatorItem
{ after(grammarAccess.getTerminatorItemRule()); } 
	 EOF 
;

// Rule terminatorItem
ruleterminatorItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminatorItemAccess().getAlternatives()); }
		(rule__TerminatorItem__Alternatives)
		{ after(grammarAccess.getTerminatorItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterminatorServiceDeclaration
entryRuleterminatorServiceDeclaration
:
{ before(grammarAccess.getTerminatorServiceDeclarationRule()); }
	 ruleterminatorServiceDeclaration
{ after(grammarAccess.getTerminatorServiceDeclarationRule()); } 
	 EOF 
;

// Rule terminatorServiceDeclaration
ruleterminatorServiceDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getGroup()); }
		(rule__TerminatorServiceDeclaration__Group__0)
		{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterminatorFunctionDeclaration
entryRuleterminatorFunctionDeclaration
:
{ before(grammarAccess.getTerminatorFunctionDeclarationRule()); }
	 ruleterminatorFunctionDeclaration
{ after(grammarAccess.getTerminatorFunctionDeclarationRule()); } 
	 EOF 
;

// Rule terminatorFunctionDeclaration
ruleterminatorFunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getGroup()); }
		(rule__TerminatorFunctionDeclaration__Group__0)
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterList
entryRuleparameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleparameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule parameterList
ruleparameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterDefinition
entryRuleparameterDefinition
:
{ before(grammarAccess.getParameterDefinitionRule()); }
	 ruleparameterDefinition
{ after(grammarAccess.getParameterDefinitionRule()); } 
	 EOF 
;

// Rule parameterDefinition
ruleparameterDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDefinitionAccess().getGroup()); }
		(rule__ParameterDefinition__Group__0)
		{ after(grammarAccess.getParameterDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleserviceVisibility
entryRuleserviceVisibility
:
{ before(grammarAccess.getServiceVisibilityRule()); }
	 ruleserviceVisibility
{ after(grammarAccess.getServiceVisibilityRule()); } 
	 EOF 
;

// Rule serviceVisibility
ruleserviceVisibility 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getServiceVisibilityAccess().getAlternatives()); }
		(rule__ServiceVisibility__Alternatives)
		{ after(grammarAccess.getServiceVisibilityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterMode
entryRuleparameterMode
:
{ before(grammarAccess.getParameterModeRule()); }
	 ruleparameterMode
{ after(grammarAccess.getParameterModeRule()); } 
	 EOF 
;

// Rule parameterMode
ruleparameterMode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterModeAccess().getAlternatives()); }
		(rule__ParameterMode__Alternatives)
		{ after(grammarAccess.getParameterModeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleserviceName
entryRuleserviceName
:
{ before(grammarAccess.getServiceNameRule()); }
	 ruleserviceName
{ after(grammarAccess.getServiceNameRule()); } 
	 EOF 
;

// Rule serviceName
ruleserviceName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getServiceNameAccess().getIdentifierAssignment()); }
		(rule__ServiceName__IdentifierAssignment)
		{ after(grammarAccess.getServiceNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterName
entryRuleparameterName
:
{ before(grammarAccess.getParameterNameRule()); }
	 ruleparameterName
{ after(grammarAccess.getParameterNameRule()); } 
	 EOF 
;

// Rule parameterName
ruleparameterName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterNameAccess().getIdentifierAssignment()); }
		(rule__ParameterName__IdentifierAssignment)
		{ after(grammarAccess.getParameterNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterType
entryRuleparameterType
:
{ before(grammarAccess.getParameterTypeRule()); }
	 ruleparameterType
{ after(grammarAccess.getParameterTypeRule()); } 
	 EOF 
;

// Rule parameterType
ruleparameterType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterTypeAccess().getTypeReferenceAssignment()); }
		(rule__ParameterType__TypeReferenceAssignment)
		{ after(grammarAccess.getParameterTypeAccess().getTypeReferenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulereturnType
entryRulereturnType
:
{ before(grammarAccess.getReturnTypeRule()); }
	 rulereturnType
{ after(grammarAccess.getReturnTypeRule()); } 
	 EOF 
;

// Rule returnType
rulereturnType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnTypeAccess().getTypeReferenceAssignment()); }
		(rule__ReturnType__TypeReferenceAssignment)
		{ after(grammarAccess.getReturnTypeAccess().getTypeReferenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeReference
entryRuletypeReference
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruletypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule typeReference
ruletypeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
		(rule__TypeReference__Alternatives)
		{ after(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledeprecatedType
entryRuledeprecatedType
:
{ before(grammarAccess.getDeprecatedTypeRule()); }
	 ruledeprecatedType
{ after(grammarAccess.getDeprecatedTypeRule()); } 
	 EOF 
;

// Rule deprecatedType
ruledeprecatedType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getAlternatives()); }
		(rule__DeprecatedType__Alternatives)
		{ after(grammarAccess.getDeprecatedTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulenamedTypeRef
entryRulenamedTypeRef
:
{ before(grammarAccess.getNamedTypeRefRule()); }
	 rulenamedTypeRef
{ after(grammarAccess.getNamedTypeRefRule()); } 
	 EOF 
;

// Rule namedTypeRef
rulenamedTypeRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedTypeRefAccess().getGroup()); }
		(rule__NamedTypeRef__Group__0)
		{ after(grammarAccess.getNamedTypeRefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeName
entryRuletypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruletypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule typeName
ruletypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getIdentifierAssignment()); }
		(rule__TypeName__IdentifierAssignment)
		{ after(grammarAccess.getTypeNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepragmaList
entryRulepragmaList
:
{ before(grammarAccess.getPragmaListRule()); }
	 rulepragmaList
{ after(grammarAccess.getPragmaListRule()); } 
	 EOF 
;

// Rule pragmaList
rulepragmaList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPragmaListAccess().getGroup()); }
		(rule__PragmaList__Group__0)
		{ after(grammarAccess.getPragmaListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepragma
entryRulepragma
:
{ before(grammarAccess.getPragmaRule()); }
	 rulepragma
{ after(grammarAccess.getPragmaRule()); } 
	 EOF 
;

// Rule pragma
rulepragma 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPragmaAccess().getGroup()); }
		(rule__Pragma__Group__0)
		{ after(grammarAccess.getPragmaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepragmaValue
entryRulepragmaValue
:
{ before(grammarAccess.getPragmaValueRule()); }
	 rulepragmaValue
{ after(grammarAccess.getPragmaValueRule()); } 
	 EOF 
;

// Rule pragmaValue
rulepragmaValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPragmaValueAccess().getAlternatives()); }
		(rule__PragmaValue__Alternatives)
		{ after(grammarAccess.getPragmaValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepragmaName
entryRulepragmaName
:
{ before(grammarAccess.getPragmaNameRule()); }
	 rulepragmaName
{ after(grammarAccess.getPragmaNameRule()); } 
	 EOF 
;

// Rule pragmaName
rulepragmaName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPragmaNameAccess().getIdentifierAssignment()); }
		(rule__PragmaName__IdentifierAssignment)
		{ after(grammarAccess.getPragmaNameAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleliteral
entryRuleliteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleliteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule literal
ruleliteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleANONYMOUS
entryRuleANONYMOUS
:
{ before(grammarAccess.getANONYMOUSRule()); }
	 ruleANONYMOUS
{ after(grammarAccess.getANONYMOUSRule()); } 
	 EOF 
;

// Rule ANONYMOUS
ruleANONYMOUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getANONYMOUSAccess().getAnonymousKeyword()); }
		'anonymous'
		{ after(grammarAccess.getANONYMOUSAccess().getAnonymousKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOLON
entryRuleCOLON
:
{ before(grammarAccess.getCOLONRule()); }
	 ruleCOLON
{ after(grammarAccess.getCOLONRule()); } 
	 EOF 
;

// Rule COLON
ruleCOLON 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOLONAccess().getColonKeyword()); }
		':'
		{ after(grammarAccess.getCOLONAccess().getColonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMMA
entryRuleCOMMA
:
{ before(grammarAccess.getCOMMARule()); }
	 ruleCOMMA
{ after(grammarAccess.getCOMMARule()); } 
	 EOF 
;

// Rule COMMA
ruleCOMMA 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
		','
		{ after(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOMAIN
entryRuleDOMAIN
:
{ before(grammarAccess.getDOMAINRule()); }
	 ruleDOMAIN
{ after(grammarAccess.getDOMAINRule()); } 
	 EOF 
;

// Rule DOMAIN
ruleDOMAIN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOMAINAccess().getDomainKeyword()); }
		'domain'
		{ after(grammarAccess.getDOMAINAccess().getDomainKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEND
entryRuleEND
:
{ before(grammarAccess.getENDRule()); }
	 ruleEND
{ after(grammarAccess.getENDRule()); } 
	 EOF 
;

// Rule END
ruleEND 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getENDAccess().getEndKeyword()); }
		'end'
		{ after(grammarAccess.getENDAccess().getEndKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEVENT
entryRuleEVENT
:
{ before(grammarAccess.getEVENTRule()); }
	 ruleEVENT
{ after(grammarAccess.getEVENTRule()); } 
	 EOF 
;

// Rule EVENT
ruleEVENT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEVENTAccess().getEventKeyword()); }
		'event'
		{ after(grammarAccess.getEVENTAccess().getEventKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFUNCTION
entryRuleFUNCTION
:
{ before(grammarAccess.getFUNCTIONRule()); }
	 ruleFUNCTION
{ after(grammarAccess.getFUNCTIONRule()); } 
	 EOF 
;

// Rule FUNCTION
ruleFUNCTION 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFUNCTIONAccess().getFunctionKeyword()); }
		'function'
		{ after(grammarAccess.getFUNCTIONAccess().getFunctionKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIN
entryRuleIN
:
{ before(grammarAccess.getINRule()); }
	 ruleIN
{ after(grammarAccess.getINRule()); } 
	 EOF 
;

// Rule IN
ruleIN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINAccess().getInKeyword()); }
		'in'
		{ after(grammarAccess.getINAccess().getInKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINSTANCE
entryRuleINSTANCE
:
{ before(grammarAccess.getINSTANCERule()); }
	 ruleINSTANCE
{ after(grammarAccess.getINSTANCERule()); } 
	 EOF 
;

// Rule INSTANCE
ruleINSTANCE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINSTANCEAccess().getInstanceKeyword()); }
		'instance'
		{ after(grammarAccess.getINSTANCEAccess().getInstanceKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIS
entryRuleIS
:
{ before(grammarAccess.getISRule()); }
	 ruleIS
{ after(grammarAccess.getISRule()); } 
	 EOF 
;

// Rule IS
ruleIS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getISAccess().getIsKeyword()); }
		'is'
		{ after(grammarAccess.getISAccess().getIsKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLPAREN
entryRuleLPAREN
:
{ before(grammarAccess.getLPARENRule()); }
	 ruleLPAREN
{ after(grammarAccess.getLPARENRule()); } 
	 EOF 
;

// Rule LPAREN
ruleLPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
		'('
		{ after(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOUT
entryRuleOUT
:
{ before(grammarAccess.getOUTRule()); }
	 ruleOUT
{ after(grammarAccess.getOUTRule()); } 
	 EOF 
;

// Rule OUT
ruleOUT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOUTAccess().getOutKeyword()); }
		'out'
		{ after(grammarAccess.getOUTAccess().getOutKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePRAGMATOK
entryRulePRAGMATOK
:
{ before(grammarAccess.getPRAGMATOKRule()); }
	 rulePRAGMATOK
{ after(grammarAccess.getPRAGMATOKRule()); } 
	 EOF 
;

// Rule PRAGMATOK
rulePRAGMATOK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPRAGMATOKAccess().getPragmaKeyword()); }
		'pragma'
		{ after(grammarAccess.getPRAGMATOKAccess().getPragmaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePRIVATE
entryRulePRIVATE
:
{ before(grammarAccess.getPRIVATERule()); }
	 rulePRIVATE
{ after(grammarAccess.getPRIVATERule()); } 
	 EOF 
;

// Rule PRIVATE
rulePRIVATE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPRIVATEAccess().getPrivateKeyword()); }
		'private'
		{ after(grammarAccess.getPRIVATEAccess().getPrivateKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePROJECT
entryRulePROJECT
:
{ before(grammarAccess.getPROJECTRule()); }
	 rulePROJECT
{ after(grammarAccess.getPROJECTRule()); } 
	 EOF 
;

// Rule PROJECT
rulePROJECT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPROJECTAccess().getProjectKeyword()); }
		'project'
		{ after(grammarAccess.getPROJECTAccess().getProjectKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePUBLIC
entryRulePUBLIC
:
{ before(grammarAccess.getPUBLICRule()); }
	 rulePUBLIC
{ after(grammarAccess.getPUBLICRule()); } 
	 EOF 
;

// Rule PUBLIC
rulePUBLIC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPUBLICAccess().getPublicKeyword()); }
		'public'
		{ after(grammarAccess.getPUBLICAccess().getPublicKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRETURN
entryRuleRETURN
:
{ before(grammarAccess.getRETURNRule()); }
	 ruleRETURN
{ after(grammarAccess.getRETURNRule()); } 
	 EOF 
;

// Rule RETURN
ruleRETURN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRETURNAccess().getReturnKeyword()); }
		'return'
		{ after(grammarAccess.getRETURNAccess().getReturnKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRPAREN
entryRuleRPAREN
:
{ before(grammarAccess.getRPARENRule()); }
	 ruleRPAREN
{ after(grammarAccess.getRPARENRule()); } 
	 EOF 
;

// Rule RPAREN
ruleRPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
		')'
		{ after(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSCOPE
entryRuleSCOPE
:
{ before(grammarAccess.getSCOPERule()); }
	 ruleSCOPE
{ after(grammarAccess.getSCOPERule()); } 
	 EOF 
;

// Rule SCOPE
ruleSCOPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSCOPEAccess().getColonColonKeyword()); }
		'::'
		{ after(grammarAccess.getSCOPEAccess().getColonColonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSEMI
entryRuleSEMI
:
{ before(grammarAccess.getSEMIRule()); }
	 ruleSEMI
{ after(grammarAccess.getSEMIRule()); } 
	 EOF 
;

// Rule SEMI
ruleSEMI 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSEMIAccess().getSemicolonKeyword()); }
		';'
		{ after(grammarAccess.getSEMIAccess().getSemicolonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSERVICE
entryRuleSERVICE
:
{ before(grammarAccess.getSERVICERule()); }
	 ruleSERVICE
{ after(grammarAccess.getSERVICERule()); } 
	 EOF 
;

// Rule SERVICE
ruleSERVICE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSERVICEAccess().getServiceKeyword()); }
		'service'
		{ after(grammarAccess.getSERVICEAccess().getServiceKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTERMINATOR
entryRuleTERMINATOR
:
{ before(grammarAccess.getTERMINATORRule()); }
	 ruleTERMINATOR
{ after(grammarAccess.getTERMINATORRule()); } 
	 EOF 
;

// Rule TERMINATOR
ruleTERMINATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTERMINATORAccess().getTerminatorKeyword()); }
		'terminator'
		{ after(grammarAccess.getTERMINATORAccess().getTerminatorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorItemAccess().getTerminatorServiceDeclarationParserRuleCall_0()); }
		ruleterminatorServiceDeclaration
		{ after(grammarAccess.getTerminatorItemAccess().getTerminatorServiceDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminatorItemAccess().getTerminatorFunctionDeclarationParserRuleCall_1()); }
		ruleterminatorFunctionDeclaration
		{ after(grammarAccess.getTerminatorItemAccess().getTerminatorFunctionDeclarationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceVisibility__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServiceVisibilityAccess().getPRIVATEParserRuleCall_0()); }
		rulePRIVATE
		{ after(grammarAccess.getServiceVisibilityAccess().getPRIVATEParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getServiceVisibilityAccess().getPUBLICParserRuleCall_1()); }
		rulePUBLIC
		{ after(grammarAccess.getServiceVisibilityAccess().getPUBLICParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterMode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterModeAccess().getINParserRuleCall_0()); }
		ruleIN
		{ after(grammarAccess.getParameterModeAccess().getINParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterModeAccess().getOUTParserRuleCall_1()); }
		ruleOUT
		{ after(grammarAccess.getParameterModeAccess().getOUTParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getNamedTypeRefParserRuleCall_0()); }
		rulenamedTypeRef
		{ after(grammarAccess.getTypeReferenceAccess().getNamedTypeRefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeReferenceAccess().getDeprecatedTypeParserRuleCall_1()); }
		ruledeprecatedType
		{ after(grammarAccess.getTypeReferenceAccess().getDeprecatedTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeprecatedType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getINSTANCEAssignment_0()); }
		(rule__DeprecatedType__INSTANCEAssignment_0)
		{ after(grammarAccess.getDeprecatedTypeAccess().getINSTANCEAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getEVENTAssignment_1()); }
		(rule__DeprecatedType__EVENTAssignment_1)
		{ after(grammarAccess.getDeprecatedTypeAccess().getEVENTAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getSERVICEAssignment_2()); }
		(rule__DeprecatedType__SERVICEAssignment_2)
		{ after(grammarAccess.getDeprecatedTypeAccess().getSERVICEAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaValueAccess().getLiteralParserRuleCall_0()); }
		ruleliteral
		{ after(grammarAccess.getPragmaValueAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPragmaValueAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getPragmaValueAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__0__Impl
	rule__ProjectDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_0()); }
	rulePROJECT
	{ after(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__1__Impl
	rule__ProjectDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getProjectNameAssignment_1()); }
	(rule__ProjectDefinition__ProjectNameAssignment_1)
	{ after(grammarAccess.getProjectDefinitionAccess().getProjectNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__2__Impl
	rule__ProjectDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getISParserRuleCall_2()); }
	ruleIS
	{ after(grammarAccess.getProjectDefinitionAccess().getISParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__3__Impl
	rule__ProjectDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getProjectItemAssignment_3()); }
	(rule__ProjectDefinition__ProjectItemAssignment_3)*
	{ after(grammarAccess.getProjectDefinitionAccess().getProjectItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__4__Impl
	rule__ProjectDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getENDParserRuleCall_4()); }
	ruleEND
	{ after(grammarAccess.getProjectDefinitionAccess().getENDParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__5__Impl
	rule__ProjectDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_5()); }
	(rulePROJECT)?
	{ after(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__6__Impl
	rule__ProjectDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getSEMIParserRuleCall_6()); }
	ruleSEMI
	{ after(grammarAccess.getProjectDefinitionAccess().getSEMIParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProjectDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectDefinitionAccess().getPragmaListAssignment_7()); }
	(rule__ProjectDefinition__PragmaListAssignment_7)
	{ after(grammarAccess.getProjectDefinitionAccess().getPragmaListAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DomainPrjDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__0__Impl
	rule__DomainPrjDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_0()); }
	ruleDOMAIN
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__1__Impl
	rule__DomainPrjDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameAssignment_1()); }
	(rule__DomainPrjDefinition__DomainNameAssignment_1)
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__2__Impl
	rule__DomainPrjDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getISParserRuleCall_2()); }
	ruleIS
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getISParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__3__Impl
	rule__DomainPrjDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemAssignment_3()); }
	(rule__DomainPrjDefinition__DomainPrjItemAssignment_3)*
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__4__Impl
	rule__DomainPrjDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getENDParserRuleCall_4()); }
	ruleEND
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getENDParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__5__Impl
	rule__DomainPrjDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_5()); }
	(ruleDOMAIN)?
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__6__Impl
	rule__DomainPrjDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getSEMIParserRuleCall_6()); }
	ruleSEMI
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getSEMIParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DomainPrjDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListAssignment_7()); }
	(rule__DomainPrjDefinition__PragmaListAssignment_7)
	{ after(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminatorDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__0__Impl
	rule__TerminatorDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_0()); }
	ruleTERMINATOR
	{ after(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__1__Impl
	rule__TerminatorDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameAssignment_1()); }
	(rule__TerminatorDefinition__TerminatorNameAssignment_1)
	{ after(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__2__Impl
	rule__TerminatorDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getISParserRuleCall_2()); }
	ruleIS
	{ after(grammarAccess.getTerminatorDefinitionAccess().getISParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__3__Impl
	rule__TerminatorDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemAssignment_3()); }
	(rule__TerminatorDefinition__TerminatorItemAssignment_3)*
	{ after(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__4__Impl
	rule__TerminatorDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getENDParserRuleCall_4()); }
	ruleEND
	{ after(grammarAccess.getTerminatorDefinitionAccess().getENDParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__5__Impl
	rule__TerminatorDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_5()); }
	(ruleTERMINATOR)?
	{ after(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__6__Impl
	rule__TerminatorDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getSEMIParserRuleCall_6()); }
	ruleSEMI
	{ after(grammarAccess.getTerminatorDefinitionAccess().getSEMIParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorDefinitionAccess().getPragmaListAssignment_7()); }
	(rule__TerminatorDefinition__PragmaListAssignment_7)
	{ after(grammarAccess.getTerminatorDefinitionAccess().getPragmaListAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminatorServiceDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__0__Impl
	rule__TerminatorServiceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityAssignment_0()); }
	(rule__TerminatorServiceDeclaration__ServiceVisibilityAssignment_0)
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__1__Impl
	rule__TerminatorServiceDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getSERVICEParserRuleCall_1()); }
	ruleSERVICE
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getSERVICEParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__2__Impl
	rule__TerminatorServiceDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameAssignment_2()); }
	(rule__TerminatorServiceDeclaration__ServiceNameAssignment_2)
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__3__Impl
	rule__TerminatorServiceDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListAssignment_3()); }
	(rule__TerminatorServiceDeclaration__ParameterListAssignment_3)
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__4__Impl
	rule__TerminatorServiceDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getSEMIParserRuleCall_4()); }
	ruleSEMI
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getSEMIParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorServiceDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListAssignment_5()); }
	(rule__TerminatorServiceDeclaration__PragmaListAssignment_5)
	{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminatorFunctionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__0__Impl
	rule__TerminatorFunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityAssignment_0()); }
	(rule__TerminatorFunctionDeclaration__ServiceVisibilityAssignment_0)
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__1__Impl
	rule__TerminatorFunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getFUNCTIONParserRuleCall_1()); }
	ruleFUNCTION
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getFUNCTIONParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__2__Impl
	rule__TerminatorFunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameAssignment_2()); }
	(rule__TerminatorFunctionDeclaration__ServiceNameAssignment_2)
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__3__Impl
	rule__TerminatorFunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListAssignment_3()); }
	(rule__TerminatorFunctionDeclaration__ParameterListAssignment_3)
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__4__Impl
	rule__TerminatorFunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getRETURNParserRuleCall_4()); }
	ruleRETURN
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getRETURNParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__5__Impl
	rule__TerminatorFunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeAssignment_5()); }
	(rule__TerminatorFunctionDeclaration__ReturnTypeAssignment_5)
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__6__Impl
	rule__TerminatorFunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getSEMIParserRuleCall_6()); }
	ruleSEMI
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getSEMIParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminatorFunctionDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListAssignment_7()); }
	(rule__TerminatorFunctionDeclaration__PragmaListAssignment_7)
	{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getLPARENParserRuleCall_0()); }
	ruleLPAREN
	{ after(grammarAccess.getParameterListAccess().getLPARENParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterListAction_1()); }
	()
	{ after(grammarAccess.getParameterListAccess().getParameterListAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__2__Impl
	rule__ParameterList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_2()); }
	(rule__ParameterList__ParameterDefinitionAssignment_2)?
	{ after(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__3__Impl
	rule__ParameterList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_3()); }
	(rule__ParameterList__Group_3__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getRPARENParserRuleCall_4()); }
	ruleRPAREN
	{ after(grammarAccess.getParameterListAccess().getRPARENParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_3__0__Impl
	rule__ParameterList__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCOMMAParserRuleCall_3_0()); }
	ruleCOMMA
	{ after(grammarAccess.getParameterListAccess().getCOMMAParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_3_1()); }
	(rule__ParameterList__ParameterDefinitionAssignment_3_1)
	{ after(grammarAccess.getParameterListAccess().getParameterDefinitionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDefinition__Group__0__Impl
	rule__ParameterDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDefinitionAccess().getParameterNameAssignment_0()); }
	(rule__ParameterDefinition__ParameterNameAssignment_0)
	{ after(grammarAccess.getParameterDefinitionAccess().getParameterNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDefinition__Group__1__Impl
	rule__ParameterDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDefinitionAccess().getCOLONParserRuleCall_1()); }
	ruleCOLON
	{ after(grammarAccess.getParameterDefinitionAccess().getCOLONParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDefinition__Group__2__Impl
	rule__ParameterDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDefinitionAccess().getParameterModeAssignment_2()); }
	(rule__ParameterDefinition__ParameterModeAssignment_2)
	{ after(grammarAccess.getParameterDefinitionAccess().getParameterModeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDefinitionAccess().getParameterTypeAssignment_3()); }
	(rule__ParameterDefinition__ParameterTypeAssignment_3)
	{ after(grammarAccess.getParameterDefinitionAccess().getParameterTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeRef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedTypeRef__Group__0__Impl
	rule__NamedTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedTypeRefAccess().getAnonymousAssignment_0()); }
	(rule__NamedTypeRef__AnonymousAssignment_0)?
	{ after(grammarAccess.getNamedTypeRefAccess().getAnonymousAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedTypeRef__Group__1__Impl
	rule__NamedTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedTypeRefAccess().getGroup_1()); }
	(rule__NamedTypeRef__Group_1__0)?
	{ after(grammarAccess.getNamedTypeRefAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedTypeRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedTypeRefAccess().getTypeNameAssignment_2()); }
	(rule__NamedTypeRef__TypeNameAssignment_2)
	{ after(grammarAccess.getNamedTypeRefAccess().getTypeNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeRef__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedTypeRef__Group_1__0__Impl
	rule__NamedTypeRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedTypeRefAccess().getDomainNameAssignment_1_0()); }
	(rule__NamedTypeRef__DomainNameAssignment_1_0)
	{ after(grammarAccess.getNamedTypeRefAccess().getDomainNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedTypeRef__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedTypeRefAccess().getSCOPEParserRuleCall_1_1()); }
	ruleSCOPE
	{ after(grammarAccess.getNamedTypeRefAccess().getSCOPEParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaList__Group__0__Impl
	rule__PragmaList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaListAccess().getPragmaListAction_0()); }
	()
	{ after(grammarAccess.getPragmaListAccess().getPragmaListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaListAccess().getGroup_1()); }
	(rule__PragmaList__Group_1__0)*
	{ after(grammarAccess.getPragmaListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaList__Group_1__0__Impl
	rule__PragmaList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaListAccess().getPragmaAssignment_1_0()); }
	(rule__PragmaList__PragmaAssignment_1_0)
	{ after(grammarAccess.getPragmaListAccess().getPragmaAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PragmaList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaListAccess().getSEMIParserRuleCall_1_1()); }
	ruleSEMI
	{ after(grammarAccess.getPragmaListAccess().getSEMIParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pragma__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group__0__Impl
	rule__Pragma__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getPRAGMATOKParserRuleCall_0()); }
	rulePRAGMATOK
	{ after(grammarAccess.getPragmaAccess().getPRAGMATOKParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group__1__Impl
	rule__Pragma__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getPragmaNameAssignment_1()); }
	(rule__Pragma__PragmaNameAssignment_1)
	{ after(grammarAccess.getPragmaAccess().getPragmaNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group__2__Impl
	rule__Pragma__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getLPARENParserRuleCall_2()); }
	ruleLPAREN
	{ after(grammarAccess.getPragmaAccess().getLPARENParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group__3__Impl
	rule__Pragma__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getGroup_3()); }
	(rule__Pragma__Group_3__0)?
	{ after(grammarAccess.getPragmaAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getRPARENParserRuleCall_4()); }
	ruleRPAREN
	{ after(grammarAccess.getPragmaAccess().getRPARENParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pragma__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group_3__0__Impl
	rule__Pragma__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_0()); }
	(rule__Pragma__PragmaValueAssignment_3_0)
	{ after(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getGroup_3_1()); }
	(rule__Pragma__Group_3_1__0)*
	{ after(grammarAccess.getPragmaAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pragma__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group_3_1__0__Impl
	rule__Pragma__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getCOMMAParserRuleCall_3_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getPragmaAccess().getCOMMAParserRuleCall_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pragma__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_1_1()); }
	(rule__Pragma__PragmaValueAssignment_3_1_1)
	{ after(grammarAccess.getPragmaAccess().getPragmaValueAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProjectDefinition__ProjectNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectDefinitionAccess().getProjectNameProjectNameParserRuleCall_1_0()); }
		ruleprojectName
		{ after(grammarAccess.getProjectDefinitionAccess().getProjectNameProjectNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__ProjectItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectDefinitionAccess().getProjectItemProjectItemParserRuleCall_3_0()); }
		ruleprojectItem
		{ after(grammarAccess.getProjectDefinitionAccess().getProjectItemProjectItemParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectDefinition__PragmaListAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
		rulepragmaList
		{ after(grammarAccess.getProjectDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__DomainNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameDomainNameParserRuleCall_1_0()); }
		ruledomainName
		{ after(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameDomainNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__DomainPrjItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemDomainPrjItemParserRuleCall_3_0()); }
		ruledomainPrjItem
		{ after(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemDomainPrjItemParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainPrjDefinition__PragmaListAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
		rulepragmaList
		{ after(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getProjectNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getDomainNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTerminatorNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__TerminatorNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameTerminatorNameParserRuleCall_1_0()); }
		ruleterminatorName
		{ after(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameTerminatorNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__TerminatorItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemTerminatorItemParserRuleCall_3_0()); }
		ruleterminatorItem
		{ after(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemTerminatorItemParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorDefinition__PragmaListAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
		rulepragmaList
		{ after(grammarAccess.getTerminatorDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__ServiceVisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0()); }
		ruleserviceVisibility
		{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__ServiceNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0()); }
		ruleserviceName
		{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__ParameterListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListParameterListParserRuleCall_3_0()); }
		ruleparameterList
		{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListParameterListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorServiceDeclaration__PragmaListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListPragmaListParserRuleCall_5_0()); }
		rulepragmaList
		{ after(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListPragmaListParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__ServiceVisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0()); }
		ruleserviceVisibility
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__ServiceNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0()); }
		ruleserviceName
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__ParameterListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_3_0()); }
		ruleparameterList
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__ReturnTypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeReturnTypeParserRuleCall_5_0()); }
		rulereturnType
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeReturnTypeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminatorFunctionDeclaration__PragmaListAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
		rulepragmaList
		{ after(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListPragmaListParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterDefinitionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_2_0()); }
		ruleparameterDefinition
		{ after(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterDefinitionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_3_1_0()); }
		ruleparameterDefinition
		{ after(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__ParameterNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDefinitionAccess().getParameterNameParameterNameParserRuleCall_0_0()); }
		ruleparameterName
		{ after(grammarAccess.getParameterDefinitionAccess().getParameterNameParameterNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__ParameterModeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDefinitionAccess().getParameterModeParameterModeParserRuleCall_2_0()); }
		ruleparameterMode
		{ after(grammarAccess.getParameterDefinitionAccess().getParameterModeParameterModeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDefinition__ParameterTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDefinitionAccess().getParameterTypeParameterTypeParserRuleCall_3_0()); }
		ruleparameterType
		{ after(grammarAccess.getParameterDefinitionAccess().getParameterTypeParameterTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServiceNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getServiceNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterType__TypeReferenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0()); }
		ruletypeReference
		{ after(grammarAccess.getParameterTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__TypeReferenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0()); }
		ruletypeReference
		{ after(grammarAccess.getReturnTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeprecatedType__INSTANCEAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getINSTANCEINSTANCEParserRuleCall_0_0()); }
		ruleINSTANCE
		{ after(grammarAccess.getDeprecatedTypeAccess().getINSTANCEINSTANCEParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeprecatedType__EVENTAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getEVENTEVENTParserRuleCall_1_0()); }
		ruleEVENT
		{ after(grammarAccess.getDeprecatedTypeAccess().getEVENTEVENTParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeprecatedType__SERVICEAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeprecatedTypeAccess().getSERVICESERVICEParserRuleCall_2_0()); }
		ruleSERVICE
		{ after(grammarAccess.getDeprecatedTypeAccess().getSERVICESERVICEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__AnonymousAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedTypeRefAccess().getAnonymousANONYMOUSParserRuleCall_0_0()); }
		ruleANONYMOUS
		{ after(grammarAccess.getNamedTypeRefAccess().getAnonymousANONYMOUSParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__DomainNameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedTypeRefAccess().getDomainNameDomainNameParserRuleCall_1_0_0()); }
		ruledomainName
		{ after(grammarAccess.getNamedTypeRefAccess().getDomainNameDomainNameParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeRef__TypeNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedTypeRefAccess().getTypeNameTypeNameParserRuleCall_2_0()); }
		ruletypeName
		{ after(grammarAccess.getNamedTypeRefAccess().getTypeNameTypeNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaList__PragmaAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaListAccess().getPragmaPragmaParserRuleCall_1_0_0()); }
		rulepragma
		{ after(grammarAccess.getPragmaListAccess().getPragmaPragmaParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__PragmaNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaAccess().getPragmaNamePragmaNameParserRuleCall_1_0()); }
		rulepragmaName
		{ after(grammarAccess.getPragmaAccess().getPragmaNamePragmaNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__PragmaValueAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_0_0()); }
		rulepragmaValue
		{ after(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__PragmaValueAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_1_1_0()); }
		rulepragmaValue
		{ after(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaName__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPragmaNameAccess().getIdentifierIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getPragmaNameAccess().getIdentifierIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
