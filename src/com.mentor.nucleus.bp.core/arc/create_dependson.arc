.//========================================================================
.//
.//File:      $RCSfile: create_dependson.arc,v $
.//Version:   $Revision: 1.9 $
.//Modified:  $Date: 2013/01/10 22:54:06 $
.//
.//(c) Copyright 2004-2013 by Mentor Graphics Corp. All rights reserved.
.//
.//========================================================================
.//This document contains information proprietary and confidential to
.//Mentor Graphics Corp., and is not for external distribution.
.//========================================================================
.//
.invoke arc_env = GET_ENV_VAR( "PTC_MC_ARC_DIR" )
.assign mc_archetypes = arc_env.result
.if ( mc_archetypes == "" )
  .print "\nERROR: Environment variable PTC_MC_ARC_DIR not set."
  .exit 100
.end if
.//
.include "${mc_archetypes}/arch_utils.inc"
.//
.invoke chain_util_env = GET_ENV_VAR( "CHAIN_UTIL_DIR" )
.assign chain_util = chain_util_env.result
.if ( chain_util == "" )
  .print "\nERROR: Environment variable CHAIN_UTIL_DIR not set."
  .exit 100
.end if
.include "${chain_util}/arc/parse_chain.inc"
.//
.assign path = "com/mentor/nucleus/bp/core"
.assign class_name = "PropertyDependsOn"
//======================================================================
//
// File: ${path}/inspector/${class_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.9 $$
//
// (c) Copyright 2004-2013 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for determining the dependency between
// classes for displaying property changes.
//
package com.mentor.nucleus.bp.core.inspector;

import com.mentor.nucleus.bp.core.*;

public class ${class_name}
{
    public static boolean dependsOn(Object a, Object b)
    {
.assign else_str = ""
.select many tree_nodes from instances of T_TNS 
.for each node in tree_nodes
  .select any meta_model_obj from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
  .invoke formatted_name = get_class_name(meta_model_obj)
        ${else_str}if ( a instanceof ${formatted_name.body} )
        {
            if ( b instanceof ${formatted_name.body} )
                return true;
  .select many child_specs related by node->T_TPS[R1000]
  .for each spec in child_specs
    .invoke nav = parse_chain(spec.ParentChildRelChain, "backward")
    .if (not_empty nav.class)
      .assign cl = nav.class
      .invoke child_name = get_class_name(cl)
            else if ( b instanceof ${child_name.body} )
                return true;
    .end if
  .end for
        }
  .assign else_str = "else "
.end for
        return false;
    }

}
.emit to file "src/${path}/inspector/${class_name}.java"
