grammar org.xtuml.bp.xtext.Masl with org.eclipse.xtext.common.Terminals

generate masl "http://www.xtuml.org/bp/xtext/Masl"

//target                        : projectDefinition+;

//---------------------------------------------------------
// Project Definition
//---------------------------------------------------------

projectDefinition returns Project			: PROJECT projectName=projectName IS
                                 				(projectItem+=projectItem)*
                                			END PROJECT? SEMI pragmaList=pragmaList
                              				;
                              
projectItem                   				: domainPrjDefinition
                              				;


domainPrjDefinition returns Domain			: DOMAIN domainName=domainName IS
                                  				(domainPrjItem+=domainPrjItem)* 
                                			END DOMAIN? SEMI pragmaList=pragmaList
                              				;

domainPrjItem                 				: terminatorDefinition
                              				;
                              
projectName returns ProjectName            	: identifier=ID
							  				;

domainName returns DomainName             	: identifier=ID
                              				;

//---------------------------------------------------------
// Terminator Definition
//---------------------------------------------------------

terminatorName returns TerminatorName     	: identifier=ID
                              				;

terminatorDefinition returns TerminatorDefinition      : TERMINATOR terminatorName=terminatorName IS
                                  				(terminatorItem+=terminatorItem)*
                                			END TERMINATOR? SEMI pragmaList=pragmaList
                              				;

terminatorItem                				: terminatorServiceDeclaration
                              				| terminatorFunctionDeclaration
                              				;


terminatorServiceDeclaration returns TerminatorServiceDeclaration	: serviceVisibility=serviceVisibility SERVICE serviceName=serviceName 
                                  				parameterList=parameterList SEMI pragmaList=pragmaList
                              				;

terminatorFunctionDeclaration returns TerminatorFunctionDeclaration	: serviceVisibility=serviceVisibility FUNCTION serviceName=serviceName 
                                  				parameterList=parameterList RETURN returnType=returnType 
                                  				SEMI pragmaList=pragmaList
                              				;

parameterList         						: LPAREN{parameterList} // ensure a parameterList AST object is created even if there are no parameters
                                  				parameterDefinition+=parameterDefinition? ( COMMA parameterDefinition+=parameterDefinition )*                          
                                			RPAREN
                              				;


parameterDefinition returns ParameterDefinition		: parameterName=parameterName COLON parameterMode=parameterMode parameterType=parameterType
                              				;


/* fix for blank */
serviceVisibility             				: PRIVATE
                              				| PUBLIC
                              				;
        
parameterMode                 				: IN
                              				| OUT
                              				;


serviceName returns ServiceName            	: identifier=ID
                              				;

parameterName returns ParameterName        	: identifier=ID
                              				;

parameterType returns ParameterType        	: typeReference=typeReference
                              				;

returnType returns ReturnType              	: typeReference=typeReference
                              				;
                              
//---------------------------------------------------------
// Type Reference
//---------------------------------------------------------

typeReference                 				: namedTypeRef
                              				| deprecatedType
                              				;


deprecatedType                				: INSTANCE=INSTANCE
                              				| EVENT=EVENT
                              				| SERVICE=SERVICE
                              				;



namedTypeRef returns NamedType             	: anonymous=ANONYMOUS? (domainName=domainName SCOPE)? typeName=typeName
                              				;



typeName returns TypeName                 	: identifier=ID
							  				;


//---------------------------------------------------------
// Pragma Definition
//---------------------------------------------------------


pragmaList returns PragmaList               : {PragmaList}(pragma+=pragma SEMI)*
                              				;

pragma returns Pragma                        : PRAGMATOK pragmaName=pragmaName 
                                				LPAREN
                                  				(pragmaValue+=pragmaValue (COMMA pragmaValue+=pragmaValue)*)? 
                                				RPAREN
                              				;

pragmaValue                   				: literal
							  				| ID
                              				;

pragmaName returns PragmaName             	: identifier=ID
                              				;
                              
literal						  				: INT
							  				| STRING
							  				;
					  
							  
                              
// Keywords
ANONYMOUS                     : 'anonymous';
COLON                         : ':';
COMMA                         : ',';
DOMAIN                        : 'domain';                  
END                           : 'end';                     
EVENT                         : 'event';
FUNCTION                      : 'function';                
IN                            : 'in';                      
INSTANCE                      : 'instance'; 
IS                            : 'is';                      
LPAREN                        : '(';
OF                            : 'of';
OUT                           : 'out';                     
PRAGMATOK                     : 'pragma';
PRIVATE                       : 'private';                 
PROJECT                       : 'project';
PUBLIC                        : 'public';                  
RETURN                        : 'return';                  
RPAREN                        : ')';
SCOPE                         : '::';
SEMI                          : ';';
SERVICE                       : 'service';                 
TERMINATOR                    : 'terminator';
TYPE                          : 'type' | 'subtype';