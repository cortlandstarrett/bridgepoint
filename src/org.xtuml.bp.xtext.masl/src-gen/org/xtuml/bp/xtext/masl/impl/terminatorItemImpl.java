/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.PragmaList;
import org.xtuml.bp.xtext.masl.ServiceName;
import org.xtuml.bp.xtext.masl.parameterList;
import org.xtuml.bp.xtext.masl.terminatorItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>terminator Item</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.terminatorItemImpl#getServiceVisibility <em>Service Visibility</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.terminatorItemImpl#getServiceName <em>Service Name</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.terminatorItemImpl#getParameterList <em>Parameter List</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.terminatorItemImpl#getPragmaList <em>Pragma List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class terminatorItemImpl extends MinimalEObjectImpl.Container implements terminatorItem
{
  /**
   * The default value of the '{@link #getServiceVisibility() <em>Service Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceVisibility()
   * @generated
   * @ordered
   */
  protected static final String SERVICE_VISIBILITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getServiceVisibility() <em>Service Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceVisibility()
   * @generated
   * @ordered
   */
  protected String serviceVisibility = SERVICE_VISIBILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getServiceName() <em>Service Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceName()
   * @generated
   * @ordered
   */
  protected ServiceName serviceName;

  /**
   * The cached value of the '{@link #getParameterList() <em>Parameter List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterList()
   * @generated
   * @ordered
   */
  protected parameterList parameterList;

  /**
   * The cached value of the '{@link #getPragmaList() <em>Pragma List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaList()
   * @generated
   * @ordered
   */
  protected PragmaList pragmaList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected terminatorItemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.TERMINATOR_ITEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getServiceVisibility()
  {
    return serviceVisibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setServiceVisibility(String newServiceVisibility)
  {
    String oldServiceVisibility = serviceVisibility;
    serviceVisibility = newServiceVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__SERVICE_VISIBILITY, oldServiceVisibility, serviceVisibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ServiceName getServiceName()
  {
    return serviceName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetServiceName(ServiceName newServiceName, NotificationChain msgs)
  {
    ServiceName oldServiceName = serviceName;
    serviceName = newServiceName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__SERVICE_NAME, oldServiceName, newServiceName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setServiceName(ServiceName newServiceName)
  {
    if (newServiceName != serviceName)
    {
      NotificationChain msgs = null;
      if (serviceName != null)
        msgs = ((InternalEObject)serviceName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__SERVICE_NAME, null, msgs);
      if (newServiceName != null)
        msgs = ((InternalEObject)newServiceName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__SERVICE_NAME, null, msgs);
      msgs = basicSetServiceName(newServiceName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__SERVICE_NAME, newServiceName, newServiceName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameterList getParameterList()
  {
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameterList(parameterList newParameterList, NotificationChain msgs)
  {
    parameterList oldParameterList = parameterList;
    parameterList = newParameterList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST, oldParameterList, newParameterList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParameterList(parameterList newParameterList)
  {
    if (newParameterList != parameterList)
    {
      NotificationChain msgs = null;
      if (parameterList != null)
        msgs = ((InternalEObject)parameterList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST, null, msgs);
      if (newParameterList != null)
        msgs = ((InternalEObject)newParameterList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST, null, msgs);
      msgs = basicSetParameterList(newParameterList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST, newParameterList, newParameterList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaList getPragmaList()
  {
    return pragmaList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPragmaList(PragmaList newPragmaList, NotificationChain msgs)
  {
    PragmaList oldPragmaList = pragmaList;
    pragmaList = newPragmaList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST, oldPragmaList, newPragmaList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPragmaList(PragmaList newPragmaList)
  {
    if (newPragmaList != pragmaList)
    {
      NotificationChain msgs = null;
      if (pragmaList != null)
        msgs = ((InternalEObject)pragmaList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST, null, msgs);
      if (newPragmaList != null)
        msgs = ((InternalEObject)newPragmaList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST, null, msgs);
      msgs = basicSetPragmaList(newPragmaList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST, newPragmaList, newPragmaList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_ITEM__SERVICE_NAME:
        return basicSetServiceName(null, msgs);
      case MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST:
        return basicSetParameterList(null, msgs);
      case MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST:
        return basicSetPragmaList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_ITEM__SERVICE_VISIBILITY:
        return getServiceVisibility();
      case MaslPackage.TERMINATOR_ITEM__SERVICE_NAME:
        return getServiceName();
      case MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST:
        return getParameterList();
      case MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST:
        return getPragmaList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_ITEM__SERVICE_VISIBILITY:
        setServiceVisibility((String)newValue);
        return;
      case MaslPackage.TERMINATOR_ITEM__SERVICE_NAME:
        setServiceName((ServiceName)newValue);
        return;
      case MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST:
        setParameterList((parameterList)newValue);
        return;
      case MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST:
        setPragmaList((PragmaList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_ITEM__SERVICE_VISIBILITY:
        setServiceVisibility(SERVICE_VISIBILITY_EDEFAULT);
        return;
      case MaslPackage.TERMINATOR_ITEM__SERVICE_NAME:
        setServiceName((ServiceName)null);
        return;
      case MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST:
        setParameterList((parameterList)null);
        return;
      case MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST:
        setPragmaList((PragmaList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_ITEM__SERVICE_VISIBILITY:
        return SERVICE_VISIBILITY_EDEFAULT == null ? serviceVisibility != null : !SERVICE_VISIBILITY_EDEFAULT.equals(serviceVisibility);
      case MaslPackage.TERMINATOR_ITEM__SERVICE_NAME:
        return serviceName != null;
      case MaslPackage.TERMINATOR_ITEM__PARAMETER_LIST:
        return parameterList != null;
      case MaslPackage.TERMINATOR_ITEM__PRAGMA_LIST:
        return pragmaList != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (serviceVisibility: ");
    result.append(serviceVisibility);
    result.append(')');
    return result.toString();
  }

} //terminatorItemImpl
