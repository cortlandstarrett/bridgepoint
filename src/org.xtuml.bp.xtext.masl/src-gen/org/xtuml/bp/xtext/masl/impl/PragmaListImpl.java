/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.Pragma;
import org.xtuml.bp.xtext.masl.PragmaList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pragma List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.PragmaListImpl#getPragma <em>Pragma</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PragmaListImpl extends MinimalEObjectImpl.Container implements PragmaList
{
  /**
   * The cached value of the '{@link #getPragma() <em>Pragma</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragma()
   * @generated
   * @ordered
   */
  protected EList<Pragma> pragma;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PragmaListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.PRAGMA_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Pragma> getPragma()
  {
    if (pragma == null)
    {
      pragma = new EObjectContainmentEList<Pragma>(Pragma.class, this, MaslPackage.PRAGMA_LIST__PRAGMA);
    }
    return pragma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA_LIST__PRAGMA:
        return ((InternalEList<?>)getPragma()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA_LIST__PRAGMA:
        return getPragma();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA_LIST__PRAGMA:
        getPragma().clear();
        getPragma().addAll((Collection<? extends Pragma>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA_LIST__PRAGMA:
        getPragma().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA_LIST__PRAGMA:
        return pragma != null && !pragma.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PragmaListImpl
