/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.PragmaList;
import org.xtuml.bp.xtext.masl.TerminatorDefinition;
import org.xtuml.bp.xtext.masl.TerminatorName;
import org.xtuml.bp.xtext.masl.terminatorItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminator Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.TerminatorDefinitionImpl#getTerminatorName <em>Terminator Name</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.TerminatorDefinitionImpl#getTerminatorItem <em>Terminator Item</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.TerminatorDefinitionImpl#getPragmaList <em>Pragma List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminatorDefinitionImpl extends domainPrjItemImpl implements TerminatorDefinition
{
  /**
   * The cached value of the '{@link #getTerminatorName() <em>Terminator Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerminatorName()
   * @generated
   * @ordered
   */
  protected TerminatorName terminatorName;

  /**
   * The cached value of the '{@link #getTerminatorItem() <em>Terminator Item</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerminatorItem()
   * @generated
   * @ordered
   */
  protected EList<terminatorItem> terminatorItem;

  /**
   * The cached value of the '{@link #getPragmaList() <em>Pragma List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaList()
   * @generated
   * @ordered
   */
  protected PragmaList pragmaList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TerminatorDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.TERMINATOR_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TerminatorName getTerminatorName()
  {
    return terminatorName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerminatorName(TerminatorName newTerminatorName, NotificationChain msgs)
  {
    TerminatorName oldTerminatorName = terminatorName;
    terminatorName = newTerminatorName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME, oldTerminatorName, newTerminatorName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerminatorName(TerminatorName newTerminatorName)
  {
    if (newTerminatorName != terminatorName)
    {
      NotificationChain msgs = null;
      if (terminatorName != null)
        msgs = ((InternalEObject)terminatorName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME, null, msgs);
      if (newTerminatorName != null)
        msgs = ((InternalEObject)newTerminatorName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME, null, msgs);
      msgs = basicSetTerminatorName(newTerminatorName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME, newTerminatorName, newTerminatorName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<terminatorItem> getTerminatorItem()
  {
    if (terminatorItem == null)
    {
      terminatorItem = new EObjectContainmentEList<terminatorItem>(terminatorItem.class, this, MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM);
    }
    return terminatorItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaList getPragmaList()
  {
    return pragmaList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPragmaList(PragmaList newPragmaList, NotificationChain msgs)
  {
    PragmaList oldPragmaList = pragmaList;
    pragmaList = newPragmaList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST, oldPragmaList, newPragmaList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPragmaList(PragmaList newPragmaList)
  {
    if (newPragmaList != pragmaList)
    {
      NotificationChain msgs = null;
      if (pragmaList != null)
        msgs = ((InternalEObject)pragmaList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST, null, msgs);
      if (newPragmaList != null)
        msgs = ((InternalEObject)newPragmaList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST, null, msgs);
      msgs = basicSetPragmaList(newPragmaList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST, newPragmaList, newPragmaList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME:
        return basicSetTerminatorName(null, msgs);
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM:
        return ((InternalEList<?>)getTerminatorItem()).basicRemove(otherEnd, msgs);
      case MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST:
        return basicSetPragmaList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME:
        return getTerminatorName();
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM:
        return getTerminatorItem();
      case MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST:
        return getPragmaList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME:
        setTerminatorName((TerminatorName)newValue);
        return;
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM:
        getTerminatorItem().clear();
        getTerminatorItem().addAll((Collection<? extends terminatorItem>)newValue);
        return;
      case MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST:
        setPragmaList((PragmaList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME:
        setTerminatorName((TerminatorName)null);
        return;
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM:
        getTerminatorItem().clear();
        return;
      case MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST:
        setPragmaList((PragmaList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_NAME:
        return terminatorName != null;
      case MaslPackage.TERMINATOR_DEFINITION__TERMINATOR_ITEM:
        return terminatorItem != null && !terminatorItem.isEmpty();
      case MaslPackage.TERMINATOR_DEFINITION__PRAGMA_LIST:
        return pragmaList != null;
    }
    return super.eIsSet(featureID);
  }

} //TerminatorDefinitionImpl
