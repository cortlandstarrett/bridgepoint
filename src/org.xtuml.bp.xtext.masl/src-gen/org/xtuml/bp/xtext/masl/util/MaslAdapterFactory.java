/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtuml.bp.xtext.masl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.xtext.masl.MaslPackage
 * @generated
 */
public class MaslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MaslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MaslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MaslSwitch<Adapter> modelSwitch =
    new MaslSwitch<Adapter>()
    {
      @Override
      public Adapter caseProject(Project object)
      {
        return createProjectAdapter();
      }
      @Override
      public Adapter caseprojectItem(projectItem object)
      {
        return createprojectItemAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter casedomainPrjItem(domainPrjItem object)
      {
        return createdomainPrjItemAdapter();
      }
      @Override
      public Adapter caseProjectName(ProjectName object)
      {
        return createProjectNameAdapter();
      }
      @Override
      public Adapter caseDomainName(DomainName object)
      {
        return createDomainNameAdapter();
      }
      @Override
      public Adapter caseTerminatorName(TerminatorName object)
      {
        return createTerminatorNameAdapter();
      }
      @Override
      public Adapter caseTerminatorDefinition(TerminatorDefinition object)
      {
        return createTerminatorDefinitionAdapter();
      }
      @Override
      public Adapter caseterminatorItem(terminatorItem object)
      {
        return createterminatorItemAdapter();
      }
      @Override
      public Adapter caseTerminatorServiceDeclaration(TerminatorServiceDeclaration object)
      {
        return createTerminatorServiceDeclarationAdapter();
      }
      @Override
      public Adapter caseTerminatorFunctionDeclaration(TerminatorFunctionDeclaration object)
      {
        return createTerminatorFunctionDeclarationAdapter();
      }
      @Override
      public Adapter caseparameterList(parameterList object)
      {
        return createparameterListAdapter();
      }
      @Override
      public Adapter caseParameterDefinition(ParameterDefinition object)
      {
        return createParameterDefinitionAdapter();
      }
      @Override
      public Adapter caseServiceName(ServiceName object)
      {
        return createServiceNameAdapter();
      }
      @Override
      public Adapter caseParameterName(ParameterName object)
      {
        return createParameterNameAdapter();
      }
      @Override
      public Adapter caseParameterType(ParameterType object)
      {
        return createParameterTypeAdapter();
      }
      @Override
      public Adapter caseReturnType(ReturnType object)
      {
        return createReturnTypeAdapter();
      }
      @Override
      public Adapter casetypeReference(typeReference object)
      {
        return createtypeReferenceAdapter();
      }
      @Override
      public Adapter casedeprecatedType(deprecatedType object)
      {
        return createdeprecatedTypeAdapter();
      }
      @Override
      public Adapter caseNamedType(NamedType object)
      {
        return createNamedTypeAdapter();
      }
      @Override
      public Adapter caseTypeName(TypeName object)
      {
        return createTypeNameAdapter();
      }
      @Override
      public Adapter casePragmaList(PragmaList object)
      {
        return createPragmaListAdapter();
      }
      @Override
      public Adapter casePragma(Pragma object)
      {
        return createPragmaAdapter();
      }
      @Override
      public Adapter casePragmaName(PragmaName object)
      {
        return createPragmaNameAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.Project <em>Project</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.Project
   * @generated
   */
  public Adapter createProjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.projectItem <em>project Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.projectItem
   * @generated
   */
  public Adapter createprojectItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.domainPrjItem <em>domain Prj Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.domainPrjItem
   * @generated
   */
  public Adapter createdomainPrjItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ProjectName <em>Project Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ProjectName
   * @generated
   */
  public Adapter createProjectNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.DomainName <em>Domain Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.DomainName
   * @generated
   */
  public Adapter createDomainNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.TerminatorName <em>Terminator Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.TerminatorName
   * @generated
   */
  public Adapter createTerminatorNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.TerminatorDefinition <em>Terminator Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.TerminatorDefinition
   * @generated
   */
  public Adapter createTerminatorDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.terminatorItem <em>terminator Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.terminatorItem
   * @generated
   */
  public Adapter createterminatorItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.TerminatorServiceDeclaration <em>Terminator Service Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.TerminatorServiceDeclaration
   * @generated
   */
  public Adapter createTerminatorServiceDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.TerminatorFunctionDeclaration <em>Terminator Function Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.TerminatorFunctionDeclaration
   * @generated
   */
  public Adapter createTerminatorFunctionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.parameterList <em>parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.parameterList
   * @generated
   */
  public Adapter createparameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ParameterDefinition <em>Parameter Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ParameterDefinition
   * @generated
   */
  public Adapter createParameterDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ServiceName <em>Service Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ServiceName
   * @generated
   */
  public Adapter createServiceNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ParameterName <em>Parameter Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ParameterName
   * @generated
   */
  public Adapter createParameterNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ParameterType <em>Parameter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ParameterType
   * @generated
   */
  public Adapter createParameterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.ReturnType <em>Return Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.ReturnType
   * @generated
   */
  public Adapter createReturnTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.typeReference <em>type Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.typeReference
   * @generated
   */
  public Adapter createtypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.deprecatedType <em>deprecated Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.deprecatedType
   * @generated
   */
  public Adapter createdeprecatedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.NamedType <em>Named Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.NamedType
   * @generated
   */
  public Adapter createNamedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.TypeName <em>Type Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.TypeName
   * @generated
   */
  public Adapter createTypeNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.PragmaList <em>Pragma List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.PragmaList
   * @generated
   */
  public Adapter createPragmaListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.Pragma <em>Pragma</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.Pragma
   * @generated
   */
  public Adapter createPragmaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.PragmaName <em>Pragma Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.xtext.masl.PragmaName
   * @generated
   */
  public Adapter createPragmaNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MaslAdapterFactory
