/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.Pragma;
import org.xtuml.bp.xtext.masl.PragmaName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pragma</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.PragmaImpl#getPragmaName <em>Pragma Name</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.PragmaImpl#getPragmaValue <em>Pragma Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PragmaImpl extends MinimalEObjectImpl.Container implements Pragma
{
  /**
   * The cached value of the '{@link #getPragmaName() <em>Pragma Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaName()
   * @generated
   * @ordered
   */
  protected PragmaName pragmaName;

  /**
   * The cached value of the '{@link #getPragmaValue() <em>Pragma Value</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaValue()
   * @generated
   * @ordered
   */
  protected EList<String> pragmaValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PragmaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.PRAGMA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaName getPragmaName()
  {
    return pragmaName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPragmaName(PragmaName newPragmaName, NotificationChain msgs)
  {
    PragmaName oldPragmaName = pragmaName;
    pragmaName = newPragmaName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.PRAGMA__PRAGMA_NAME, oldPragmaName, newPragmaName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPragmaName(PragmaName newPragmaName)
  {
    if (newPragmaName != pragmaName)
    {
      NotificationChain msgs = null;
      if (pragmaName != null)
        msgs = ((InternalEObject)pragmaName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PRAGMA__PRAGMA_NAME, null, msgs);
      if (newPragmaName != null)
        msgs = ((InternalEObject)newPragmaName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PRAGMA__PRAGMA_NAME, null, msgs);
      msgs = basicSetPragmaName(newPragmaName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.PRAGMA__PRAGMA_NAME, newPragmaName, newPragmaName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getPragmaValue()
  {
    if (pragmaValue == null)
    {
      pragmaValue = new EDataTypeEList<String>(String.class, this, MaslPackage.PRAGMA__PRAGMA_VALUE);
    }
    return pragmaValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA__PRAGMA_NAME:
        return basicSetPragmaName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA__PRAGMA_NAME:
        return getPragmaName();
      case MaslPackage.PRAGMA__PRAGMA_VALUE:
        return getPragmaValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA__PRAGMA_NAME:
        setPragmaName((PragmaName)newValue);
        return;
      case MaslPackage.PRAGMA__PRAGMA_VALUE:
        getPragmaValue().clear();
        getPragmaValue().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA__PRAGMA_NAME:
        setPragmaName((PragmaName)null);
        return;
      case MaslPackage.PRAGMA__PRAGMA_VALUE:
        getPragmaValue().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PRAGMA__PRAGMA_NAME:
        return pragmaName != null;
      case MaslPackage.PRAGMA__PRAGMA_VALUE:
        return pragmaValue != null && !pragmaValue.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (pragmaValue: ");
    result.append(pragmaValue);
    result.append(')');
    return result.toString();
  }

} //PragmaImpl
