/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.PragmaList;
import org.xtuml.bp.xtext.masl.Project;
import org.xtuml.bp.xtext.masl.ProjectName;
import org.xtuml.bp.xtext.masl.projectItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Project</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.ProjectImpl#getProjectName <em>Project Name</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.ProjectImpl#getProjectItem <em>Project Item</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.ProjectImpl#getPragmaList <em>Pragma List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjectImpl extends MinimalEObjectImpl.Container implements Project
{
  /**
   * The cached value of the '{@link #getProjectName() <em>Project Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectName()
   * @generated
   * @ordered
   */
  protected ProjectName projectName;

  /**
   * The cached value of the '{@link #getProjectItem() <em>Project Item</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectItem()
   * @generated
   * @ordered
   */
  protected EList<projectItem> projectItem;

  /**
   * The cached value of the '{@link #getPragmaList() <em>Pragma List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaList()
   * @generated
   * @ordered
   */
  protected PragmaList pragmaList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.PROJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectName getProjectName()
  {
    return projectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjectName(ProjectName newProjectName, NotificationChain msgs)
  {
    ProjectName oldProjectName = projectName;
    projectName = newProjectName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.PROJECT__PROJECT_NAME, oldProjectName, newProjectName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectName(ProjectName newProjectName)
  {
    if (newProjectName != projectName)
    {
      NotificationChain msgs = null;
      if (projectName != null)
        msgs = ((InternalEObject)projectName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PROJECT__PROJECT_NAME, null, msgs);
      if (newProjectName != null)
        msgs = ((InternalEObject)newProjectName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PROJECT__PROJECT_NAME, null, msgs);
      msgs = basicSetProjectName(newProjectName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.PROJECT__PROJECT_NAME, newProjectName, newProjectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<projectItem> getProjectItem()
  {
    if (projectItem == null)
    {
      projectItem = new EObjectContainmentEList<projectItem>(projectItem.class, this, MaslPackage.PROJECT__PROJECT_ITEM);
    }
    return projectItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaList getPragmaList()
  {
    return pragmaList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPragmaList(PragmaList newPragmaList, NotificationChain msgs)
  {
    PragmaList oldPragmaList = pragmaList;
    pragmaList = newPragmaList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.PROJECT__PRAGMA_LIST, oldPragmaList, newPragmaList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPragmaList(PragmaList newPragmaList)
  {
    if (newPragmaList != pragmaList)
    {
      NotificationChain msgs = null;
      if (pragmaList != null)
        msgs = ((InternalEObject)pragmaList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PROJECT__PRAGMA_LIST, null, msgs);
      if (newPragmaList != null)
        msgs = ((InternalEObject)newPragmaList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.PROJECT__PRAGMA_LIST, null, msgs);
      msgs = basicSetPragmaList(newPragmaList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.PROJECT__PRAGMA_LIST, newPragmaList, newPragmaList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.PROJECT__PROJECT_NAME:
        return basicSetProjectName(null, msgs);
      case MaslPackage.PROJECT__PROJECT_ITEM:
        return ((InternalEList<?>)getProjectItem()).basicRemove(otherEnd, msgs);
      case MaslPackage.PROJECT__PRAGMA_LIST:
        return basicSetPragmaList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.PROJECT__PROJECT_NAME:
        return getProjectName();
      case MaslPackage.PROJECT__PROJECT_ITEM:
        return getProjectItem();
      case MaslPackage.PROJECT__PRAGMA_LIST:
        return getPragmaList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.PROJECT__PROJECT_NAME:
        setProjectName((ProjectName)newValue);
        return;
      case MaslPackage.PROJECT__PROJECT_ITEM:
        getProjectItem().clear();
        getProjectItem().addAll((Collection<? extends projectItem>)newValue);
        return;
      case MaslPackage.PROJECT__PRAGMA_LIST:
        setPragmaList((PragmaList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PROJECT__PROJECT_NAME:
        setProjectName((ProjectName)null);
        return;
      case MaslPackage.PROJECT__PROJECT_ITEM:
        getProjectItem().clear();
        return;
      case MaslPackage.PROJECT__PRAGMA_LIST:
        setPragmaList((PragmaList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.PROJECT__PROJECT_NAME:
        return projectName != null;
      case MaslPackage.PROJECT__PROJECT_ITEM:
        return projectItem != null && !projectItem.isEmpty();
      case MaslPackage.PROJECT__PRAGMA_LIST:
        return pragmaList != null;
    }
    return super.eIsSet(featureID);
  }

} //ProjectImpl
