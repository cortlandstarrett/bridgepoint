/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.Domain;
import org.xtuml.bp.xtext.masl.DomainName;
import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.PragmaList;
import org.xtuml.bp.xtext.masl.domainPrjItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.DomainImpl#getDomainName <em>Domain Name</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.DomainImpl#getDomainPrjItem <em>Domain Prj Item</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.DomainImpl#getPragmaList <em>Pragma List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DomainImpl extends projectItemImpl implements Domain
{
  /**
   * The cached value of the '{@link #getDomainName() <em>Domain Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected DomainName domainName;

  /**
   * The cached value of the '{@link #getDomainPrjItem() <em>Domain Prj Item</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainPrjItem()
   * @generated
   * @ordered
   */
  protected EList<domainPrjItem> domainPrjItem;

  /**
   * The cached value of the '{@link #getPragmaList() <em>Pragma List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPragmaList()
   * @generated
   * @ordered
   */
  protected PragmaList pragmaList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.DOMAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainName getDomainName()
  {
    return domainName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomainName(DomainName newDomainName, NotificationChain msgs)
  {
    DomainName oldDomainName = domainName;
    domainName = newDomainName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.DOMAIN__DOMAIN_NAME, oldDomainName, newDomainName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomainName(DomainName newDomainName)
  {
    if (newDomainName != domainName)
    {
      NotificationChain msgs = null;
      if (domainName != null)
        msgs = ((InternalEObject)domainName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.DOMAIN__DOMAIN_NAME, null, msgs);
      if (newDomainName != null)
        msgs = ((InternalEObject)newDomainName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.DOMAIN__DOMAIN_NAME, null, msgs);
      msgs = basicSetDomainName(newDomainName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.DOMAIN__DOMAIN_NAME, newDomainName, newDomainName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<domainPrjItem> getDomainPrjItem()
  {
    if (domainPrjItem == null)
    {
      domainPrjItem = new EObjectContainmentEList<domainPrjItem>(domainPrjItem.class, this, MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM);
    }
    return domainPrjItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PragmaList getPragmaList()
  {
    return pragmaList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPragmaList(PragmaList newPragmaList, NotificationChain msgs)
  {
    PragmaList oldPragmaList = pragmaList;
    pragmaList = newPragmaList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.DOMAIN__PRAGMA_LIST, oldPragmaList, newPragmaList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPragmaList(PragmaList newPragmaList)
  {
    if (newPragmaList != pragmaList)
    {
      NotificationChain msgs = null;
      if (pragmaList != null)
        msgs = ((InternalEObject)pragmaList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.DOMAIN__PRAGMA_LIST, null, msgs);
      if (newPragmaList != null)
        msgs = ((InternalEObject)newPragmaList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.DOMAIN__PRAGMA_LIST, null, msgs);
      msgs = basicSetPragmaList(newPragmaList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.DOMAIN__PRAGMA_LIST, newPragmaList, newPragmaList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.DOMAIN__DOMAIN_NAME:
        return basicSetDomainName(null, msgs);
      case MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM:
        return ((InternalEList<?>)getDomainPrjItem()).basicRemove(otherEnd, msgs);
      case MaslPackage.DOMAIN__PRAGMA_LIST:
        return basicSetPragmaList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.DOMAIN__DOMAIN_NAME:
        return getDomainName();
      case MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM:
        return getDomainPrjItem();
      case MaslPackage.DOMAIN__PRAGMA_LIST:
        return getPragmaList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.DOMAIN__DOMAIN_NAME:
        setDomainName((DomainName)newValue);
        return;
      case MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM:
        getDomainPrjItem().clear();
        getDomainPrjItem().addAll((Collection<? extends domainPrjItem>)newValue);
        return;
      case MaslPackage.DOMAIN__PRAGMA_LIST:
        setPragmaList((PragmaList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.DOMAIN__DOMAIN_NAME:
        setDomainName((DomainName)null);
        return;
      case MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM:
        getDomainPrjItem().clear();
        return;
      case MaslPackage.DOMAIN__PRAGMA_LIST:
        setPragmaList((PragmaList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.DOMAIN__DOMAIN_NAME:
        return domainName != null;
      case MaslPackage.DOMAIN__DOMAIN_PRJ_ITEM:
        return domainPrjItem != null && !domainPrjItem.isEmpty();
      case MaslPackage.DOMAIN__PRAGMA_LIST:
        return pragmaList != null;
    }
    return super.eIsSet(featureID);
  }

} //DomainImpl
