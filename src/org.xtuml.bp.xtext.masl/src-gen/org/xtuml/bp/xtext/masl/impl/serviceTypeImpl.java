/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.masl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.bp.xtext.masl.MaslPackage;
import org.xtuml.bp.xtext.masl.RelationshipName;
import org.xtuml.bp.xtext.masl.serviceType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>service Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.serviceTypeImpl#getINSTANCE <em>INSTANCE</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.impl.serviceTypeImpl#getRelationshipName <em>Relationship Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class serviceTypeImpl extends MinimalEObjectImpl.Container implements serviceType
{
  /**
   * The default value of the '{@link #getINSTANCE() <em>INSTANCE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getINSTANCE()
   * @generated
   * @ordered
   */
  protected static final String INSTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getINSTANCE() <em>INSTANCE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getINSTANCE()
   * @generated
   * @ordered
   */
  protected String instance = INSTANCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getRelationshipName() <em>Relationship Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationshipName()
   * @generated
   * @ordered
   */
  protected RelationshipName relationshipName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected serviceTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaslPackage.Literals.SERVICE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getINSTANCE()
  {
    return instance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setINSTANCE(String newINSTANCE)
  {
    String oldINSTANCE = instance;
    instance = newINSTANCE;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.SERVICE_TYPE__INSTANCE, oldINSTANCE, instance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationshipName getRelationshipName()
  {
    return relationshipName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationshipName(RelationshipName newRelationshipName, NotificationChain msgs)
  {
    RelationshipName oldRelationshipName = relationshipName;
    relationshipName = newRelationshipName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME, oldRelationshipName, newRelationshipName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationshipName(RelationshipName newRelationshipName)
  {
    if (newRelationshipName != relationshipName)
    {
      NotificationChain msgs = null;
      if (relationshipName != null)
        msgs = ((InternalEObject)relationshipName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME, null, msgs);
      if (newRelationshipName != null)
        msgs = ((InternalEObject)newRelationshipName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME, null, msgs);
      msgs = basicSetRelationshipName(newRelationshipName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME, newRelationshipName, newRelationshipName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME:
        return basicSetRelationshipName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaslPackage.SERVICE_TYPE__INSTANCE:
        return getINSTANCE();
      case MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME:
        return getRelationshipName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaslPackage.SERVICE_TYPE__INSTANCE:
        setINSTANCE((String)newValue);
        return;
      case MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME:
        setRelationshipName((RelationshipName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.SERVICE_TYPE__INSTANCE:
        setINSTANCE(INSTANCE_EDEFAULT);
        return;
      case MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME:
        setRelationshipName((RelationshipName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaslPackage.SERVICE_TYPE__INSTANCE:
        return INSTANCE_EDEFAULT == null ? instance != null : !INSTANCE_EDEFAULT.equals(instance);
      case MaslPackage.SERVICE_TYPE__RELATIONSHIP_NAME:
        return relationshipName != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (INSTANCE: ");
    result.append(instance);
    result.append(')');
    return result.toString();
  }

} //serviceTypeImpl
