/*
 * generated by Xtext 2.9.1
 */
grammar InternalMasl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtuml.bp.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtuml.bp.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.bp.xtext.services.MaslGrammarAccess;

}

@parser::members {

 	private MaslGrammarAccess grammarAccess;

    public InternalMaslParser(TokenStream input, MaslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "target";
   	}

   	@Override
   	protected MaslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuletarget
entryRuletarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruletarget=ruletarget
	{ $current=$iv_ruletarget.current; }
	EOF;

// Rule target
ruletarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTargetAccess().getDefinitionDefinitionParserRuleCall_0());
			}
			lv_definition_0_0=ruledefinition
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTargetRule());
				}
				add(
					$current,
					"definition",
					lv_definition_0_0,
					"org.xtuml.bp.xtext.Masl.definition");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuledefinition
entryRuledefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruledefinition=ruledefinition
	{ $current=$iv_ruledefinition.current; }
	EOF;

// Rule definition
ruledefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getProjectDefinitionParserRuleCall_0());
		}
		this_projectDefinition_0=ruleprojectDefinition
		{
			$current = $this_projectDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getObjectServiceDefinitionParserRuleCall_1());
		}
		this_objectServiceDefinition_1=ruleobjectServiceDefinition
		{
			$current = $this_objectServiceDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getObjectFunctionDefinitionParserRuleCall_2());
		}
		this_objectFunctionDefinition_2=ruleobjectFunctionDefinition
		{
			$current = $this_objectFunctionDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getDomainServiceDefinitionParserRuleCall_3());
		}
		this_domainServiceDefinition_3=ruledomainServiceDefinition
		{
			$current = $this_domainServiceDefinition_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getDomainFunctionDefinitionParserRuleCall_4());
		}
		this_domainFunctionDefinition_4=ruledomainFunctionDefinition
		{
			$current = $this_domainFunctionDefinition_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getTerminatorServiceDefinitionParserRuleCall_5());
		}
		this_terminatorServiceDefinition_5=ruleterminatorServiceDefinition
		{
			$current = $this_terminatorServiceDefinition_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getTerminatorFunctionDefinitionParserRuleCall_6());
		}
		this_terminatorFunctionDefinition_6=ruleterminatorFunctionDefinition
		{
			$current = $this_terminatorFunctionDefinition_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprojectDefinition
entryRuleprojectDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectDefinitionRule()); }
	iv_ruleprojectDefinition=ruleprojectDefinition
	{ $current=$iv_ruleprojectDefinition.current; }
	EOF;

// Rule projectDefinition
ruleprojectDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_0());
		}
		rulePROJECT
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectDefinitionAccess().getProjectNameProjectNameParserRuleCall_1_0());
				}
				lv_projectName_1_0=ruleprojectName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectDefinitionRule());
					}
					set(
						$current,
						"projectName",
						lv_projectName_1_0,
						"org.xtuml.bp.xtext.Masl.projectName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getISParserRuleCall_2());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectDefinitionAccess().getProjectItemProjectItemParserRuleCall_3_0());
				}
				lv_projectItem_3_0=ruleprojectItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectDefinitionRule());
					}
					add(
						$current,
						"projectItem",
						lv_projectItem_3_0,
						"org.xtuml.bp.xtext.Masl.projectItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getENDParserRuleCall_4());
		}
		ruleEND
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getProjectDefinitionAccess().getPROJECTParserRuleCall_5());
			}
			rulePROJECT
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getSEMIParserRuleCall_6());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0());
				}
				lv_pragmaList_7_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_7_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprojectItem
entryRuleprojectItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectItemRule()); }
	iv_ruleprojectItem=ruleprojectItem
	{ $current=$iv_ruleprojectItem.current; }
	EOF;

// Rule projectItem
ruleprojectItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getProjectItemAccess().getDomainPrjDefinitionParserRuleCall());
	}
	this_domainPrjDefinition_0=ruledomainPrjDefinition
	{
		$current = $this_domainPrjDefinition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuledomainPrjDefinition
entryRuledomainPrjDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainPrjDefinitionRule()); }
	iv_ruledomainPrjDefinition=ruledomainPrjDefinition
	{ $current=$iv_ruledomainPrjDefinition.current; }
	EOF;

// Rule domainPrjDefinition
ruledomainPrjDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_0());
		}
		ruleDOMAIN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getDomainNameDomainNameParserRuleCall_1_0());
				}
				lv_domainName_1_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainPrjDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_1_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getISParserRuleCall_2());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getDomainPrjItemDomainPrjItemParserRuleCall_3_0());
				}
				lv_domainPrjItem_3_0=ruledomainPrjItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainPrjDefinitionRule());
					}
					add(
						$current,
						"domainPrjItem",
						lv_domainPrjItem_3_0,
						"org.xtuml.bp.xtext.Masl.domainPrjItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getENDParserRuleCall_4());
		}
		ruleEND
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getDOMAINParserRuleCall_5());
			}
			ruleDOMAIN
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getSEMIParserRuleCall_6());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainPrjDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0());
				}
				lv_pragmaList_7_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainPrjDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_7_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledomainPrjItem
entryRuledomainPrjItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainPrjItemRule()); }
	iv_ruledomainPrjItem=ruledomainPrjItem
	{ $current=$iv_ruledomainPrjItem.current; }
	EOF;

// Rule domainPrjItem
ruledomainPrjItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getDomainPrjItemAccess().getTerminatorDefinitionParserRuleCall());
	}
	this_terminatorDefinition_0=ruleterminatorDefinition
	{
		$current = $this_terminatorDefinition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleprojectName
entryRuleprojectName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectNameRule()); }
	iv_ruleprojectName=ruleprojectName
	{ $current=$iv_ruleprojectName.current; }
	EOF;

// Rule projectName
ruleprojectName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getProjectNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProjectNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuledomainName
entryRuledomainName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainNameRule()); }
	iv_ruledomainName=ruledomainName
	{ $current=$iv_ruledomainName.current; }
	EOF;

// Rule domainName
ruledomainName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getDomainNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDomainNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleterminatorName
entryRuleterminatorName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorNameRule()); }
	iv_ruleterminatorName=ruleterminatorName
	{ $current=$iv_ruleterminatorName.current; }
	EOF;

// Rule terminatorName
ruleterminatorName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getTerminatorNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTerminatorNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleterminatorDefinition
entryRuleterminatorDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorDefinitionRule()); }
	iv_ruleterminatorDefinition=ruleterminatorDefinition
	{ $current=$iv_ruleterminatorDefinition.current; }
	EOF;

// Rule terminatorDefinition
ruleterminatorDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_0());
		}
		ruleTERMINATOR
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getTerminatorNameTerminatorNameParserRuleCall_1_0());
				}
				lv_terminatorName_1_0=ruleterminatorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorDefinitionRule());
					}
					set(
						$current,
						"terminatorName",
						lv_terminatorName_1_0,
						"org.xtuml.bp.xtext.Masl.terminatorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getISParserRuleCall_2());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getTerminatorItemTerminatorItemParserRuleCall_3_0());
				}
				lv_terminatorItem_3_0=ruleterminatorItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorDefinitionRule());
					}
					add(
						$current,
						"terminatorItem",
						lv_terminatorItem_3_0,
						"org.xtuml.bp.xtext.Masl.terminatorItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getENDParserRuleCall_4());
		}
		ruleEND
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getTERMINATORParserRuleCall_5());
			}
			ruleTERMINATOR
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getSEMIParserRuleCall_6());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getPragmaListPragmaListParserRuleCall_7_0());
				}
				lv_pragmaList_7_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_7_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleterminatorItem
entryRuleterminatorItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorItemRule()); }
	iv_ruleterminatorItem=ruleterminatorItem
	{ $current=$iv_ruleterminatorItem.current; }
	EOF;

// Rule terminatorItem
ruleterminatorItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminatorItemAccess().getTerminatorServiceDeclarationParserRuleCall_0());
		}
		this_terminatorServiceDeclaration_0=ruleterminatorServiceDeclaration
		{
			$current = $this_terminatorServiceDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminatorItemAccess().getTerminatorFunctionDeclarationParserRuleCall_1());
		}
		this_terminatorFunctionDeclaration_1=ruleterminatorFunctionDeclaration
		{
			$current = $this_terminatorFunctionDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleterminatorServiceDeclaration
entryRuleterminatorServiceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorServiceDeclarationRule()); }
	iv_ruleterminatorServiceDeclaration=ruleterminatorServiceDeclaration
	{ $current=$iv_ruleterminatorServiceDeclaration.current; }
	EOF;

// Rule terminatorServiceDeclaration
ruleterminatorServiceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getSERVICEParserRuleCall_1());
		}
		ruleSERVICE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0());
				}
				lv_serviceName_2_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_2_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListParameterListParserRuleCall_3_0());
				}
				lv_parameterList_3_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_3_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getSEMIParserRuleCall_4());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListPragmaListParserRuleCall_5_0());
				}
				lv_pragmaList_5_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_5_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleterminatorFunctionDeclaration
entryRuleterminatorFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationRule()); }
	iv_ruleterminatorFunctionDeclaration=ruleterminatorFunctionDeclaration
	{ $current=$iv_ruleterminatorFunctionDeclaration.current; }
	EOF;

// Rule terminatorFunctionDeclaration
ruleterminatorFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDeclarationRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getFUNCTIONParserRuleCall_1());
		}
		ruleFUNCTION
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getServiceNameServiceNameParserRuleCall_2_0());
				}
				lv_serviceName_2_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDeclarationRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_2_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_3_0());
				}
				lv_parameterList_3_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDeclarationRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_3_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getRETURNParserRuleCall_4());
		}
		ruleRETURN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getReturnTypeReturnTypeParserRuleCall_5_0());
				}
				lv_returnType_5_0=rulereturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDeclarationRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_5_0,
						"org.xtuml.bp.xtext.Masl.returnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getSEMIParserRuleCall_6());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDeclarationAccess().getPragmaListPragmaListParserRuleCall_7_0());
				}
				lv_pragmaList_7_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDeclarationRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_7_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current; }
	EOF;

// Rule parameterList
ruleparameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getLPARENParserRuleCall_0());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterListAccess().getParameterListAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_2_0());
				}
				lv_parameterDefinition_2_0=ruleparameterDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					add(
						$current,
						"parameterDefinition",
						lv_parameterDefinition_2_0,
						"org.xtuml.bp.xtext.Masl.parameterDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			{
				newCompositeNode(grammarAccess.getParameterListAccess().getCOMMAParserRuleCall_3_0());
			}
			ruleCOMMA
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParameterDefinitionParameterDefinitionParserRuleCall_3_1_0());
					}
					lv_parameterDefinition_4_0=ruleparameterDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameterDefinition",
							lv_parameterDefinition_4_0,
							"org.xtuml.bp.xtext.Masl.parameterDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getRPARENParserRuleCall_4());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleparameterDefinition
entryRuleparameterDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDefinitionRule()); }
	iv_ruleparameterDefinition=ruleparameterDefinition
	{ $current=$iv_ruleparameterDefinition.current; }
	EOF;

// Rule parameterDefinition
ruleparameterDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDefinitionAccess().getParameterNameParameterNameParserRuleCall_0_0());
				}
				lv_parameterName_0_0=ruleparameterName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDefinitionRule());
					}
					set(
						$current,
						"parameterName",
						lv_parameterName_0_0,
						"org.xtuml.bp.xtext.Masl.parameterName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getParameterDefinitionAccess().getCOLONParserRuleCall_1());
		}
		ruleCOLON
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDefinitionAccess().getParameterModeParameterModeParserRuleCall_2_0());
				}
				lv_parameterMode_2_0=ruleparameterMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDefinitionRule());
					}
					set(
						$current,
						"parameterMode",
						lv_parameterMode_2_0,
						"org.xtuml.bp.xtext.Masl.parameterMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDefinitionAccess().getParameterTypeParameterTypeParserRuleCall_3_0());
				}
				lv_parameterType_3_0=ruleparameterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDefinitionRule());
					}
					set(
						$current,
						"parameterType",
						lv_parameterType_3_0,
						"org.xtuml.bp.xtext.Masl.parameterType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleserviceVisibility
entryRuleserviceVisibility returns [String current=null]:
	{ newCompositeNode(grammarAccess.getServiceVisibilityRule()); }
	iv_ruleserviceVisibility=ruleserviceVisibility
	{ $current=$iv_ruleserviceVisibility.current.getText(); }
	EOF;

// Rule serviceVisibility
ruleserviceVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getServiceVisibilityAccess().getPRIVATEParserRuleCall_0());
		}
		this_PRIVATE_0=rulePRIVATE
		{
			$current.merge(this_PRIVATE_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getServiceVisibilityAccess().getPUBLICParserRuleCall_1());
		}
		this_PUBLIC_1=rulePUBLIC
		{
			$current.merge(this_PUBLIC_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleparameterMode
entryRuleparameterMode returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterModeRule()); }
	iv_ruleparameterMode=ruleparameterMode
	{ $current=$iv_ruleparameterMode.current.getText(); }
	EOF;

// Rule parameterMode
ruleparameterMode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterModeAccess().getINParserRuleCall_0());
		}
		this_IN_0=ruleIN
		{
			$current.merge(this_IN_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParameterModeAccess().getOUTParserRuleCall_1());
		}
		this_OUT_1=ruleOUT
		{
			$current.merge(this_OUT_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleserviceName
entryRuleserviceName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceNameRule()); }
	iv_ruleserviceName=ruleserviceName
	{ $current=$iv_ruleserviceName.current; }
	EOF;

// Rule serviceName
ruleserviceName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getServiceNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getServiceNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleparameterName
entryRuleparameterName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterNameRule()); }
	iv_ruleparameterName=ruleparameterName
	{ $current=$iv_ruleparameterName.current; }
	EOF;

// Rule parameterName
ruleparameterName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getParameterNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleparameterType
entryRuleparameterType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterTypeRule()); }
	iv_ruleparameterType=ruleparameterType
	{ $current=$iv_ruleparameterType.current; }
	EOF;

// Rule parameterType
ruleparameterType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0());
			}
			lv_typeReference_0_0=ruletypeReference
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getParameterTypeRule());
				}
				set(
					$current,
					"typeReference",
					lv_typeReference_0_0,
					"org.xtuml.bp.xtext.Masl.typeReference");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulereturnType
entryRulereturnType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnTypeRule()); }
	iv_rulereturnType=rulereturnType
	{ $current=$iv_rulereturnType.current; }
	EOF;

// Rule returnType
rulereturnType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getReturnTypeAccess().getTypeReferenceTypeReferenceParserRuleCall_0());
			}
			lv_typeReference_0_0=ruletypeReference
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getReturnTypeRule());
				}
				set(
					$current,
					"typeReference",
					lv_typeReference_0_0,
					"org.xtuml.bp.xtext.Masl.typeReference");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuletypeReference
entryRuletypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	iv_ruletypeReference=ruletypeReference
	{ $current=$iv_ruletypeReference.current; }
	EOF;

// Rule typeReference
ruletypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeReferenceAccess().getNamedTypeRefParserRuleCall_0());
		}
		this_namedTypeRef_0=rulenamedTypeRef
		{
			$current = $this_namedTypeRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeprecatedTypeParserRuleCall_1());
		}
		this_deprecatedType_1=ruledeprecatedType
		{
			$current = $this_deprecatedType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledeprecatedType
entryRuledeprecatedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeprecatedTypeRule()); }
	iv_ruledeprecatedType=ruledeprecatedType
	{ $current=$iv_ruledeprecatedType.current; }
	EOF;

// Rule deprecatedType
ruledeprecatedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeprecatedTypeAccess().getINSTANCEINSTANCEParserRuleCall_0_0());
				}
				lv_INSTANCE_0_0=ruleINSTANCE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeprecatedTypeRule());
					}
					set(
						$current,
						"INSTANCE",
						lv_INSTANCE_0_0,
						"org.xtuml.bp.xtext.Masl.INSTANCE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeprecatedTypeAccess().getEVENTEVENTParserRuleCall_1_0());
				}
				lv_EVENT_1_0=ruleEVENT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeprecatedTypeRule());
					}
					set(
						$current,
						"EVENT",
						lv_EVENT_1_0,
						"org.xtuml.bp.xtext.Masl.EVENT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeprecatedTypeAccess().getSERVICESERVICEParserRuleCall_2_0());
				}
				lv_SERVICE_2_0=ruleSERVICE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeprecatedTypeRule());
					}
					set(
						$current,
						"SERVICE",
						lv_SERVICE_2_0,
						"org.xtuml.bp.xtext.Masl.SERVICE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulenamedTypeRef
entryRulenamedTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedTypeRefRule()); }
	iv_rulenamedTypeRef=rulenamedTypeRef
	{ $current=$iv_rulenamedTypeRef.current; }
	EOF;

// Rule namedTypeRef
rulenamedTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNamedTypeRefAccess().getAnonymousANONYMOUSParserRuleCall_0_0());
				}
				lv_anonymous_0_0=ruleANONYMOUS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamedTypeRefRule());
					}
					set(
						$current,
						"anonymous",
						lv_anonymous_0_0,
						"org.xtuml.bp.xtext.Masl.ANONYMOUS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNamedTypeRefAccess().getDomainNameDomainNameParserRuleCall_1_0_0());
					}
					lv_domainName_1_0=ruledomainName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamedTypeRefRule());
						}
						set(
							$current,
							"domainName",
							lv_domainName_1_0,
							"org.xtuml.bp.xtext.Masl.domainName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getNamedTypeRefAccess().getSCOPEParserRuleCall_1_1());
			}
			ruleSCOPE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNamedTypeRefAccess().getTypeNameTypeNameParserRuleCall_2_0());
				}
				lv_typeName_3_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamedTypeRefRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_3_0,
						"org.xtuml.bp.xtext.Masl.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeName
entryRuletypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruletypeName=ruletypeName
	{ $current=$iv_ruletypeName.current; }
	EOF;

// Rule typeName
ruletypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getTypeNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulepragmaList
entryRulepragmaList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaListRule()); }
	iv_rulepragmaList=rulepragmaList
	{ $current=$iv_rulepragmaList.current; }
	EOF;

// Rule pragmaList
rulepragmaList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPragmaListAccess().getPragmaListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPragmaListAccess().getPragmaPragmaParserRuleCall_1_0_0());
					}
					lv_pragma_1_0=rulepragma
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPragmaListRule());
						}
						add(
							$current,
							"pragma",
							lv_pragma_1_0,
							"org.xtuml.bp.xtext.Masl.pragma");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getPragmaListAccess().getSEMIParserRuleCall_1_1());
			}
			ruleSEMI
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulepragma
entryRulepragma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaRule()); }
	iv_rulepragma=rulepragma
	{ $current=$iv_rulepragma.current; }
	EOF;

// Rule pragma
rulepragma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPragmaAccess().getPRAGMATOKParserRuleCall_0());
		}
		rulePRAGMATOK
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPragmaAccess().getPragmaNamePragmaNameParserRuleCall_1_0());
				}
				lv_pragmaName_1_0=rulepragmaName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPragmaRule());
					}
					set(
						$current,
						"pragmaName",
						lv_pragmaName_1_0,
						"org.xtuml.bp.xtext.Masl.pragmaName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getPragmaAccess().getLPARENParserRuleCall_2());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_0_0());
					}
					lv_pragmaValue_3_0=rulepragmaValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPragmaRule());
						}
						add(
							$current,
							"pragmaValue",
							lv_pragmaValue_3_0,
							"org.xtuml.bp.xtext.Masl.pragmaValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				{
					newCompositeNode(grammarAccess.getPragmaAccess().getCOMMAParserRuleCall_3_1_0());
				}
				ruleCOMMA
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPragmaAccess().getPragmaValuePragmaValueParserRuleCall_3_1_1_0());
						}
						lv_pragmaValue_5_0=rulepragmaValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPragmaRule());
							}
							add(
								$current,
								"pragmaValue",
								lv_pragmaValue_5_0,
								"org.xtuml.bp.xtext.Masl.pragmaValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		{
			newCompositeNode(grammarAccess.getPragmaAccess().getRPARENParserRuleCall_4());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulepragmaValue
entryRulepragmaValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPragmaValueRule()); }
	iv_rulepragmaValue=rulepragmaValue
	{ $current=$iv_rulepragmaValue.current.getText(); }
	EOF;

// Rule pragmaValue
rulepragmaValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPragmaValueAccess().getLiteralParserRuleCall_0());
		}
		this_literal_0=ruleliteral
		{
			$current.merge(this_literal_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getPragmaValueAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulepragmaName
entryRulepragmaName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaNameRule()); }
	iv_rulepragmaName=rulepragmaName
	{ $current=$iv_rulepragmaName.current; }
	EOF;

// Rule pragmaName
rulepragmaName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getPragmaNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPragmaNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current.getText(); }
	EOF;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleobjectName
entryRuleobjectName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectNameRule()); }
	iv_ruleobjectName=ruleobjectName
	{ $current=$iv_ruleobjectName.current; }
	EOF;

// Rule objectName
ruleobjectName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getObjectNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getObjectNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleserviceType
entryRuleserviceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceTypeRule()); }
	iv_ruleserviceType=ruleserviceType
	{ $current=$iv_ruleserviceType.current; }
	EOF;

// Rule serviceType
ruleserviceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceTypeAccess().getINSTANCEINSTANCEParserRuleCall_0_0());
				}
				lv_INSTANCE_0_0=ruleINSTANCE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceTypeRule());
					}
					set(
						$current,
						"INSTANCE",
						lv_INSTANCE_0_0,
						"org.xtuml.bp.xtext.Masl.INSTANCE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getServiceTypeAccess().getDEFERREDParserRuleCall_1_0());
			}
			ruleDEFERRED
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getServiceTypeAccess().getLPARENParserRuleCall_1_1());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceTypeAccess().getRelationshipNameRelationshipNameParserRuleCall_1_2_0());
					}
					lv_relationshipName_3_0=rulerelationshipName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceTypeRule());
						}
						set(
							$current,
							"relationshipName",
							lv_relationshipName_3_0,
							"org.xtuml.bp.xtext.Masl.relationshipName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getServiceTypeAccess().getRPARENParserRuleCall_1_3());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)?
;

// Entry rule entryRulerelationshipName
entryRulerelationshipName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipNameRule()); }
	iv_rulerelationshipName=rulerelationshipName
	{ $current=$iv_rulerelationshipName.current; }
	EOF;

// Rule relationshipName
rulerelationshipName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_relationshipName_0_0=RULE_RELATIONSHIP_NAME
			{
				newLeafNode(lv_relationshipName_0_0, grammarAccess.getRelationshipNameAccess().getRelationshipNameRELATIONSHIP_NAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRelationshipNameRule());
				}
				setWithLastConsumed(
					$current,
					"relationshipName",
					lv_relationshipName_0_0,
					"org.xtuml.bp.xtext.Masl.RELATIONSHIP_NAME");
			}
		)
	)
;

// Entry rule entryRuledomainServiceDefinition
entryRuledomainServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainServiceDefinitionRule()); }
	iv_ruledomainServiceDefinition=ruledomainServiceDefinition
	{ $current=$iv_ruledomainServiceDefinition.current; }
	EOF;

// Rule domainServiceDefinition
ruledomainServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getSERVICEParserRuleCall_1());
		}
		ruleSERVICE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getDomainNameDomainNameParserRuleCall_2_0());
				}
				lv_domainName_2_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_2_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getSCOPEParserRuleCall_3());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getServiceNameServiceNameParserRuleCall_4_0());
				}
				lv_serviceName_4_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_4_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getParameterListParameterListParserRuleCall_5_0());
				}
				lv_parameterList_5_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_5_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getISParserRuleCall_6());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_7_0());
				}
				lv_codeBlock_7_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_7_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getSERVICEParserRuleCall_8());
			}
			ruleSERVICE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getSEMIParserRuleCall_9());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getPargmaListPragmaListParserRuleCall_10_0());
				}
				lv_pargmaList_10_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"pargmaList",
						lv_pargmaList_10_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledomainFunctionDefinition
entryRuledomainFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainFunctionDefinitionRule()); }
	iv_ruledomainFunctionDefinition=ruledomainFunctionDefinition
	{ $current=$iv_ruledomainFunctionDefinition.current; }
	EOF;

// Rule domainFunctionDefinition
ruledomainFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getFUNCTIONParserRuleCall_1());
		}
		ruleFUNCTION
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getDomainNameDomainNameParserRuleCall_2_0());
				}
				lv_domainName_2_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_2_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getSCOPEParserRuleCall_3());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getServiceNameServiceNameParserRuleCall_4_0());
				}
				lv_serviceName_4_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_4_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getParameterListParameterListParserRuleCall_5_0());
				}
				lv_parameterList_5_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_5_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getRETURNParserRuleCall_6());
		}
		ruleRETURN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getReturnTypeReturnTypeParserRuleCall_7_0());
				}
				lv_returnType_7_0=rulereturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_7_0,
						"org.xtuml.bp.xtext.Masl.returnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getISParserRuleCall_8());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_9_0());
				}
				lv_codeBlock_9_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_9_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getFUNCTIONParserRuleCall_10());
			}
			ruleFUNCTION
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getSEMIParserRuleCall_11());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainFunctionDefinitionAccess().getPargmaListPragmaListParserRuleCall_12_0());
				}
				lv_pargmaList_12_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainFunctionDefinitionRule());
					}
					set(
						$current,
						"pargmaList",
						lv_pargmaList_12_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleobjectServiceDefinition
entryRuleobjectServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectServiceDefinitionRule()); }
	iv_ruleobjectServiceDefinition=ruleobjectServiceDefinition
	{ $current=$iv_ruleobjectServiceDefinition.current; }
	EOF;

// Rule objectServiceDefinition
ruleobjectServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getINSTANCEINSTANCEParserRuleCall_1_0());
				}
				lv_INSTANCE_1_0=ruleINSTANCE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"INSTANCE",
						lv_INSTANCE_1_0,
						"org.xtuml.bp.xtext.Masl.INSTANCE");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getSERVICEParserRuleCall_2());
		}
		ruleSERVICE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getDomainNameDomainNameParserRuleCall_3_0());
				}
				lv_domainName_3_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_3_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getSCOPEParserRuleCall_4());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getObjectNameObjectNameParserRuleCall_5_0());
				}
				lv_objectName_5_0=ruleobjectName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"objectName",
						lv_objectName_5_0,
						"org.xtuml.bp.xtext.Masl.objectName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getDOTParserRuleCall_6());
		}
		ruleDOT
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getServiceNameServiceNameParserRuleCall_7_0());
				}
				lv_serviceName_7_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_7_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getParameterListParameterListParserRuleCall_8_0());
				}
				lv_parameterList_8_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_8_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getISParserRuleCall_9());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_10_0());
				}
				lv_codeBlock_10_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_10_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getSERVICEParserRuleCall_11());
			}
			ruleSERVICE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getSEMIParserRuleCall_12());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getPragmaListPragmaListParserRuleCall_13_0());
				}
				lv_pragmaList_13_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_13_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleobjectFunctionDefinition
entryRuleobjectFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectFunctionDefinitionRule()); }
	iv_ruleobjectFunctionDefinition=ruleobjectFunctionDefinition
	{ $current=$iv_ruleobjectFunctionDefinition.current; }
	EOF;

// Rule objectFunctionDefinition
ruleobjectFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getServiceTypeServiceTypeParserRuleCall_1_0());
				}
				lv_serviceType_1_0=ruleserviceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceType",
						lv_serviceType_1_0,
						"org.xtuml.bp.xtext.Masl.serviceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getFUNCTIONParserRuleCall_2());
		}
		ruleFUNCTION
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getDomainNameDomainNameParserRuleCall_3_0());
				}
				lv_domainName_3_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_3_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getSCOPEParserRuleCall_4());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getObjectNameObjectNameParserRuleCall_5_0());
				}
				lv_objectName_5_0=ruleobjectName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"objectName",
						lv_objectName_5_0,
						"org.xtuml.bp.xtext.Masl.objectName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getDOTParserRuleCall_6());
		}
		ruleDOT
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getServiceNameServiceNameParserRuleCall_7_0());
				}
				lv_serviceName_7_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_7_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getParameterListParameterListParserRuleCall_8_0());
				}
				lv_parameterList_8_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_8_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getRETURNParserRuleCall_9());
		}
		ruleRETURN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getReturnTypeReturnTypeParserRuleCall_10_0());
				}
				lv_returnType_10_0=rulereturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_10_0,
						"org.xtuml.bp.xtext.Masl.returnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getISParserRuleCall_11());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_12_0());
				}
				lv_codeBlock_12_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_12_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getFUNCTIONParserRuleCall_13());
			}
			ruleFUNCTION
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getSEMIParserRuleCall_14());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFunctionDefinitionAccess().getPragmaListPragmaListParserRuleCall_15_0());
				}
				lv_pragmaList_15_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFunctionDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_15_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleterminatorServiceDefinition
entryRuleterminatorServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorServiceDefinitionRule()); }
	iv_ruleterminatorServiceDefinition=ruleterminatorServiceDefinition
	{ $current=$iv_ruleterminatorServiceDefinition.current; }
	EOF;

// Rule terminatorServiceDefinition
ruleterminatorServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getSERVICEParserRuleCall_1());
		}
		ruleSERVICE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getDomainNameDomainNameParserRuleCall_2_0());
				}
				lv_domainName_2_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_2_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getSCOPEParserRuleCall_3());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getTerminatorNameTerminatorNameParserRuleCall_4_0());
				}
				lv_terminatorName_4_0=ruleterminatorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"terminatorName",
						lv_terminatorName_4_0,
						"org.xtuml.bp.xtext.Masl.terminatorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getTERMINATOR_SCOPEParserRuleCall_5());
		}
		ruleTERMINATOR_SCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getServiceNameServiceNameParserRuleCall_6_0());
				}
				lv_serviceName_6_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_6_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getParameterListParameterListParserRuleCall_7_0());
				}
				lv_parameterList_7_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_7_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getISParserRuleCall_8());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_9_0());
				}
				lv_codeBlock_9_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_9_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getSERVICEParserRuleCall_10());
			}
			ruleSERVICE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getSEMIParserRuleCall_11());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getPragmaListPragmaListParserRuleCall_12_0());
				}
				lv_pragmaList_12_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_12_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleterminatorFunctionDefinition
entryRuleterminatorFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionRule()); }
	iv_ruleterminatorFunctionDefinition=ruleterminatorFunctionDefinition
	{ $current=$iv_ruleterminatorFunctionDefinition.current; }
	EOF;

// Rule terminatorFunctionDefinition
ruleterminatorFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getServiceVisibilityServiceVisibilityParserRuleCall_0_0());
				}
				lv_serviceVisibility_0_0=ruleserviceVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceVisibility",
						lv_serviceVisibility_0_0,
						"org.xtuml.bp.xtext.Masl.serviceVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getFUNCTIONParserRuleCall_1());
		}
		ruleFUNCTION
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getDomainNameDomainNameParserRuleCall_2_0());
				}
				lv_domainName_2_0=ruledomainName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"domainName",
						lv_domainName_2_0,
						"org.xtuml.bp.xtext.Masl.domainName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getSCOPEParserRuleCall_3());
		}
		ruleSCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getTerminatorNameTerminatorNameParserRuleCall_4_0());
				}
				lv_terminatorName_4_0=ruleterminatorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"terminatorName",
						lv_terminatorName_4_0,
						"org.xtuml.bp.xtext.Masl.terminatorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getTERMINATOR_SCOPEParserRuleCall_5());
		}
		ruleTERMINATOR_SCOPE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getServiceNameServiceNameParserRuleCall_6_0());
				}
				lv_serviceName_6_0=ruleserviceName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_6_0,
						"org.xtuml.bp.xtext.Masl.serviceName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getParameterListParameterListParserRuleCall_7_0());
				}
				lv_parameterList_7_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_7_0,
						"org.xtuml.bp.xtext.Masl.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getRETURNParserRuleCall_8());
		}
		ruleRETURN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getReturnTypeReturnTypeParserRuleCall_9_0());
				}
				lv_returnType_9_0=rulereturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_9_0,
						"org.xtuml.bp.xtext.Masl.returnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getISParserRuleCall_10());
		}
		ruleIS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getCodeBlockCodeBlockParserRuleCall_11_0());
				}
				lv_codeBlock_11_0=rulecodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_11_0,
						"org.xtuml.bp.xtext.Masl.codeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getFUNCTIONParserRuleCall_12());
			}
			ruleFUNCTION
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getSEMIParserRuleCall_13());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorFunctionDefinitionAccess().getPragmaListPragmaListParserRuleCall_14_0());
				}
				lv_pragmaList_14_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorFunctionDefinitionRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_14_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecodeBlock
entryRulecodeBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeBlockRule()); }
	iv_rulecodeBlock=rulecodeBlock
	{ $current=$iv_rulecodeBlock.current; }
	EOF;

// Rule codeBlock
rulecodeBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCodeBlockAccess().getVariableDeclarationVariableDeclarationParserRuleCall_0_0());
				}
				lv_variableDeclaration_0_0=rulevariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
					}
					add(
						$current,
						"variableDeclaration",
						lv_variableDeclaration_0_0,
						"org.xtuml.bp.xtext.Masl.variableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getCodeBlockAccess().getBEGINParserRuleCall_1());
		}
		ruleBEGIN
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCodeBlockAccess().getStatementListParserRuleCall_2());
		}
		rulestatementList
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCodeBlockAccess().getENDParserRuleCall_3());
		}
		ruleEND
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevariableDeclaration
entryRulevariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_rulevariableDeclaration=rulevariableDeclaration
	{ $current=$iv_rulevariableDeclaration.current; }
	EOF;

// Rule variableDeclaration
rulevariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableNameVariableNameParserRuleCall_0_0());
				}
				lv_variableName_0_0=rulevariableName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"variableName",
						lv_variableName_0_0,
						"org.xtuml.bp.xtext.Masl.variableName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getCOLONParserRuleCall_1());
		}
		ruleCOLON
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getREADONLYREADONLYParserRuleCall_2_0());
				}
				lv_READONLY_2_0=ruleREADONLY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"READONLY",
						lv_READONLY_2_0,
						"org.xtuml.bp.xtext.Masl.READONLY");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeReferenceWithCATypeReferenceParserRuleCall_3_0());
				}
				lv_typeReferenceWithCA_3_0=ruletypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"typeReferenceWithCA",
						lv_typeReferenceWithCA_3_0,
						"org.xtuml.bp.xtext.Masl.typeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getSEMIParserRuleCall_4());
		}
		ruleSEMI
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getPragmaListPragmaListParserRuleCall_5_0());
				}
				lv_pragmaList_5_0=rulepragmaList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"pragmaList",
						lv_pragmaList_5_0,
						"org.xtuml.bp.xtext.Masl.pragmaList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariableName
entryRulevariableName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableNameRule()); }
	iv_rulevariableName=rulevariableName
	{ $current=$iv_rulevariableName.current; }
	EOF;

// Rule variableName
rulevariableName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getVariableNameAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableNameRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulestatementList
entryRulestatementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_rulestatementList=rulestatementList
	{ $current=$iv_rulestatementList.current.getText(); }
	EOF;

// Rule statementList
rulestatementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		((
			RULE_ID
			    |
			RULE_INT
			    |
			RULE_STRING
			    |
			RULE_WS
			    |
			RULE_ANY_OTHER
		)
		)=>
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getStatementListAccess().getIDTerminalRuleCall_0_0());
			}
			    |
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getStatementListAccess().getINTTerminalRuleCall_0_1());
			}
			    |
			this_STRING_2=RULE_STRING
			{
				$current.merge(this_STRING_2);
			}
			{
				newLeafNode(this_STRING_2, grammarAccess.getStatementListAccess().getSTRINGTerminalRuleCall_0_2());
			}
			    |
			this_WS_3=RULE_WS
			{
				$current.merge(this_WS_3);
			}
			{
				newLeafNode(this_WS_3, grammarAccess.getStatementListAccess().getWSTerminalRuleCall_0_3());
			}
			    |
			this_ANY_OTHER_4=RULE_ANY_OTHER
			{
				$current.merge(this_ANY_OTHER_4);
			}
			{
				newLeafNode(this_ANY_OTHER_4, grammarAccess.getStatementListAccess().getANY_OTHERTerminalRuleCall_0_4());
			}
		)
	)*
;

// Entry rule entryRuleANONYMOUS
entryRuleANONYMOUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getANONYMOUSRule()); }
	iv_ruleANONYMOUS=ruleANONYMOUS
	{ $current=$iv_ruleANONYMOUS.current.getText(); }
	EOF;

// Rule ANONYMOUS
ruleANONYMOUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='anonymous'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getANONYMOUSAccess().getAnonymousKeyword());
	}
;

// Entry rule entryRuleBEGIN
entryRuleBEGIN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBEGINRule()); }
	iv_ruleBEGIN=ruleBEGIN
	{ $current=$iv_ruleBEGIN.current.getText(); }
	EOF;

// Rule BEGIN
ruleBEGIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='begin'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBEGINAccess().getBeginKeyword());
	}
;

// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOLONRule()); }
	iv_ruleCOLON=ruleCOLON
	{ $current=$iv_ruleCOLON.current.getText(); }
	EOF;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=':'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword());
	}
;

// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOMMARule()); }
	iv_ruleCOMMA=ruleCOMMA
	{ $current=$iv_ruleCOMMA.current.getText(); }
	EOF;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=','
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleDEFERRED
entryRuleDEFERRED returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDEFERREDRule()); }
	iv_ruleDEFERRED=ruleDEFERRED
	{ $current=$iv_ruleDEFERRED.current.getText(); }
	EOF;

// Rule DEFERRED
ruleDEFERRED returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='deferred'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDEFERREDAccess().getDeferredKeyword());
	}
;

// Entry rule entryRuleDOMAIN
entryRuleDOMAIN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOMAINRule()); }
	iv_ruleDOMAIN=ruleDOMAIN
	{ $current=$iv_ruleDOMAIN.current.getText(); }
	EOF;

// Rule DOMAIN
ruleDOMAIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='domain'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDOMAINAccess().getDomainKeyword());
	}
;

// Entry rule entryRuleDOT
entryRuleDOT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOTRule()); }
	iv_ruleDOT=ruleDOT
	{ $current=$iv_ruleDOT.current.getText(); }
	EOF;

// Rule DOT
ruleDOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDOTAccess().getFullStopKeyword());
	}
;

// Entry rule entryRuleEND
entryRuleEND returns [String current=null]:
	{ newCompositeNode(grammarAccess.getENDRule()); }
	iv_ruleEND=ruleEND
	{ $current=$iv_ruleEND.current.getText(); }
	EOF;

// Rule END
ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='end'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getENDAccess().getEndKeyword());
	}
;

// Entry rule entryRuleEVENT
entryRuleEVENT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEVENTRule()); }
	iv_ruleEVENT=ruleEVENT
	{ $current=$iv_ruleEVENT.current.getText(); }
	EOF;

// Rule EVENT
ruleEVENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='event'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEVENTAccess().getEventKeyword());
	}
;

// Entry rule entryRuleFUNCTION
entryRuleFUNCTION returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFUNCTIONRule()); }
	iv_ruleFUNCTION=ruleFUNCTION
	{ $current=$iv_ruleFUNCTION.current.getText(); }
	EOF;

// Rule FUNCTION
ruleFUNCTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='function'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFUNCTIONAccess().getFunctionKeyword());
	}
;

// Entry rule entryRuleIN
entryRuleIN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINRule()); }
	iv_ruleIN=ruleIN
	{ $current=$iv_ruleIN.current.getText(); }
	EOF;

// Rule IN
ruleIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='in'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINAccess().getInKeyword());
	}
;

// Entry rule entryRuleINSTANCE
entryRuleINSTANCE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINSTANCERule()); }
	iv_ruleINSTANCE=ruleINSTANCE
	{ $current=$iv_ruleINSTANCE.current.getText(); }
	EOF;

// Rule INSTANCE
ruleINSTANCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='instance'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINSTANCEAccess().getInstanceKeyword());
	}
;

// Entry rule entryRuleIS
entryRuleIS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getISRule()); }
	iv_ruleIS=ruleIS
	{ $current=$iv_ruleIS.current.getText(); }
	EOF;

// Rule IS
ruleIS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='is'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getISAccess().getIsKeyword());
	}
;

// Entry rule entryRuleLPAREN
entryRuleLPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLPARENRule()); }
	iv_ruleLPAREN=ruleLPAREN
	{ $current=$iv_ruleLPAREN.current.getText(); }
	EOF;

// Rule LPAREN
ruleLPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='('
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLPARENAccess().getLeftParenthesisKeyword());
	}
;

// Entry rule entryRuleOUT
entryRuleOUT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOUTRule()); }
	iv_ruleOUT=ruleOUT
	{ $current=$iv_ruleOUT.current.getText(); }
	EOF;

// Rule OUT
ruleOUT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='out'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOUTAccess().getOutKeyword());
	}
;

// Entry rule entryRulePRAGMATOK
entryRulePRAGMATOK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPRAGMATOKRule()); }
	iv_rulePRAGMATOK=rulePRAGMATOK
	{ $current=$iv_rulePRAGMATOK.current.getText(); }
	EOF;

// Rule PRAGMATOK
rulePRAGMATOK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='pragma'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPRAGMATOKAccess().getPragmaKeyword());
	}
;

// Entry rule entryRulePRIVATE
entryRulePRIVATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPRIVATERule()); }
	iv_rulePRIVATE=rulePRIVATE
	{ $current=$iv_rulePRIVATE.current.getText(); }
	EOF;

// Rule PRIVATE
rulePRIVATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='private'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPRIVATEAccess().getPrivateKeyword());
	}
;

// Entry rule entryRulePROJECT
entryRulePROJECT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPROJECTRule()); }
	iv_rulePROJECT=rulePROJECT
	{ $current=$iv_rulePROJECT.current.getText(); }
	EOF;

// Rule PROJECT
rulePROJECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='project'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPROJECTAccess().getProjectKeyword());
	}
;

// Entry rule entryRulePUBLIC
entryRulePUBLIC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPUBLICRule()); }
	iv_rulePUBLIC=rulePUBLIC
	{ $current=$iv_rulePUBLIC.current.getText(); }
	EOF;

// Rule PUBLIC
rulePUBLIC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='public'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPUBLICAccess().getPublicKeyword());
	}
;

// Entry rule entryRuleREADONLY
entryRuleREADONLY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getREADONLYRule()); }
	iv_ruleREADONLY=ruleREADONLY
	{ $current=$iv_ruleREADONLY.current.getText(); }
	EOF;

// Rule READONLY
ruleREADONLY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='readonly'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getREADONLYAccess().getReadonlyKeyword());
	}
;

// Entry rule entryRuleRETURN
entryRuleRETURN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRETURNRule()); }
	iv_ruleRETURN=ruleRETURN
	{ $current=$iv_ruleRETURN.current.getText(); }
	EOF;

// Rule RETURN
ruleRETURN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='return'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRETURNAccess().getReturnKeyword());
	}
;

// Entry rule entryRuleRPAREN
entryRuleRPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRPARENRule()); }
	iv_ruleRPAREN=ruleRPAREN
	{ $current=$iv_ruleRPAREN.current.getText(); }
	EOF;

// Rule RPAREN
ruleRPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=')'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRPARENAccess().getRightParenthesisKeyword());
	}
;

// Entry rule entryRuleSCOPE
entryRuleSCOPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSCOPERule()); }
	iv_ruleSCOPE=ruleSCOPE
	{ $current=$iv_ruleSCOPE.current.getText(); }
	EOF;

// Rule SCOPE
ruleSCOPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='::'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSCOPEAccess().getColonColonKeyword());
	}
;

// Entry rule entryRuleSEMI
entryRuleSEMI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSEMIRule()); }
	iv_ruleSEMI=ruleSEMI
	{ $current=$iv_ruleSEMI.current.getText(); }
	EOF;

// Rule SEMI
ruleSEMI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=';'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSEMIAccess().getSemicolonKeyword());
	}
;

// Entry rule entryRuleSERVICE
entryRuleSERVICE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSERVICERule()); }
	iv_ruleSERVICE=ruleSERVICE
	{ $current=$iv_ruleSERVICE.current.getText(); }
	EOF;

// Rule SERVICE
ruleSERVICE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='service'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSERVICEAccess().getServiceKeyword());
	}
;

// Entry rule entryRuleTERMINATOR
entryRuleTERMINATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTERMINATORRule()); }
	iv_ruleTERMINATOR=ruleTERMINATOR
	{ $current=$iv_ruleTERMINATOR.current.getText(); }
	EOF;

// Rule TERMINATOR
ruleTERMINATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='terminator'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTERMINATORAccess().getTerminatorKeyword());
	}
;

// Entry rule entryRuleTERMINATOR_SCOPE
entryRuleTERMINATOR_SCOPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTERMINATOR_SCOPERule()); }
	iv_ruleTERMINATOR_SCOPE=ruleTERMINATOR_SCOPE
	{ $current=$iv_ruleTERMINATOR_SCOPE.current.getText(); }
	EOF;

// Rule TERMINATOR_SCOPE
ruleTERMINATOR_SCOPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='~>'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTERMINATOR_SCOPEAccess().getTildeGreaterThanSignKeyword());
	}
;

RULE_RELATIONSHIP_NAME : 'R' '1'..'9' RULE_INT*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
