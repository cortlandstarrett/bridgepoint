/*
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MaslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.target");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		//target:
		//	definition+=definition+;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=definition+
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0() { return cDefinitionDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProjectDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectServiceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDomainServiceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDomainFunctionDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTerminatorServiceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTerminatorFunctionDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//definition:
		//	projectDefinition
		//	| objectServiceDefinition
		//	| objectFunctionDefinition
		//	| domainServiceDefinition
		//	| domainFunctionDefinition
		//	| terminatorServiceDefinition
		//	| terminatorFunctionDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//projectDefinition | objectServiceDefinition | objectFunctionDefinition | domainServiceDefinition |
		//domainFunctionDefinition | terminatorServiceDefinition | terminatorFunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//projectDefinition
		public RuleCall getProjectDefinitionParserRuleCall_0() { return cProjectDefinitionParserRuleCall_0; }
		
		//objectServiceDefinition
		public RuleCall getObjectServiceDefinitionParserRuleCall_1() { return cObjectServiceDefinitionParserRuleCall_1; }
		
		//objectFunctionDefinition
		public RuleCall getObjectFunctionDefinitionParserRuleCall_2() { return cObjectFunctionDefinitionParserRuleCall_2; }
		
		//domainServiceDefinition
		public RuleCall getDomainServiceDefinitionParserRuleCall_3() { return cDomainServiceDefinitionParserRuleCall_3; }
		
		//domainFunctionDefinition
		public RuleCall getDomainFunctionDefinitionParserRuleCall_4() { return cDomainFunctionDefinitionParserRuleCall_4; }
		
		//terminatorServiceDefinition
		public RuleCall getTerminatorServiceDefinitionParserRuleCall_5() { return cTerminatorServiceDefinitionParserRuleCall_5; }
		
		//terminatorFunctionDefinition
		public RuleCall getTerminatorFunctionDefinitionParserRuleCall_6() { return cTerminatorFunctionDefinitionParserRuleCall_6; }
	}
	public class ProjectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.projectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROJECTParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cProjectNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectNameProjectNameParserRuleCall_1_0 = (RuleCall)cProjectNameAssignment_1.eContents().get(0);
		private final RuleCall cISParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cProjectItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProjectItemProjectItemParserRuleCall_3_0 = (RuleCall)cProjectItemAssignment_3.eContents().get(0);
		private final RuleCall cENDParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cPROJECTParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSEMIParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPragmaListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPragmaListPragmaListParserRuleCall_7_0 = (RuleCall)cPragmaListAssignment_7.eContents().get(0);
		
		////---------------------------------------------------------
		//// Project Definition
		////---------------------------------------------------------
		//projectDefinition Project:
		//	PROJECT projectName=projectName IS
		//	projectItem+=projectItem*
		//	END PROJECT? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//PROJECT projectName=projectName IS projectItem+=projectItem* END PROJECT? SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//PROJECT
		public RuleCall getPROJECTParserRuleCall_0() { return cPROJECTParserRuleCall_0; }
		
		//projectName=projectName
		public Assignment getProjectNameAssignment_1() { return cProjectNameAssignment_1; }
		
		//projectName
		public RuleCall getProjectNameProjectNameParserRuleCall_1_0() { return cProjectNameProjectNameParserRuleCall_1_0; }
		
		//IS
		public RuleCall getISParserRuleCall_2() { return cISParserRuleCall_2; }
		
		//projectItem+=projectItem*
		public Assignment getProjectItemAssignment_3() { return cProjectItemAssignment_3; }
		
		//projectItem
		public RuleCall getProjectItemProjectItemParserRuleCall_3_0() { return cProjectItemProjectItemParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDParserRuleCall_4() { return cENDParserRuleCall_4; }
		
		//PROJECT?
		public RuleCall getPROJECTParserRuleCall_5() { return cPROJECTParserRuleCall_5; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_6() { return cSEMIParserRuleCall_6; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_7() { return cPragmaListAssignment_7; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_7_0() { return cPragmaListPragmaListParserRuleCall_7_0; }
	}
	public class ProjectItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.projectItem");
		private final RuleCall cDomainPrjDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//projectItem:
		//	domainPrjDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//domainPrjDefinition
		public RuleCall getDomainPrjDefinitionParserRuleCall() { return cDomainPrjDefinitionParserRuleCall; }
	}
	public class DomainPrjDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.domainPrjDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDOMAINParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDomainNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainNameDomainNameParserRuleCall_1_0 = (RuleCall)cDomainNameAssignment_1.eContents().get(0);
		private final RuleCall cISParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDomainPrjItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainPrjItemDomainPrjItemParserRuleCall_3_0 = (RuleCall)cDomainPrjItemAssignment_3.eContents().get(0);
		private final RuleCall cENDParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cDOMAINParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSEMIParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPragmaListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPragmaListPragmaListParserRuleCall_7_0 = (RuleCall)cPragmaListAssignment_7.eContents().get(0);
		
		//domainPrjDefinition Domain:
		//	DOMAIN domainName=domainName IS
		//	domainPrjItem+=domainPrjItem*
		//	END DOMAIN? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//DOMAIN domainName=domainName IS domainPrjItem+=domainPrjItem* END DOMAIN? SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//DOMAIN
		public RuleCall getDOMAINParserRuleCall_0() { return cDOMAINParserRuleCall_0; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_1() { return cDomainNameAssignment_1; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_1_0() { return cDomainNameDomainNameParserRuleCall_1_0; }
		
		//IS
		public RuleCall getISParserRuleCall_2() { return cISParserRuleCall_2; }
		
		//domainPrjItem+=domainPrjItem*
		public Assignment getDomainPrjItemAssignment_3() { return cDomainPrjItemAssignment_3; }
		
		//domainPrjItem
		public RuleCall getDomainPrjItemDomainPrjItemParserRuleCall_3_0() { return cDomainPrjItemDomainPrjItemParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDParserRuleCall_4() { return cENDParserRuleCall_4; }
		
		//DOMAIN?
		public RuleCall getDOMAINParserRuleCall_5() { return cDOMAINParserRuleCall_5; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_6() { return cSEMIParserRuleCall_6; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_7() { return cPragmaListAssignment_7; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_7_0() { return cPragmaListPragmaListParserRuleCall_7_0; }
	}
	public class DomainPrjItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.domainPrjItem");
		private final RuleCall cTerminatorDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//domainPrjItem:
		//	terminatorDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//terminatorDefinition
		public RuleCall getTerminatorDefinitionParserRuleCall() { return cTerminatorDefinitionParserRuleCall; }
	}
	public class ProjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.projectName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//projectName ProjectName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class DomainNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.domainName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//domainName DomainName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class TerminatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		////---------------------------------------------------------
		//// Terminator Definition
		////---------------------------------------------------------
		//terminatorName TerminatorName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class TerminatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTERMINATORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTerminatorNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTerminatorNameTerminatorNameParserRuleCall_1_0 = (RuleCall)cTerminatorNameAssignment_1.eContents().get(0);
		private final RuleCall cISParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTerminatorItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTerminatorItemTerminatorItemParserRuleCall_3_0 = (RuleCall)cTerminatorItemAssignment_3.eContents().get(0);
		private final RuleCall cENDParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cTERMINATORParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSEMIParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPragmaListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPragmaListPragmaListParserRuleCall_7_0 = (RuleCall)cPragmaListAssignment_7.eContents().get(0);
		
		//terminatorDefinition TerminatorDefinition:
		//	TERMINATOR terminatorName=terminatorName IS
		//	terminatorItem+=terminatorItem*
		//	END TERMINATOR? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//TERMINATOR terminatorName=terminatorName IS terminatorItem+=terminatorItem* END TERMINATOR? SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//TERMINATOR
		public RuleCall getTERMINATORParserRuleCall_0() { return cTERMINATORParserRuleCall_0; }
		
		//terminatorName=terminatorName
		public Assignment getTerminatorNameAssignment_1() { return cTerminatorNameAssignment_1; }
		
		//terminatorName
		public RuleCall getTerminatorNameTerminatorNameParserRuleCall_1_0() { return cTerminatorNameTerminatorNameParserRuleCall_1_0; }
		
		//IS
		public RuleCall getISParserRuleCall_2() { return cISParserRuleCall_2; }
		
		//terminatorItem+=terminatorItem*
		public Assignment getTerminatorItemAssignment_3() { return cTerminatorItemAssignment_3; }
		
		//terminatorItem
		public RuleCall getTerminatorItemTerminatorItemParserRuleCall_3_0() { return cTerminatorItemTerminatorItemParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDParserRuleCall_4() { return cENDParserRuleCall_4; }
		
		//TERMINATOR?
		public RuleCall getTERMINATORParserRuleCall_5() { return cTERMINATORParserRuleCall_5; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_6() { return cSEMIParserRuleCall_6; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_7() { return cPragmaListAssignment_7; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_7_0() { return cPragmaListPragmaListParserRuleCall_7_0; }
	}
	public class TerminatorItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminatorServiceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTerminatorFunctionDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//terminatorItem:
		//	terminatorServiceDeclaration
		//	| terminatorFunctionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//terminatorServiceDeclaration | terminatorFunctionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//terminatorServiceDeclaration
		public RuleCall getTerminatorServiceDeclarationParserRuleCall_0() { return cTerminatorServiceDeclarationParserRuleCall_0; }
		
		//terminatorFunctionDeclaration
		public RuleCall getTerminatorFunctionDeclarationParserRuleCall_1() { return cTerminatorFunctionDeclarationParserRuleCall_1; }
	}
	public class TerminatorServiceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorServiceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cServiceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceNameServiceNameParserRuleCall_2_0 = (RuleCall)cServiceNameAssignment_2.eContents().get(0);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final RuleCall cSEMIParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPragmaListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPragmaListPragmaListParserRuleCall_5_0 = (RuleCall)cPragmaListAssignment_5.eContents().get(0);
		
		//terminatorServiceDeclaration TerminatorServiceDeclaration:
		//	serviceVisibility=serviceVisibility SERVICE serviceName=serviceName
		//	parameterList=parameterList SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility SERVICE serviceName=serviceName parameterList=parameterList SEMI
		//pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//SERVICE
		public RuleCall getSERVICEParserRuleCall_1() { return cSERVICEParserRuleCall_1; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_2() { return cServiceNameAssignment_2; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_2_0() { return cServiceNameServiceNameParserRuleCall_2_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_3_0() { return cParameterListParameterListParserRuleCall_3_0; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_4() { return cSEMIParserRuleCall_4; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_5() { return cPragmaListAssignment_5; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_5_0() { return cPragmaListPragmaListParserRuleCall_5_0; }
	}
	public class TerminatorFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cServiceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceNameServiceNameParserRuleCall_2_0 = (RuleCall)cServiceNameAssignment_2.eContents().get(0);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final RuleCall cSEMIParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPragmaListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPragmaListPragmaListParserRuleCall_7_0 = (RuleCall)cPragmaListAssignment_7.eContents().get(0);
		
		//terminatorFunctionDeclaration TerminatorFunctionDeclaration:
		//	serviceVisibility=serviceVisibility FUNCTION serviceName=serviceName
		//	parameterList=parameterList RETURN returnType=returnType
		//	SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility FUNCTION serviceName=serviceName parameterList=parameterList RETURN
		//returnType=returnType SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONParserRuleCall_1() { return cFUNCTIONParserRuleCall_1; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_2() { return cServiceNameAssignment_2; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_2_0() { return cServiceNameServiceNameParserRuleCall_2_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_3_0() { return cParameterListParameterListParserRuleCall_3_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_4() { return cRETURNParserRuleCall_4; }
		
		//returnType=returnType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//returnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_5_0() { return cReturnTypeReturnTypeParserRuleCall_5_0; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_6() { return cSEMIParserRuleCall_6; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_7() { return cPragmaListAssignment_7; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_7_0() { return cPragmaListPragmaListParserRuleCall_7_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cParameterDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterDefinitionParameterDefinitionParserRuleCall_2_0 = (RuleCall)cParameterDefinitionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMAParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cParameterDefinitionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterDefinitionParameterDefinitionParserRuleCall_3_1_0 = (RuleCall)cParameterDefinitionAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//parameterList:
		//	LPAREN {parameterList} parameterDefinition+=parameterDefinition? (COMMA parameterDefinition+=parameterDefinition)*
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//LPAREN {parameterList} parameterDefinition+=parameterDefinition? (COMMA parameterDefinition+=parameterDefinition)*
		//RPAREN
		public Group getGroup() { return cGroup; }
		
		//LPAREN
		public RuleCall getLPARENParserRuleCall_0() { return cLPARENParserRuleCall_0; }
		
		//{parameterList}
		public Action getParameterListAction_1() { return cParameterListAction_1; }
		
		//// ensure a parameterList AST object is created even if there are no parameters
		//parameterDefinition+=parameterDefinition?
		public Assignment getParameterDefinitionAssignment_2() { return cParameterDefinitionAssignment_2; }
		
		//parameterDefinition
		public RuleCall getParameterDefinitionParameterDefinitionParserRuleCall_2_0() { return cParameterDefinitionParameterDefinitionParserRuleCall_2_0; }
		
		//(COMMA parameterDefinition+=parameterDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_3_0() { return cCOMMAParserRuleCall_3_0; }
		
		//parameterDefinition+=parameterDefinition
		public Assignment getParameterDefinitionAssignment_3_1() { return cParameterDefinitionAssignment_3_1; }
		
		//parameterDefinition
		public RuleCall getParameterDefinitionParameterDefinitionParserRuleCall_3_1_0() { return cParameterDefinitionParameterDefinitionParserRuleCall_3_1_0; }
		
		//RPAREN
		public RuleCall getRPARENParserRuleCall_4() { return cRPARENParserRuleCall_4; }
	}
	public class ParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.parameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterNameParameterNameParserRuleCall_0_0 = (RuleCall)cParameterNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParameterModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterModeParameterModeParserRuleCall_2_0 = (RuleCall)cParameterModeAssignment_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterTypeParameterTypeParserRuleCall_3_0 = (RuleCall)cParameterTypeAssignment_3.eContents().get(0);
		
		//parameterDefinition ParameterDefinition:
		//	parameterName=parameterName COLON parameterMode=parameterMode parameterType=parameterType
		@Override public ParserRule getRule() { return rule; }
		
		//parameterName=parameterName COLON parameterMode=parameterMode parameterType=parameterType
		public Group getGroup() { return cGroup; }
		
		//parameterName=parameterName
		public Assignment getParameterNameAssignment_0() { return cParameterNameAssignment_0; }
		
		//parameterName
		public RuleCall getParameterNameParameterNameParserRuleCall_0_0() { return cParameterNameParameterNameParserRuleCall_0_0; }
		
		//COLON
		public RuleCall getCOLONParserRuleCall_1() { return cCOLONParserRuleCall_1; }
		
		//parameterMode=parameterMode
		public Assignment getParameterModeAssignment_2() { return cParameterModeAssignment_2; }
		
		//parameterMode
		public RuleCall getParameterModeParameterModeParserRuleCall_2_0() { return cParameterModeParameterModeParserRuleCall_2_0; }
		
		//parameterType=parameterType
		public Assignment getParameterTypeAssignment_3() { return cParameterTypeAssignment_3; }
		
		//parameterType
		public RuleCall getParameterTypeParameterTypeParserRuleCall_3_0() { return cParameterTypeParameterTypeParserRuleCall_3_0; }
	}
	public class ServiceVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.serviceVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPRIVATEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPUBLICParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * fix for blank * / serviceVisibility:
		//	PRIVATE
		//	| PUBLIC;
		@Override public ParserRule getRule() { return rule; }
		
		//PRIVATE | PUBLIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE
		public RuleCall getPRIVATEParserRuleCall_0() { return cPRIVATEParserRuleCall_0; }
		
		//PUBLIC
		public RuleCall getPUBLICParserRuleCall_1() { return cPUBLICParserRuleCall_1; }
	}
	public class ParameterModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.parameterMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOUTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//parameterMode:
		//	IN
		//	| OUT;
		@Override public ParserRule getRule() { return rule; }
		
		//IN | OUT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN
		public RuleCall getINParserRuleCall_0() { return cINParserRuleCall_0; }
		
		//OUT
		public RuleCall getOUTParserRuleCall_1() { return cOUTParserRuleCall_1; }
	}
	public class ServiceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.serviceName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//serviceName ServiceName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.parameterName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//parameterName ParameterName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.parameterType");
		private final Assignment cTypeReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeReferenceTypeReferenceParserRuleCall_0 = (RuleCall)cTypeReferenceAssignment.eContents().get(0);
		
		//parameterType ParameterType:
		//	typeReference=typeReference
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference=typeReference
		public Assignment getTypeReferenceAssignment() { return cTypeReferenceAssignment; }
		
		//typeReference
		public RuleCall getTypeReferenceTypeReferenceParserRuleCall_0() { return cTypeReferenceTypeReferenceParserRuleCall_0; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.returnType");
		private final Assignment cTypeReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeReferenceTypeReferenceParserRuleCall_0 = (RuleCall)cTypeReferenceAssignment.eContents().get(0);
		
		//returnType ReturnType:
		//	typeReference=typeReference
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference=typeReference
		public Assignment getTypeReferenceAssignment() { return cTypeReferenceAssignment; }
		
		//typeReference
		public RuleCall getTypeReferenceTypeReferenceParserRuleCall_0() { return cTypeReferenceTypeReferenceParserRuleCall_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.typeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeprecatedTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////---------------------------------------------------------
		//// Type Reference
		////---------------------------------------------------------
		//typeReference:
		//	namedTypeRef
		//	| deprecatedType;
		@Override public ParserRule getRule() { return rule; }
		
		//namedTypeRef | deprecatedType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//namedTypeRef
		public RuleCall getNamedTypeRefParserRuleCall_0() { return cNamedTypeRefParserRuleCall_0; }
		
		//deprecatedType
		public RuleCall getDeprecatedTypeParserRuleCall_1() { return cDeprecatedTypeParserRuleCall_1; }
	}
	public class DeprecatedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.deprecatedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cINSTANCEAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cINSTANCEINSTANCEParserRuleCall_0_0 = (RuleCall)cINSTANCEAssignment_0.eContents().get(0);
		private final Assignment cEVENTAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEVENTEVENTParserRuleCall_1_0 = (RuleCall)cEVENTAssignment_1.eContents().get(0);
		private final Assignment cSERVICEAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSERVICESERVICEParserRuleCall_2_0 = (RuleCall)cSERVICEAssignment_2.eContents().get(0);
		
		//deprecatedType:
		//	INSTANCE=INSTANCE
		//	| EVENT=EVENT
		//	| SERVICE=SERVICE;
		@Override public ParserRule getRule() { return rule; }
		
		//INSTANCE=INSTANCE | EVENT=EVENT | SERVICE=SERVICE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSTANCE=INSTANCE
		public Assignment getINSTANCEAssignment_0() { return cINSTANCEAssignment_0; }
		
		//INSTANCE
		public RuleCall getINSTANCEINSTANCEParserRuleCall_0_0() { return cINSTANCEINSTANCEParserRuleCall_0_0; }
		
		//EVENT=EVENT
		public Assignment getEVENTAssignment_1() { return cEVENTAssignment_1; }
		
		//EVENT
		public RuleCall getEVENTEVENTParserRuleCall_1_0() { return cEVENTEVENTParserRuleCall_1_0; }
		
		//SERVICE=SERVICE
		public Assignment getSERVICEAssignment_2() { return cSERVICEAssignment_2; }
		
		//SERVICE
		public RuleCall getSERVICESERVICEParserRuleCall_2_0() { return cSERVICESERVICEParserRuleCall_2_0; }
	}
	public class NamedTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.namedTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnonymousANONYMOUSParserRuleCall_0_0 = (RuleCall)cAnonymousAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDomainNameDomainNameParserRuleCall_1_0_0 = (RuleCall)cDomainNameAssignment_1_0.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//namedTypeRef NamedType:
		//	anonymous=ANONYMOUS? (domainName=domainName SCOPE)? typeName=typeName
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous=ANONYMOUS? (domainName=domainName SCOPE)? typeName=typeName
		public Group getGroup() { return cGroup; }
		
		//anonymous=ANONYMOUS?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//ANONYMOUS
		public RuleCall getAnonymousANONYMOUSParserRuleCall_0_0() { return cAnonymousANONYMOUSParserRuleCall_0_0; }
		
		//(domainName=domainName SCOPE)?
		public Group getGroup_1() { return cGroup_1; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_1_0() { return cDomainNameAssignment_1_0; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_1_0_0() { return cDomainNameDomainNameParserRuleCall_1_0_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_1_1() { return cSCOPEParserRuleCall_1_1; }
		
		//typeName=typeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//typeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.typeName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//typeName TypeName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class PragmaListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.pragmaList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPragmaListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPragmaAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPragmaPragmaParserRuleCall_1_0_0 = (RuleCall)cPragmaAssignment_1_0.eContents().get(0);
		private final RuleCall cSEMIParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////---------------------------------------------------------
		//// Pragma Definition
		////---------------------------------------------------------
		//pragmaList PragmaList:
		//	{PragmaList} (pragma+=pragma SEMI)*
		@Override public ParserRule getRule() { return rule; }
		
		//{PragmaList} (pragma+=pragma SEMI)*
		public Group getGroup() { return cGroup; }
		
		//{PragmaList}
		public Action getPragmaListAction_0() { return cPragmaListAction_0; }
		
		//(pragma+=pragma SEMI)*
		public Group getGroup_1() { return cGroup_1; }
		
		//pragma+=pragma
		public Assignment getPragmaAssignment_1_0() { return cPragmaAssignment_1_0; }
		
		//pragma
		public RuleCall getPragmaPragmaParserRuleCall_1_0_0() { return cPragmaPragmaParserRuleCall_1_0_0; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_1_1() { return cSEMIParserRuleCall_1_1; }
	}
	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.pragma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRAGMATOKParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPragmaNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPragmaNamePragmaNameParserRuleCall_1_0 = (RuleCall)cPragmaNameAssignment_1.eContents().get(0);
		private final RuleCall cLPARENParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPragmaValueAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPragmaValuePragmaValueParserRuleCall_3_0_0 = (RuleCall)cPragmaValueAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cPragmaValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPragmaValuePragmaValueParserRuleCall_3_1_1_0 = (RuleCall)cPragmaValueAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRPARENParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//pragma Pragma:
		//	PRAGMATOK pragmaName=pragmaName
		//	LPAREN (pragmaValue+=pragmaValue (COMMA pragmaValue+=pragmaValue)*)?
		//	RPAREN
		@Override public ParserRule getRule() { return rule; }
		
		//PRAGMATOK pragmaName=pragmaName LPAREN (pragmaValue+=pragmaValue (COMMA pragmaValue+=pragmaValue)*)? RPAREN
		public Group getGroup() { return cGroup; }
		
		//PRAGMATOK
		public RuleCall getPRAGMATOKParserRuleCall_0() { return cPRAGMATOKParserRuleCall_0; }
		
		//pragmaName=pragmaName
		public Assignment getPragmaNameAssignment_1() { return cPragmaNameAssignment_1; }
		
		//pragmaName
		public RuleCall getPragmaNamePragmaNameParserRuleCall_1_0() { return cPragmaNamePragmaNameParserRuleCall_1_0; }
		
		//LPAREN
		public RuleCall getLPARENParserRuleCall_2() { return cLPARENParserRuleCall_2; }
		
		//(pragmaValue+=pragmaValue (COMMA pragmaValue+=pragmaValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//pragmaValue+=pragmaValue
		public Assignment getPragmaValueAssignment_3_0() { return cPragmaValueAssignment_3_0; }
		
		//pragmaValue
		public RuleCall getPragmaValuePragmaValueParserRuleCall_3_0_0() { return cPragmaValuePragmaValueParserRuleCall_3_0_0; }
		
		//(COMMA pragmaValue+=pragmaValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_3_1_0() { return cCOMMAParserRuleCall_3_1_0; }
		
		//pragmaValue+=pragmaValue
		public Assignment getPragmaValueAssignment_3_1_1() { return cPragmaValueAssignment_3_1_1; }
		
		//pragmaValue
		public RuleCall getPragmaValuePragmaValueParserRuleCall_3_1_1_0() { return cPragmaValuePragmaValueParserRuleCall_3_1_1_0; }
		
		//RPAREN
		public RuleCall getRPARENParserRuleCall_4() { return cRPARENParserRuleCall_4; }
	}
	public class PragmaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.pragmaValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//pragmaValue:
		//	literal
		//	| ID;
		@Override public ParserRule getRule() { return rule; }
		
		//literal | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PragmaNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.pragmaName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//pragmaName PragmaName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//literal:
		//	INT
		//	| STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.objectName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		////---------------------------------------------------------
		//// Object Definition
		////---------------------------------------------------------
		//objectName ObjectName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class ServiceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.serviceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cINSTANCEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cINSTANCEINSTANCEParserRuleCall_0_0 = (RuleCall)cINSTANCEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDEFERREDParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLPARENParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRelationshipNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelationshipNameRelationshipNameParserRuleCall_1_2_0 = (RuleCall)cRelationshipNameAssignment_1_2.eContents().get(0);
		private final RuleCall cRPARENParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//serviceType:
		//	(INSTANCE=INSTANCE (DEFERRED LPAREN relationshipName=relationshipName RPAREN)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(INSTANCE=INSTANCE (DEFERRED LPAREN relationshipName=relationshipName RPAREN)?)?
		public Group getGroup() { return cGroup; }
		
		//INSTANCE=INSTANCE
		public Assignment getINSTANCEAssignment_0() { return cINSTANCEAssignment_0; }
		
		//INSTANCE
		public RuleCall getINSTANCEINSTANCEParserRuleCall_0_0() { return cINSTANCEINSTANCEParserRuleCall_0_0; }
		
		//(DEFERRED LPAREN relationshipName=relationshipName RPAREN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DEFERRED
		public RuleCall getDEFERREDParserRuleCall_1_0() { return cDEFERREDParserRuleCall_1_0; }
		
		//LPAREN
		public RuleCall getLPARENParserRuleCall_1_1() { return cLPARENParserRuleCall_1_1; }
		
		//relationshipName=relationshipName
		public Assignment getRelationshipNameAssignment_1_2() { return cRelationshipNameAssignment_1_2; }
		
		//relationshipName
		public RuleCall getRelationshipNameRelationshipNameParserRuleCall_1_2_0() { return cRelationshipNameRelationshipNameParserRuleCall_1_2_0; }
		
		//RPAREN
		public RuleCall getRPARENParserRuleCall_1_3() { return cRPARENParserRuleCall_1_3; }
	}
	public class RelationshipNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.relationshipName");
		private final Assignment cRelationshipNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRelationshipNameRELATIONSHIP_NAMETerminalRuleCall_0 = (RuleCall)cRelationshipNameAssignment.eContents().get(0);
		
		////---------------------------------------------------------
		//// Relationship Definition
		////---------------------------------------------------------
		//relationshipName RelationshipName:
		//	relationshipName=RELATIONSHIP_NAME
		@Override public ParserRule getRule() { return rule; }
		
		//relationshipName=RELATIONSHIP_NAME
		public Assignment getRelationshipNameAssignment() { return cRelationshipNameAssignment; }
		
		//RELATIONSHIP_NAME
		public RuleCall getRelationshipNameRELATIONSHIP_NAMETerminalRuleCall_0() { return cRelationshipNameRELATIONSHIP_NAMETerminalRuleCall_0; }
	}
	public class DomainServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.domainServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainNameDomainNameParserRuleCall_2_0 = (RuleCall)cDomainNameAssignment_2.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cServiceNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServiceNameServiceNameParserRuleCall_4_0 = (RuleCall)cServiceNameAssignment_4.eContents().get(0);
		private final Assignment cParameterListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterListParameterListParserRuleCall_5_0 = (RuleCall)cParameterListAssignment_5.eContents().get(0);
		private final RuleCall cISParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cCodeBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_7_0 = (RuleCall)cCodeBlockAssignment_7.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMIParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cPargmaListAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPargmaListPragmaListParserRuleCall_10_0 = (RuleCall)cPargmaListAssignment_10.eContents().get(0);
		
		////---------------------------------------------------------
		//// Dynamic Behaviour
		////---------------------------------------------------------
		//domainServiceDefinition DomainServiceDefinition:
		//	serviceVisibility=serviceVisibility SERVICE
		//	domainName=domainName SCOPE serviceName=serviceName
		//	parameterList=parameterList IS
		//	codeBlock=codeBlock
		//	SERVICE? SEMI pargmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility SERVICE domainName=domainName SCOPE serviceName=serviceName
		//parameterList=parameterList IS codeBlock=codeBlock SERVICE? SEMI pargmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//SERVICE
		public RuleCall getSERVICEParserRuleCall_1() { return cSERVICEParserRuleCall_1; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_2() { return cDomainNameAssignment_2; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_2_0() { return cDomainNameDomainNameParserRuleCall_2_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_3() { return cSCOPEParserRuleCall_3; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_4() { return cServiceNameAssignment_4; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_4_0() { return cServiceNameServiceNameParserRuleCall_4_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_5() { return cParameterListAssignment_5; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_5_0() { return cParameterListParameterListParserRuleCall_5_0; }
		
		//IS
		public RuleCall getISParserRuleCall_6() { return cISParserRuleCall_6; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_7() { return cCodeBlockAssignment_7; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_7_0() { return cCodeBlockCodeBlockParserRuleCall_7_0; }
		
		//SERVICE?
		public RuleCall getSERVICEParserRuleCall_8() { return cSERVICEParserRuleCall_8; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_9() { return cSEMIParserRuleCall_9; }
		
		//pargmaList=pragmaList
		public Assignment getPargmaListAssignment_10() { return cPargmaListAssignment_10; }
		
		//pragmaList
		public RuleCall getPargmaListPragmaListParserRuleCall_10_0() { return cPargmaListPragmaListParserRuleCall_10_0; }
	}
	public class DomainFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.domainFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainNameDomainNameParserRuleCall_2_0 = (RuleCall)cDomainNameAssignment_2.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cServiceNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServiceNameServiceNameParserRuleCall_4_0 = (RuleCall)cServiceNameAssignment_4.eContents().get(0);
		private final Assignment cParameterListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterListParameterListParserRuleCall_5_0 = (RuleCall)cParameterListAssignment_5.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cReturnTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_7_0 = (RuleCall)cReturnTypeAssignment_7.eContents().get(0);
		private final RuleCall cISParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cCodeBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_9_0 = (RuleCall)cCodeBlockAssignment_9.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMIParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cPargmaListAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPargmaListPragmaListParserRuleCall_12_0 = (RuleCall)cPargmaListAssignment_12.eContents().get(0);
		
		//domainFunctionDefinition DomainServiceDefinition:
		//	serviceVisibility=serviceVisibility FUNCTION
		//	domainName=domainName SCOPE serviceName=serviceName
		//	parameterList=parameterList
		//	RETURN returnType=returnType IS codeBlock=codeBlock
		//	FUNCTION? SEMI pargmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility FUNCTION domainName=domainName SCOPE serviceName=serviceName
		//parameterList=parameterList RETURN returnType=returnType IS codeBlock=codeBlock FUNCTION? SEMI pargmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONParserRuleCall_1() { return cFUNCTIONParserRuleCall_1; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_2() { return cDomainNameAssignment_2; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_2_0() { return cDomainNameDomainNameParserRuleCall_2_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_3() { return cSCOPEParserRuleCall_3; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_4() { return cServiceNameAssignment_4; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_4_0() { return cServiceNameServiceNameParserRuleCall_4_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_5() { return cParameterListAssignment_5; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_5_0() { return cParameterListParameterListParserRuleCall_5_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_6() { return cRETURNParserRuleCall_6; }
		
		//returnType=returnType
		public Assignment getReturnTypeAssignment_7() { return cReturnTypeAssignment_7; }
		
		//returnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_7_0() { return cReturnTypeReturnTypeParserRuleCall_7_0; }
		
		//IS
		public RuleCall getISParserRuleCall_8() { return cISParserRuleCall_8; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_9() { return cCodeBlockAssignment_9; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_9_0() { return cCodeBlockCodeBlockParserRuleCall_9_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONParserRuleCall_10() { return cFUNCTIONParserRuleCall_10; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_11() { return cSEMIParserRuleCall_11; }
		
		//pargmaList=pragmaList
		public Assignment getPargmaListAssignment_12() { return cPargmaListAssignment_12; }
		
		//pragmaList
		public RuleCall getPargmaListPragmaListParserRuleCall_12_0() { return cPargmaListPragmaListParserRuleCall_12_0; }
	}
	public class ObjectServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.objectServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final Assignment cINSTANCEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cINSTANCEINSTANCEParserRuleCall_1_0 = (RuleCall)cINSTANCEAssignment_1.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDomainNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainNameDomainNameParserRuleCall_3_0 = (RuleCall)cDomainNameAssignment_3.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cObjectNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectNameObjectNameParserRuleCall_5_0 = (RuleCall)cObjectNameAssignment_5.eContents().get(0);
		private final RuleCall cDOTParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cServiceNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServiceNameServiceNameParserRuleCall_7_0 = (RuleCall)cServiceNameAssignment_7.eContents().get(0);
		private final Assignment cParameterListAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParameterListParameterListParserRuleCall_8_0 = (RuleCall)cParameterListAssignment_8.eContents().get(0);
		private final RuleCall cISParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCodeBlockAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_10_0 = (RuleCall)cCodeBlockAssignment_10.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cSEMIParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Assignment cPragmaListAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cPragmaListPragmaListParserRuleCall_13_0 = (RuleCall)cPragmaListAssignment_13.eContents().get(0);
		
		//objectServiceDefinition ObjectServiceDefinition:
		//	serviceVisibility=serviceVisibility INSTANCE=INSTANCE? SERVICE
		//	domainName=domainName SCOPE objectName=objectName DOT serviceName=serviceName
		//	parameterList=parameterList IS codeBlock=codeBlock
		//	SERVICE? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility INSTANCE=INSTANCE? SERVICE domainName=domainName SCOPE objectName=objectName DOT
		//serviceName=serviceName parameterList=parameterList IS codeBlock=codeBlock SERVICE? SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//INSTANCE=INSTANCE?
		public Assignment getINSTANCEAssignment_1() { return cINSTANCEAssignment_1; }
		
		//INSTANCE
		public RuleCall getINSTANCEINSTANCEParserRuleCall_1_0() { return cINSTANCEINSTANCEParserRuleCall_1_0; }
		
		//SERVICE
		public RuleCall getSERVICEParserRuleCall_2() { return cSERVICEParserRuleCall_2; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_3() { return cDomainNameAssignment_3; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_3_0() { return cDomainNameDomainNameParserRuleCall_3_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_4() { return cSCOPEParserRuleCall_4; }
		
		//objectName=objectName
		public Assignment getObjectNameAssignment_5() { return cObjectNameAssignment_5; }
		
		//objectName
		public RuleCall getObjectNameObjectNameParserRuleCall_5_0() { return cObjectNameObjectNameParserRuleCall_5_0; }
		
		//DOT
		public RuleCall getDOTParserRuleCall_6() { return cDOTParserRuleCall_6; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_7() { return cServiceNameAssignment_7; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_7_0() { return cServiceNameServiceNameParserRuleCall_7_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_8() { return cParameterListAssignment_8; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_8_0() { return cParameterListParameterListParserRuleCall_8_0; }
		
		//IS
		public RuleCall getISParserRuleCall_9() { return cISParserRuleCall_9; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_10() { return cCodeBlockAssignment_10; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_10_0() { return cCodeBlockCodeBlockParserRuleCall_10_0; }
		
		//SERVICE?
		public RuleCall getSERVICEParserRuleCall_11() { return cSERVICEParserRuleCall_11; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_12() { return cSEMIParserRuleCall_12; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_13() { return cPragmaListAssignment_13; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_13_0() { return cPragmaListPragmaListParserRuleCall_13_0; }
	}
	public class ObjectFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.objectFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final Assignment cServiceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServiceTypeServiceTypeParserRuleCall_1_0 = (RuleCall)cServiceTypeAssignment_1.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDomainNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainNameDomainNameParserRuleCall_3_0 = (RuleCall)cDomainNameAssignment_3.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cObjectNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectNameObjectNameParserRuleCall_5_0 = (RuleCall)cObjectNameAssignment_5.eContents().get(0);
		private final RuleCall cDOTParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cServiceNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServiceNameServiceNameParserRuleCall_7_0 = (RuleCall)cServiceNameAssignment_7.eContents().get(0);
		private final Assignment cParameterListAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParameterListParameterListParserRuleCall_8_0 = (RuleCall)cParameterListAssignment_8.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cReturnTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_10_0 = (RuleCall)cReturnTypeAssignment_10.eContents().get(0);
		private final RuleCall cISParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cCodeBlockAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_12_0 = (RuleCall)cCodeBlockAssignment_12.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final RuleCall cSEMIParserRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final Assignment cPragmaListAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cPragmaListPragmaListParserRuleCall_15_0 = (RuleCall)cPragmaListAssignment_15.eContents().get(0);
		
		//objectFunctionDefinition ObjectServiceDefinition:
		//	serviceVisibility=serviceVisibility serviceType=serviceType FUNCTION
		//	domainName=domainName SCOPE objectName=objectName DOT serviceName=serviceName
		//	parameterList=parameterList
		//	RETURN returnType=returnType IS codeBlock=codeBlock
		//	FUNCTION? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility serviceType=serviceType FUNCTION domainName=domainName SCOPE objectName=objectName
		//DOT serviceName=serviceName parameterList=parameterList RETURN returnType=returnType IS codeBlock=codeBlock FUNCTION?
		//SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//serviceType=serviceType
		public Assignment getServiceTypeAssignment_1() { return cServiceTypeAssignment_1; }
		
		//serviceType
		public RuleCall getServiceTypeServiceTypeParserRuleCall_1_0() { return cServiceTypeServiceTypeParserRuleCall_1_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONParserRuleCall_2() { return cFUNCTIONParserRuleCall_2; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_3() { return cDomainNameAssignment_3; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_3_0() { return cDomainNameDomainNameParserRuleCall_3_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_4() { return cSCOPEParserRuleCall_4; }
		
		//objectName=objectName
		public Assignment getObjectNameAssignment_5() { return cObjectNameAssignment_5; }
		
		//objectName
		public RuleCall getObjectNameObjectNameParserRuleCall_5_0() { return cObjectNameObjectNameParserRuleCall_5_0; }
		
		//DOT
		public RuleCall getDOTParserRuleCall_6() { return cDOTParserRuleCall_6; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_7() { return cServiceNameAssignment_7; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_7_0() { return cServiceNameServiceNameParserRuleCall_7_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_8() { return cParameterListAssignment_8; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_8_0() { return cParameterListParameterListParserRuleCall_8_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_9() { return cRETURNParserRuleCall_9; }
		
		//returnType=returnType
		public Assignment getReturnTypeAssignment_10() { return cReturnTypeAssignment_10; }
		
		//returnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_10_0() { return cReturnTypeReturnTypeParserRuleCall_10_0; }
		
		//IS
		public RuleCall getISParserRuleCall_11() { return cISParserRuleCall_11; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_12() { return cCodeBlockAssignment_12; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_12_0() { return cCodeBlockCodeBlockParserRuleCall_12_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONParserRuleCall_13() { return cFUNCTIONParserRuleCall_13; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_14() { return cSEMIParserRuleCall_14; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_15() { return cPragmaListAssignment_15; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_15_0() { return cPragmaListPragmaListParserRuleCall_15_0; }
	}
	public class TerminatorServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainNameDomainNameParserRuleCall_2_0 = (RuleCall)cDomainNameAssignment_2.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTerminatorNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTerminatorNameTerminatorNameParserRuleCall_4_0 = (RuleCall)cTerminatorNameAssignment_4.eContents().get(0);
		private final RuleCall cTERMINATOR_SCOPEParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cServiceNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cServiceNameServiceNameParserRuleCall_6_0 = (RuleCall)cServiceNameAssignment_6.eContents().get(0);
		private final Assignment cParameterListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParameterListParameterListParserRuleCall_7_0 = (RuleCall)cParameterListAssignment_7.eContents().get(0);
		private final RuleCall cISParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cCodeBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_9_0 = (RuleCall)cCodeBlockAssignment_9.eContents().get(0);
		private final RuleCall cSERVICEParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMIParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cPragmaListAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPragmaListPragmaListParserRuleCall_12_0 = (RuleCall)cPragmaListAssignment_12.eContents().get(0);
		
		//terminatorServiceDefinition TerminatorServiceDefinition:
		//	serviceVisibility=serviceVisibility SERVICE
		//	domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE serviceName=serviceName
		//	parameterList=parameterList IS
		//	codeBlock=codeBlock
		//	SERVICE? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility SERVICE domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE
		//serviceName=serviceName parameterList=parameterList IS codeBlock=codeBlock SERVICE? SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//SERVICE
		public RuleCall getSERVICEParserRuleCall_1() { return cSERVICEParserRuleCall_1; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_2() { return cDomainNameAssignment_2; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_2_0() { return cDomainNameDomainNameParserRuleCall_2_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_3() { return cSCOPEParserRuleCall_3; }
		
		//terminatorName=terminatorName
		public Assignment getTerminatorNameAssignment_4() { return cTerminatorNameAssignment_4; }
		
		//terminatorName
		public RuleCall getTerminatorNameTerminatorNameParserRuleCall_4_0() { return cTerminatorNameTerminatorNameParserRuleCall_4_0; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPEParserRuleCall_5() { return cTERMINATOR_SCOPEParserRuleCall_5; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_6() { return cServiceNameAssignment_6; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_6_0() { return cServiceNameServiceNameParserRuleCall_6_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_7() { return cParameterListAssignment_7; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_7_0() { return cParameterListParameterListParserRuleCall_7_0; }
		
		//IS
		public RuleCall getISParserRuleCall_8() { return cISParserRuleCall_8; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_9() { return cCodeBlockAssignment_9; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_9_0() { return cCodeBlockCodeBlockParserRuleCall_9_0; }
		
		//SERVICE?
		public RuleCall getSERVICEParserRuleCall_10() { return cSERVICEParserRuleCall_10; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_11() { return cSEMIParserRuleCall_11; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_12() { return cPragmaListAssignment_12; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_12_0() { return cPragmaListPragmaListParserRuleCall_12_0; }
	}
	public class TerminatorFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.terminatorFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceVisibilityServiceVisibilityParserRuleCall_0_0 = (RuleCall)cServiceVisibilityAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainNameDomainNameParserRuleCall_2_0 = (RuleCall)cDomainNameAssignment_2.eContents().get(0);
		private final RuleCall cSCOPEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTerminatorNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTerminatorNameTerminatorNameParserRuleCall_4_0 = (RuleCall)cTerminatorNameAssignment_4.eContents().get(0);
		private final RuleCall cTERMINATOR_SCOPEParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cServiceNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cServiceNameServiceNameParserRuleCall_6_0 = (RuleCall)cServiceNameAssignment_6.eContents().get(0);
		private final Assignment cParameterListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParameterListParameterListParserRuleCall_7_0 = (RuleCall)cParameterListAssignment_7.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cReturnTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_9_0 = (RuleCall)cReturnTypeAssignment_9.eContents().get(0);
		private final RuleCall cISParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cCodeBlockAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_11_0 = (RuleCall)cCodeBlockAssignment_11.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cSEMIParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Assignment cPragmaListAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cPragmaListPragmaListParserRuleCall_14_0 = (RuleCall)cPragmaListAssignment_14.eContents().get(0);
		
		//terminatorFunctionDefinition TerminatorServiceDefinition:
		//	serviceVisibility=serviceVisibility FUNCTION
		//	domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE serviceName=serviceName
		//	parameterList=parameterList RETURN returnType=returnType IS
		//	codeBlock=codeBlock
		//	FUNCTION? SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//serviceVisibility=serviceVisibility FUNCTION domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE
		//serviceName=serviceName parameterList=parameterList RETURN returnType=returnType IS codeBlock=codeBlock FUNCTION? SEMI
		//pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//serviceVisibility=serviceVisibility
		public Assignment getServiceVisibilityAssignment_0() { return cServiceVisibilityAssignment_0; }
		
		//serviceVisibility
		public RuleCall getServiceVisibilityServiceVisibilityParserRuleCall_0_0() { return cServiceVisibilityServiceVisibilityParserRuleCall_0_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONParserRuleCall_1() { return cFUNCTIONParserRuleCall_1; }
		
		//domainName=domainName
		public Assignment getDomainNameAssignment_2() { return cDomainNameAssignment_2; }
		
		//domainName
		public RuleCall getDomainNameDomainNameParserRuleCall_2_0() { return cDomainNameDomainNameParserRuleCall_2_0; }
		
		//SCOPE
		public RuleCall getSCOPEParserRuleCall_3() { return cSCOPEParserRuleCall_3; }
		
		//terminatorName=terminatorName
		public Assignment getTerminatorNameAssignment_4() { return cTerminatorNameAssignment_4; }
		
		//terminatorName
		public RuleCall getTerminatorNameTerminatorNameParserRuleCall_4_0() { return cTerminatorNameTerminatorNameParserRuleCall_4_0; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPEParserRuleCall_5() { return cTERMINATOR_SCOPEParserRuleCall_5; }
		
		//serviceName=serviceName
		public Assignment getServiceNameAssignment_6() { return cServiceNameAssignment_6; }
		
		//serviceName
		public RuleCall getServiceNameServiceNameParserRuleCall_6_0() { return cServiceNameServiceNameParserRuleCall_6_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_7() { return cParameterListAssignment_7; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_7_0() { return cParameterListParameterListParserRuleCall_7_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_8() { return cRETURNParserRuleCall_8; }
		
		//returnType=returnType
		public Assignment getReturnTypeAssignment_9() { return cReturnTypeAssignment_9; }
		
		//returnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_9_0() { return cReturnTypeReturnTypeParserRuleCall_9_0; }
		
		//IS
		public RuleCall getISParserRuleCall_10() { return cISParserRuleCall_10; }
		
		//codeBlock=codeBlock
		public Assignment getCodeBlockAssignment_11() { return cCodeBlockAssignment_11; }
		
		//codeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_11_0() { return cCodeBlockCodeBlockParserRuleCall_11_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONParserRuleCall_12() { return cFUNCTIONParserRuleCall_12; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_13() { return cSEMIParserRuleCall_13; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_14() { return cPragmaListAssignment_14; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_14_0() { return cPragmaListPragmaListParserRuleCall_14_0; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.codeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cBEGINParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cENDParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////---------------------------------------------------------
		//// Code Blocks
		////---------------------------------------------------------
		//codeBlock CodeBlock:
		//	variableDeclaration+=variableDeclaration*
		//	BEGIN
		//	statementList
		//	END
		@Override public ParserRule getRule() { return rule; }
		
		//variableDeclaration+=variableDeclaration* BEGIN statementList END
		public Group getGroup() { return cGroup; }
		
		//variableDeclaration+=variableDeclaration*
		public Assignment getVariableDeclarationAssignment_0() { return cVariableDeclarationAssignment_0; }
		
		//variableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_0_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_0_0; }
		
		//BEGIN
		public RuleCall getBEGINParserRuleCall_1() { return cBEGINParserRuleCall_1; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
		
		//END
		public RuleCall getENDParserRuleCall_3() { return cENDParserRuleCall_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.variableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameVariableNameParserRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cREADONLYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cREADONLYREADONLYParserRuleCall_2_0 = (RuleCall)cREADONLYAssignment_2.eContents().get(0);
		private final Assignment cTypeReferenceWithCAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeReferenceWithCATypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeReferenceWithCAAssignment_3.eContents().get(0);
		private final RuleCall cSEMIParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPragmaListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPragmaListPragmaListParserRuleCall_5_0 = (RuleCall)cPragmaListAssignment_5.eContents().get(0);
		
		//variableDeclaration VariableDeclaration:
		//	variableName=variableName COLON
		//	READONLY=READONLY? typeReferenceWithCA=typeReference
		//	SEMI pragmaList=pragmaList
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=variableName COLON READONLY=READONLY? typeReferenceWithCA=typeReference SEMI pragmaList=pragmaList
		public Group getGroup() { return cGroup; }
		
		//variableName=variableName
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }
		
		//variableName
		public RuleCall getVariableNameVariableNameParserRuleCall_0_0() { return cVariableNameVariableNameParserRuleCall_0_0; }
		
		//COLON
		public RuleCall getCOLONParserRuleCall_1() { return cCOLONParserRuleCall_1; }
		
		//READONLY=READONLY?
		public Assignment getREADONLYAssignment_2() { return cREADONLYAssignment_2; }
		
		//READONLY
		public RuleCall getREADONLYREADONLYParserRuleCall_2_0() { return cREADONLYREADONLYParserRuleCall_2_0; }
		
		//typeReferenceWithCA=typeReference
		public Assignment getTypeReferenceWithCAAssignment_3() { return cTypeReferenceWithCAAssignment_3; }
		
		//typeReference
		public RuleCall getTypeReferenceWithCATypeReferenceParserRuleCall_3_0() { return cTypeReferenceWithCATypeReferenceParserRuleCall_3_0; }
		
		//SEMI
		public RuleCall getSEMIParserRuleCall_4() { return cSEMIParserRuleCall_4; }
		
		//pragmaList=pragmaList
		public Assignment getPragmaListAssignment_5() { return cPragmaListAssignment_5; }
		
		//pragmaList
		public RuleCall getPragmaListPragmaListParserRuleCall_5_0() { return cPragmaListPragmaListParserRuleCall_5_0; }
	}
	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.variableName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//variableName VariableName:
		//	identifier=ID
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.statementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		
		//statementList:
		//	=> (ID | INT | STRING | WS | ANY_OTHER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ID | INT | STRING | WS | ANY_OTHER)*
		public Group getGroup() { return cGroup; }
		
		//(ID | INT | STRING | WS | ANY_OTHER)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0_3() { return cWSTerminalRuleCall_0_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0_4() { return cANY_OTHERTerminalRuleCall_0_4; }
	}
	public class ANONYMOUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.ANONYMOUS");
		private final Keyword cAnonymousKeyword = (Keyword)rule.eContents().get(1);
		
		//// Keywords
		//ANONYMOUS:
		//	'anonymous';
		@Override public ParserRule getRule() { return rule; }
		
		//'anonymous'
		public Keyword getAnonymousKeyword() { return cAnonymousKeyword; }
	}
	public class ASSIGNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.ASSIGN");
		private final Keyword cColonEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//ASSIGN:
		//	':=';
		@Override public ParserRule getRule() { return rule; }
		
		//':='
		public Keyword getColonEqualsSignKeyword() { return cColonEqualsSignKeyword; }
	}
	public class BEGINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.BEGIN");
		private final Keyword cBeginKeyword = (Keyword)rule.eContents().get(1);
		
		//BEGIN:
		//	'begin';
		@Override public ParserRule getRule() { return rule; }
		
		//'begin'
		public Keyword getBeginKeyword() { return cBeginKeyword; }
	}
	public class COLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.COLON");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//COLON:
		//	':';
		@Override public ParserRule getRule() { return rule; }
		
		//':'
		public Keyword getColonKeyword() { return cColonKeyword; }
	}
	public class COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.COMMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMMA:
		//	',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class DEFERREDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.DEFERRED");
		private final Keyword cDeferredKeyword = (Keyword)rule.eContents().get(1);
		
		//DEFERRED:
		//	'deferred';
		@Override public ParserRule getRule() { return rule; }
		
		//'deferred'
		public Keyword getDeferredKeyword() { return cDeferredKeyword; }
	}
	public class DOMAINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.DOMAIN");
		private final Keyword cDomainKeyword = (Keyword)rule.eContents().get(1);
		
		//DOMAIN:
		//	'domain';
		@Override public ParserRule getRule() { return rule; }
		
		//'domain'
		public Keyword getDomainKeyword() { return cDomainKeyword; }
	}
	public class DOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.DOT");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//DOT:
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class ENDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.END");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//END:
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'end'
		public Keyword getEndKeyword() { return cEndKeyword; }
	}
	public class EVENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.EVENT");
		private final Keyword cEventKeyword = (Keyword)rule.eContents().get(1);
		
		//EVENT:
		//	'event';
		@Override public ParserRule getRule() { return rule; }
		
		//'event'
		public Keyword getEventKeyword() { return cEventKeyword; }
	}
	public class FUNCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.FUNCTION");
		private final Keyword cFunctionKeyword = (Keyword)rule.eContents().get(1);
		
		//FUNCTION:
		//	'function';
		@Override public ParserRule getRule() { return rule; }
		
		//'function'
		public Keyword getFunctionKeyword() { return cFunctionKeyword; }
	}
	public class INElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.IN");
		private final Keyword cInKeyword = (Keyword)rule.eContents().get(1);
		
		//IN:
		//	'in';
		@Override public ParserRule getRule() { return rule; }
		
		//'in'
		public Keyword getInKeyword() { return cInKeyword; }
	}
	public class INSTANCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.INSTANCE");
		private final Keyword cInstanceKeyword = (Keyword)rule.eContents().get(1);
		
		//INSTANCE:
		//	'instance';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance'
		public Keyword getInstanceKeyword() { return cInstanceKeyword; }
	}
	public class ISElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.IS");
		private final Keyword cIsKeyword = (Keyword)rule.eContents().get(1);
		
		//IS:
		//	'is';
		@Override public ParserRule getRule() { return rule; }
		
		//'is'
		public Keyword getIsKeyword() { return cIsKeyword; }
	}
	public class LPARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.LPAREN");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//LPAREN:
		//	'(';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}
	public class OFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.OF");
		private final Keyword cOfKeyword = (Keyword)rule.eContents().get(1);
		
		//OF:
		//	'of';
		@Override public ParserRule getRule() { return rule; }
		
		//'of'
		public Keyword getOfKeyword() { return cOfKeyword; }
	}
	public class OUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.OUT");
		private final Keyword cOutKeyword = (Keyword)rule.eContents().get(1);
		
		//OUT:
		//	'out';
		@Override public ParserRule getRule() { return rule; }
		
		//'out'
		public Keyword getOutKeyword() { return cOutKeyword; }
	}
	public class PRAGMATOKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.PRAGMATOK");
		private final Keyword cPragmaKeyword = (Keyword)rule.eContents().get(1);
		
		//PRAGMATOK:
		//	'pragma';
		@Override public ParserRule getRule() { return rule; }
		
		//'pragma'
		public Keyword getPragmaKeyword() { return cPragmaKeyword; }
	}
	public class PRIVATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.PRIVATE");
		private final Keyword cPrivateKeyword = (Keyword)rule.eContents().get(1);
		
		//PRIVATE:
		//	'private';
		@Override public ParserRule getRule() { return rule; }
		
		//'private'
		public Keyword getPrivateKeyword() { return cPrivateKeyword; }
	}
	public class PROJECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.PROJECT");
		private final Keyword cProjectKeyword = (Keyword)rule.eContents().get(1);
		
		//PROJECT:
		//	'project';
		@Override public ParserRule getRule() { return rule; }
		
		//'project'
		public Keyword getProjectKeyword() { return cProjectKeyword; }
	}
	public class PUBLICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.PUBLIC");
		private final Keyword cPublicKeyword = (Keyword)rule.eContents().get(1);
		
		//PUBLIC:
		//	'public';
		@Override public ParserRule getRule() { return rule; }
		
		//'public'
		public Keyword getPublicKeyword() { return cPublicKeyword; }
	}
	public class READONLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.READONLY");
		private final Keyword cReadonlyKeyword = (Keyword)rule.eContents().get(1);
		
		//READONLY:
		//	'readonly';
		@Override public ParserRule getRule() { return rule; }
		
		//'readonly'
		public Keyword getReadonlyKeyword() { return cReadonlyKeyword; }
	}
	public class RETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.RETURN");
		private final Keyword cReturnKeyword = (Keyword)rule.eContents().get(1);
		
		//RETURN:
		//	'return';
		@Override public ParserRule getRule() { return rule; }
		
		//'return'
		public Keyword getReturnKeyword() { return cReturnKeyword; }
	}
	public class RPARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.RPAREN");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//RPAREN:
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//')'
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class SCOPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.SCOPE");
		private final Keyword cColonColonKeyword = (Keyword)rule.eContents().get(1);
		
		//SCOPE:
		//	'::';
		@Override public ParserRule getRule() { return rule; }
		
		//'::'
		public Keyword getColonColonKeyword() { return cColonColonKeyword; }
	}
	public class SEMIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.SEMI");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//SEMI:
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	public class SERVICEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.SERVICE");
		private final Keyword cServiceKeyword = (Keyword)rule.eContents().get(1);
		
		//SERVICE:
		//	'service';
		@Override public ParserRule getRule() { return rule; }
		
		//'service'
		public Keyword getServiceKeyword() { return cServiceKeyword; }
	}
	public class TERMINATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.TERMINATOR");
		private final Keyword cTerminatorKeyword = (Keyword)rule.eContents().get(1);
		
		//TERMINATOR:
		//	'terminator';
		@Override public ParserRule getRule() { return rule; }
		
		//'terminator'
		public Keyword getTerminatorKeyword() { return cTerminatorKeyword; }
	}
	public class TERMINATOR_SCOPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.TERMINATOR_SCOPE");
		private final Keyword cTildeGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//TERMINATOR_SCOPE:
		//	'~>';
		@Override public ParserRule getRule() { return rule; }
		
		//'~>'
		public Keyword getTildeGreaterThanSignKeyword() { return cTildeGreaterThanSignKeyword; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSubtypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TYPE:
		//	'type' | 'subtype';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' | 'subtype'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_1() { return cSubtypeKeyword_1; }
	}
	
	
	private final TargetElements pTarget;
	private final DefinitionElements pDefinition;
	private final ProjectDefinitionElements pProjectDefinition;
	private final ProjectItemElements pProjectItem;
	private final DomainPrjDefinitionElements pDomainPrjDefinition;
	private final DomainPrjItemElements pDomainPrjItem;
	private final ProjectNameElements pProjectName;
	private final DomainNameElements pDomainName;
	private final TerminatorNameElements pTerminatorName;
	private final TerminatorDefinitionElements pTerminatorDefinition;
	private final TerminatorItemElements pTerminatorItem;
	private final TerminatorServiceDeclarationElements pTerminatorServiceDeclaration;
	private final TerminatorFunctionDeclarationElements pTerminatorFunctionDeclaration;
	private final ParameterListElements pParameterList;
	private final ParameterDefinitionElements pParameterDefinition;
	private final ServiceVisibilityElements pServiceVisibility;
	private final ParameterModeElements pParameterMode;
	private final ServiceNameElements pServiceName;
	private final ParameterNameElements pParameterName;
	private final ParameterTypeElements pParameterType;
	private final ReturnTypeElements pReturnType;
	private final TypeReferenceElements pTypeReference;
	private final DeprecatedTypeElements pDeprecatedType;
	private final NamedTypeRefElements pNamedTypeRef;
	private final TypeNameElements pTypeName;
	private final PragmaListElements pPragmaList;
	private final PragmaElements pPragma;
	private final PragmaValueElements pPragmaValue;
	private final PragmaNameElements pPragmaName;
	private final LiteralElements pLiteral;
	private final ObjectNameElements pObjectName;
	private final ServiceTypeElements pServiceType;
	private final RelationshipNameElements pRelationshipName;
	private final DomainServiceDefinitionElements pDomainServiceDefinition;
	private final DomainFunctionDefinitionElements pDomainFunctionDefinition;
	private final ObjectServiceDefinitionElements pObjectServiceDefinition;
	private final ObjectFunctionDefinitionElements pObjectFunctionDefinition;
	private final TerminatorServiceDefinitionElements pTerminatorServiceDefinition;
	private final TerminatorFunctionDefinitionElements pTerminatorFunctionDefinition;
	private final CodeBlockElements pCodeBlock;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableNameElements pVariableName;
	private final StatementListElements pStatementList;
	private final TerminalRule tRELATIONSHIP_NAME;
	private final ANONYMOUSElements pANONYMOUS;
	private final ASSIGNElements pASSIGN;
	private final BEGINElements pBEGIN;
	private final COLONElements pCOLON;
	private final COMMAElements pCOMMA;
	private final DEFERREDElements pDEFERRED;
	private final DOMAINElements pDOMAIN;
	private final DOTElements pDOT;
	private final ENDElements pEND;
	private final EVENTElements pEVENT;
	private final FUNCTIONElements pFUNCTION;
	private final INElements pIN;
	private final INSTANCEElements pINSTANCE;
	private final ISElements pIS;
	private final LPARENElements pLPAREN;
	private final OFElements pOF;
	private final OUTElements pOUT;
	private final PRAGMATOKElements pPRAGMATOK;
	private final PRIVATEElements pPRIVATE;
	private final PROJECTElements pPROJECT;
	private final PUBLICElements pPUBLIC;
	private final READONLYElements pREADONLY;
	private final RETURNElements pRETURN;
	private final RPARENElements pRPAREN;
	private final SCOPEElements pSCOPE;
	private final SEMIElements pSEMI;
	private final SERVICEElements pSERVICE;
	private final TERMINATORElements pTERMINATOR;
	private final TERMINATOR_SCOPEElements pTERMINATOR_SCOPE;
	private final TYPEElements pTYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MaslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTarget = new TargetElements();
		this.pDefinition = new DefinitionElements();
		this.pProjectDefinition = new ProjectDefinitionElements();
		this.pProjectItem = new ProjectItemElements();
		this.pDomainPrjDefinition = new DomainPrjDefinitionElements();
		this.pDomainPrjItem = new DomainPrjItemElements();
		this.pProjectName = new ProjectNameElements();
		this.pDomainName = new DomainNameElements();
		this.pTerminatorName = new TerminatorNameElements();
		this.pTerminatorDefinition = new TerminatorDefinitionElements();
		this.pTerminatorItem = new TerminatorItemElements();
		this.pTerminatorServiceDeclaration = new TerminatorServiceDeclarationElements();
		this.pTerminatorFunctionDeclaration = new TerminatorFunctionDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDefinition = new ParameterDefinitionElements();
		this.pServiceVisibility = new ServiceVisibilityElements();
		this.pParameterMode = new ParameterModeElements();
		this.pServiceName = new ServiceNameElements();
		this.pParameterName = new ParameterNameElements();
		this.pParameterType = new ParameterTypeElements();
		this.pReturnType = new ReturnTypeElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pDeprecatedType = new DeprecatedTypeElements();
		this.pNamedTypeRef = new NamedTypeRefElements();
		this.pTypeName = new TypeNameElements();
		this.pPragmaList = new PragmaListElements();
		this.pPragma = new PragmaElements();
		this.pPragmaValue = new PragmaValueElements();
		this.pPragmaName = new PragmaNameElements();
		this.pLiteral = new LiteralElements();
		this.pObjectName = new ObjectNameElements();
		this.pServiceType = new ServiceTypeElements();
		this.pRelationshipName = new RelationshipNameElements();
		this.pDomainServiceDefinition = new DomainServiceDefinitionElements();
		this.pDomainFunctionDefinition = new DomainFunctionDefinitionElements();
		this.pObjectServiceDefinition = new ObjectServiceDefinitionElements();
		this.pObjectFunctionDefinition = new ObjectFunctionDefinitionElements();
		this.pTerminatorServiceDefinition = new TerminatorServiceDefinitionElements();
		this.pTerminatorFunctionDefinition = new TerminatorFunctionDefinitionElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableName = new VariableNameElements();
		this.pStatementList = new StatementListElements();
		this.tRELATIONSHIP_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.Masl.RELATIONSHIP_NAME");
		this.pANONYMOUS = new ANONYMOUSElements();
		this.pASSIGN = new ASSIGNElements();
		this.pBEGIN = new BEGINElements();
		this.pCOLON = new COLONElements();
		this.pCOMMA = new COMMAElements();
		this.pDEFERRED = new DEFERREDElements();
		this.pDOMAIN = new DOMAINElements();
		this.pDOT = new DOTElements();
		this.pEND = new ENDElements();
		this.pEVENT = new EVENTElements();
		this.pFUNCTION = new FUNCTIONElements();
		this.pIN = new INElements();
		this.pINSTANCE = new INSTANCEElements();
		this.pIS = new ISElements();
		this.pLPAREN = new LPARENElements();
		this.pOF = new OFElements();
		this.pOUT = new OUTElements();
		this.pPRAGMATOK = new PRAGMATOKElements();
		this.pPRIVATE = new PRIVATEElements();
		this.pPROJECT = new PROJECTElements();
		this.pPUBLIC = new PUBLICElements();
		this.pREADONLY = new READONLYElements();
		this.pRETURN = new RETURNElements();
		this.pRPAREN = new RPARENElements();
		this.pSCOPE = new SCOPEElements();
		this.pSEMI = new SEMIElements();
		this.pSERVICE = new SERVICEElements();
		this.pTERMINATOR = new TERMINATORElements();
		this.pTERMINATOR_SCOPE = new TERMINATOR_SCOPEElements();
		this.pTYPE = new TYPEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtuml.bp.xtext.Masl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//target:
	//	definition+=definition+;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//definition:
	//	projectDefinition
	//	| objectServiceDefinition
	//	| objectFunctionDefinition
	//	| domainServiceDefinition
	//	| domainFunctionDefinition
	//	| terminatorServiceDefinition
	//	| terminatorFunctionDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Project Definition
	////---------------------------------------------------------
	//projectDefinition Project:
	//	PROJECT projectName=projectName IS
	//	projectItem+=projectItem*
	//	END PROJECT? SEMI pragmaList=pragmaList
	public ProjectDefinitionElements getProjectDefinitionAccess() {
		return pProjectDefinition;
	}
	
	public ParserRule getProjectDefinitionRule() {
		return getProjectDefinitionAccess().getRule();
	}
	
	//projectItem:
	//	domainPrjDefinition;
	public ProjectItemElements getProjectItemAccess() {
		return pProjectItem;
	}
	
	public ParserRule getProjectItemRule() {
		return getProjectItemAccess().getRule();
	}
	
	//domainPrjDefinition Domain:
	//	DOMAIN domainName=domainName IS
	//	domainPrjItem+=domainPrjItem*
	//	END DOMAIN? SEMI pragmaList=pragmaList
	public DomainPrjDefinitionElements getDomainPrjDefinitionAccess() {
		return pDomainPrjDefinition;
	}
	
	public ParserRule getDomainPrjDefinitionRule() {
		return getDomainPrjDefinitionAccess().getRule();
	}
	
	//domainPrjItem:
	//	terminatorDefinition;
	public DomainPrjItemElements getDomainPrjItemAccess() {
		return pDomainPrjItem;
	}
	
	public ParserRule getDomainPrjItemRule() {
		return getDomainPrjItemAccess().getRule();
	}
	
	//projectName ProjectName:
	//	identifier=ID
	public ProjectNameElements getProjectNameAccess() {
		return pProjectName;
	}
	
	public ParserRule getProjectNameRule() {
		return getProjectNameAccess().getRule();
	}
	
	//domainName DomainName:
	//	identifier=ID
	public DomainNameElements getDomainNameAccess() {
		return pDomainName;
	}
	
	public ParserRule getDomainNameRule() {
		return getDomainNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Terminator Definition
	////---------------------------------------------------------
	//terminatorName TerminatorName:
	//	identifier=ID
	public TerminatorNameElements getTerminatorNameAccess() {
		return pTerminatorName;
	}
	
	public ParserRule getTerminatorNameRule() {
		return getTerminatorNameAccess().getRule();
	}
	
	//terminatorDefinition TerminatorDefinition:
	//	TERMINATOR terminatorName=terminatorName IS
	//	terminatorItem+=terminatorItem*
	//	END TERMINATOR? SEMI pragmaList=pragmaList
	public TerminatorDefinitionElements getTerminatorDefinitionAccess() {
		return pTerminatorDefinition;
	}
	
	public ParserRule getTerminatorDefinitionRule() {
		return getTerminatorDefinitionAccess().getRule();
	}
	
	//terminatorItem:
	//	terminatorServiceDeclaration
	//	| terminatorFunctionDeclaration;
	public TerminatorItemElements getTerminatorItemAccess() {
		return pTerminatorItem;
	}
	
	public ParserRule getTerminatorItemRule() {
		return getTerminatorItemAccess().getRule();
	}
	
	//terminatorServiceDeclaration TerminatorServiceDeclaration:
	//	serviceVisibility=serviceVisibility SERVICE serviceName=serviceName
	//	parameterList=parameterList SEMI pragmaList=pragmaList
	public TerminatorServiceDeclarationElements getTerminatorServiceDeclarationAccess() {
		return pTerminatorServiceDeclaration;
	}
	
	public ParserRule getTerminatorServiceDeclarationRule() {
		return getTerminatorServiceDeclarationAccess().getRule();
	}
	
	//terminatorFunctionDeclaration TerminatorFunctionDeclaration:
	//	serviceVisibility=serviceVisibility FUNCTION serviceName=serviceName
	//	parameterList=parameterList RETURN returnType=returnType
	//	SEMI pragmaList=pragmaList
	public TerminatorFunctionDeclarationElements getTerminatorFunctionDeclarationAccess() {
		return pTerminatorFunctionDeclaration;
	}
	
	public ParserRule getTerminatorFunctionDeclarationRule() {
		return getTerminatorFunctionDeclarationAccess().getRule();
	}
	
	//parameterList:
	//	LPAREN {parameterList} parameterDefinition+=parameterDefinition? (COMMA parameterDefinition+=parameterDefinition)*
	//	RPAREN;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//parameterDefinition ParameterDefinition:
	//	parameterName=parameterName COLON parameterMode=parameterMode parameterType=parameterType
	public ParameterDefinitionElements getParameterDefinitionAccess() {
		return pParameterDefinition;
	}
	
	public ParserRule getParameterDefinitionRule() {
		return getParameterDefinitionAccess().getRule();
	}
	
	/// * fix for blank * / serviceVisibility:
	//	PRIVATE
	//	| PUBLIC;
	public ServiceVisibilityElements getServiceVisibilityAccess() {
		return pServiceVisibility;
	}
	
	public ParserRule getServiceVisibilityRule() {
		return getServiceVisibilityAccess().getRule();
	}
	
	//parameterMode:
	//	IN
	//	| OUT;
	public ParameterModeElements getParameterModeAccess() {
		return pParameterMode;
	}
	
	public ParserRule getParameterModeRule() {
		return getParameterModeAccess().getRule();
	}
	
	//serviceName ServiceName:
	//	identifier=ID
	public ServiceNameElements getServiceNameAccess() {
		return pServiceName;
	}
	
	public ParserRule getServiceNameRule() {
		return getServiceNameAccess().getRule();
	}
	
	//parameterName ParameterName:
	//	identifier=ID
	public ParameterNameElements getParameterNameAccess() {
		return pParameterName;
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}
	
	//parameterType ParameterType:
	//	typeReference=typeReference
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//returnType ReturnType:
	//	typeReference=typeReference
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Type Reference
	////---------------------------------------------------------
	//typeReference:
	//	namedTypeRef
	//	| deprecatedType;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//deprecatedType:
	//	INSTANCE=INSTANCE
	//	| EVENT=EVENT
	//	| SERVICE=SERVICE;
	public DeprecatedTypeElements getDeprecatedTypeAccess() {
		return pDeprecatedType;
	}
	
	public ParserRule getDeprecatedTypeRule() {
		return getDeprecatedTypeAccess().getRule();
	}
	
	//namedTypeRef NamedType:
	//	anonymous=ANONYMOUS? (domainName=domainName SCOPE)? typeName=typeName
	public NamedTypeRefElements getNamedTypeRefAccess() {
		return pNamedTypeRef;
	}
	
	public ParserRule getNamedTypeRefRule() {
		return getNamedTypeRefAccess().getRule();
	}
	
	//typeName TypeName:
	//	identifier=ID
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Pragma Definition
	////---------------------------------------------------------
	//pragmaList PragmaList:
	//	{PragmaList} (pragma+=pragma SEMI)*
	public PragmaListElements getPragmaListAccess() {
		return pPragmaList;
	}
	
	public ParserRule getPragmaListRule() {
		return getPragmaListAccess().getRule();
	}
	
	//pragma Pragma:
	//	PRAGMATOK pragmaName=pragmaName
	//	LPAREN (pragmaValue+=pragmaValue (COMMA pragmaValue+=pragmaValue)*)?
	//	RPAREN
	public PragmaElements getPragmaAccess() {
		return pPragma;
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//pragmaValue:
	//	literal
	//	| ID;
	public PragmaValueElements getPragmaValueAccess() {
		return pPragmaValue;
	}
	
	public ParserRule getPragmaValueRule() {
		return getPragmaValueAccess().getRule();
	}
	
	//pragmaName PragmaName:
	//	identifier=ID
	public PragmaNameElements getPragmaNameAccess() {
		return pPragmaName;
	}
	
	public ParserRule getPragmaNameRule() {
		return getPragmaNameAccess().getRule();
	}
	
	//literal:
	//	INT
	//	| STRING;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Object Definition
	////---------------------------------------------------------
	//objectName ObjectName:
	//	identifier=ID
	public ObjectNameElements getObjectNameAccess() {
		return pObjectName;
	}
	
	public ParserRule getObjectNameRule() {
		return getObjectNameAccess().getRule();
	}
	
	//serviceType:
	//	(INSTANCE=INSTANCE (DEFERRED LPAREN relationshipName=relationshipName RPAREN)?)?;
	public ServiceTypeElements getServiceTypeAccess() {
		return pServiceType;
	}
	
	public ParserRule getServiceTypeRule() {
		return getServiceTypeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Relationship Definition
	////---------------------------------------------------------
	//relationshipName RelationshipName:
	//	relationshipName=RELATIONSHIP_NAME
	public RelationshipNameElements getRelationshipNameAccess() {
		return pRelationshipName;
	}
	
	public ParserRule getRelationshipNameRule() {
		return getRelationshipNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Dynamic Behaviour
	////---------------------------------------------------------
	//domainServiceDefinition DomainServiceDefinition:
	//	serviceVisibility=serviceVisibility SERVICE
	//	domainName=domainName SCOPE serviceName=serviceName
	//	parameterList=parameterList IS
	//	codeBlock=codeBlock
	//	SERVICE? SEMI pargmaList=pragmaList
	public DomainServiceDefinitionElements getDomainServiceDefinitionAccess() {
		return pDomainServiceDefinition;
	}
	
	public ParserRule getDomainServiceDefinitionRule() {
		return getDomainServiceDefinitionAccess().getRule();
	}
	
	//domainFunctionDefinition DomainServiceDefinition:
	//	serviceVisibility=serviceVisibility FUNCTION
	//	domainName=domainName SCOPE serviceName=serviceName
	//	parameterList=parameterList
	//	RETURN returnType=returnType IS codeBlock=codeBlock
	//	FUNCTION? SEMI pargmaList=pragmaList
	public DomainFunctionDefinitionElements getDomainFunctionDefinitionAccess() {
		return pDomainFunctionDefinition;
	}
	
	public ParserRule getDomainFunctionDefinitionRule() {
		return getDomainFunctionDefinitionAccess().getRule();
	}
	
	//objectServiceDefinition ObjectServiceDefinition:
	//	serviceVisibility=serviceVisibility INSTANCE=INSTANCE? SERVICE
	//	domainName=domainName SCOPE objectName=objectName DOT serviceName=serviceName
	//	parameterList=parameterList IS codeBlock=codeBlock
	//	SERVICE? SEMI pragmaList=pragmaList
	public ObjectServiceDefinitionElements getObjectServiceDefinitionAccess() {
		return pObjectServiceDefinition;
	}
	
	public ParserRule getObjectServiceDefinitionRule() {
		return getObjectServiceDefinitionAccess().getRule();
	}
	
	//objectFunctionDefinition ObjectServiceDefinition:
	//	serviceVisibility=serviceVisibility serviceType=serviceType FUNCTION
	//	domainName=domainName SCOPE objectName=objectName DOT serviceName=serviceName
	//	parameterList=parameterList
	//	RETURN returnType=returnType IS codeBlock=codeBlock
	//	FUNCTION? SEMI pragmaList=pragmaList
	public ObjectFunctionDefinitionElements getObjectFunctionDefinitionAccess() {
		return pObjectFunctionDefinition;
	}
	
	public ParserRule getObjectFunctionDefinitionRule() {
		return getObjectFunctionDefinitionAccess().getRule();
	}
	
	//terminatorServiceDefinition TerminatorServiceDefinition:
	//	serviceVisibility=serviceVisibility SERVICE
	//	domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE serviceName=serviceName
	//	parameterList=parameterList IS
	//	codeBlock=codeBlock
	//	SERVICE? SEMI pragmaList=pragmaList
	public TerminatorServiceDefinitionElements getTerminatorServiceDefinitionAccess() {
		return pTerminatorServiceDefinition;
	}
	
	public ParserRule getTerminatorServiceDefinitionRule() {
		return getTerminatorServiceDefinitionAccess().getRule();
	}
	
	//terminatorFunctionDefinition TerminatorServiceDefinition:
	//	serviceVisibility=serviceVisibility FUNCTION
	//	domainName=domainName SCOPE terminatorName=terminatorName TERMINATOR_SCOPE serviceName=serviceName
	//	parameterList=parameterList RETURN returnType=returnType IS
	//	codeBlock=codeBlock
	//	FUNCTION? SEMI pragmaList=pragmaList
	public TerminatorFunctionDefinitionElements getTerminatorFunctionDefinitionAccess() {
		return pTerminatorFunctionDefinition;
	}
	
	public ParserRule getTerminatorFunctionDefinitionRule() {
		return getTerminatorFunctionDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Code Blocks
	////---------------------------------------------------------
	//codeBlock CodeBlock:
	//	variableDeclaration+=variableDeclaration*
	//	BEGIN
	//	statementList
	//	END
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//variableDeclaration VariableDeclaration:
	//	variableName=variableName COLON
	//	READONLY=READONLY? typeReferenceWithCA=typeReference
	//	SEMI pragmaList=pragmaList
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//variableName VariableName:
	//	identifier=ID
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}
	
	//statementList:
	//	=> (ID | INT | STRING | WS | ANY_OTHER)*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//terminal RELATIONSHIP_NAME:
	//	'R' '1'..'9' INT*;
	public TerminalRule getRELATIONSHIP_NAMERule() {
		return tRELATIONSHIP_NAME;
	}
	
	//// Keywords
	//ANONYMOUS:
	//	'anonymous';
	public ANONYMOUSElements getANONYMOUSAccess() {
		return pANONYMOUS;
	}
	
	public ParserRule getANONYMOUSRule() {
		return getANONYMOUSAccess().getRule();
	}
	
	//ASSIGN:
	//	':=';
	public ASSIGNElements getASSIGNAccess() {
		return pASSIGN;
	}
	
	public ParserRule getASSIGNRule() {
		return getASSIGNAccess().getRule();
	}
	
	//BEGIN:
	//	'begin';
	public BEGINElements getBEGINAccess() {
		return pBEGIN;
	}
	
	public ParserRule getBEGINRule() {
		return getBEGINAccess().getRule();
	}
	
	//COLON:
	//	':';
	public COLONElements getCOLONAccess() {
		return pCOLON;
	}
	
	public ParserRule getCOLONRule() {
		return getCOLONAccess().getRule();
	}
	
	//COMMA:
	//	',';
	public COMMAElements getCOMMAAccess() {
		return pCOMMA;
	}
	
	public ParserRule getCOMMARule() {
		return getCOMMAAccess().getRule();
	}
	
	//DEFERRED:
	//	'deferred';
	public DEFERREDElements getDEFERREDAccess() {
		return pDEFERRED;
	}
	
	public ParserRule getDEFERREDRule() {
		return getDEFERREDAccess().getRule();
	}
	
	//DOMAIN:
	//	'domain';
	public DOMAINElements getDOMAINAccess() {
		return pDOMAIN;
	}
	
	public ParserRule getDOMAINRule() {
		return getDOMAINAccess().getRule();
	}
	
	//DOT:
	//	'.';
	public DOTElements getDOTAccess() {
		return pDOT;
	}
	
	public ParserRule getDOTRule() {
		return getDOTAccess().getRule();
	}
	
	//END:
	//	'end';
	public ENDElements getENDAccess() {
		return pEND;
	}
	
	public ParserRule getENDRule() {
		return getENDAccess().getRule();
	}
	
	//EVENT:
	//	'event';
	public EVENTElements getEVENTAccess() {
		return pEVENT;
	}
	
	public ParserRule getEVENTRule() {
		return getEVENTAccess().getRule();
	}
	
	//FUNCTION:
	//	'function';
	public FUNCTIONElements getFUNCTIONAccess() {
		return pFUNCTION;
	}
	
	public ParserRule getFUNCTIONRule() {
		return getFUNCTIONAccess().getRule();
	}
	
	//IN:
	//	'in';
	public INElements getINAccess() {
		return pIN;
	}
	
	public ParserRule getINRule() {
		return getINAccess().getRule();
	}
	
	//INSTANCE:
	//	'instance';
	public INSTANCEElements getINSTANCEAccess() {
		return pINSTANCE;
	}
	
	public ParserRule getINSTANCERule() {
		return getINSTANCEAccess().getRule();
	}
	
	//IS:
	//	'is';
	public ISElements getISAccess() {
		return pIS;
	}
	
	public ParserRule getISRule() {
		return getISAccess().getRule();
	}
	
	//LPAREN:
	//	'(';
	public LPARENElements getLPARENAccess() {
		return pLPAREN;
	}
	
	public ParserRule getLPARENRule() {
		return getLPARENAccess().getRule();
	}
	
	//OF:
	//	'of';
	public OFElements getOFAccess() {
		return pOF;
	}
	
	public ParserRule getOFRule() {
		return getOFAccess().getRule();
	}
	
	//OUT:
	//	'out';
	public OUTElements getOUTAccess() {
		return pOUT;
	}
	
	public ParserRule getOUTRule() {
		return getOUTAccess().getRule();
	}
	
	//PRAGMATOK:
	//	'pragma';
	public PRAGMATOKElements getPRAGMATOKAccess() {
		return pPRAGMATOK;
	}
	
	public ParserRule getPRAGMATOKRule() {
		return getPRAGMATOKAccess().getRule();
	}
	
	//PRIVATE:
	//	'private';
	public PRIVATEElements getPRIVATEAccess() {
		return pPRIVATE;
	}
	
	public ParserRule getPRIVATERule() {
		return getPRIVATEAccess().getRule();
	}
	
	//PROJECT:
	//	'project';
	public PROJECTElements getPROJECTAccess() {
		return pPROJECT;
	}
	
	public ParserRule getPROJECTRule() {
		return getPROJECTAccess().getRule();
	}
	
	//PUBLIC:
	//	'public';
	public PUBLICElements getPUBLICAccess() {
		return pPUBLIC;
	}
	
	public ParserRule getPUBLICRule() {
		return getPUBLICAccess().getRule();
	}
	
	//READONLY:
	//	'readonly';
	public READONLYElements getREADONLYAccess() {
		return pREADONLY;
	}
	
	public ParserRule getREADONLYRule() {
		return getREADONLYAccess().getRule();
	}
	
	//RETURN:
	//	'return';
	public RETURNElements getRETURNAccess() {
		return pRETURN;
	}
	
	public ParserRule getRETURNRule() {
		return getRETURNAccess().getRule();
	}
	
	//RPAREN:
	//	')';
	public RPARENElements getRPARENAccess() {
		return pRPAREN;
	}
	
	public ParserRule getRPARENRule() {
		return getRPARENAccess().getRule();
	}
	
	//SCOPE:
	//	'::';
	public SCOPEElements getSCOPEAccess() {
		return pSCOPE;
	}
	
	public ParserRule getSCOPERule() {
		return getSCOPEAccess().getRule();
	}
	
	//SEMI:
	//	';';
	public SEMIElements getSEMIAccess() {
		return pSEMI;
	}
	
	public ParserRule getSEMIRule() {
		return getSEMIAccess().getRule();
	}
	
	//SERVICE:
	//	'service';
	public SERVICEElements getSERVICEAccess() {
		return pSERVICE;
	}
	
	public ParserRule getSERVICERule() {
		return getSERVICEAccess().getRule();
	}
	
	//TERMINATOR:
	//	'terminator';
	public TERMINATORElements getTERMINATORAccess() {
		return pTERMINATOR;
	}
	
	public ParserRule getTERMINATORRule() {
		return getTERMINATORAccess().getRule();
	}
	
	//TERMINATOR_SCOPE:
	//	'~>';
	public TERMINATOR_SCOPEElements getTERMINATOR_SCOPEAccess() {
		return pTERMINATOR_SCOPE;
	}
	
	public ParserRule getTERMINATOR_SCOPERule() {
		return getTERMINATOR_SCOPEAccess().getRule();
	}
	
	//TYPE:
	//	'type' | 'subtype';
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
