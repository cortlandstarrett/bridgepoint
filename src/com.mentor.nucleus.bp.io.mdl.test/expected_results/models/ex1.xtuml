-- BP 7.1 content: domain syschar: 3 persistence-version: 7.1.6

INSERT INTO S_DOM
	VALUES ("00000000-0000-0000-0000-000000005bb1",
	'ex1',
	'',
	0,
	"00000000-0000-0000-0000-000000000001",
	"00000000-0000-0000-0000-000000000001");
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000080001",
	1,
	"00000000-0000-0000-0000-000000005bb1",
	1,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000008002b",
	"00000000-0000-0000-0000-000000080001",
	"00000000-0000-0000-0000-000000100002",
	11,
	0,
	'::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000008002b");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000008002b");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"00000000-0000-0000-0000-00000008002b");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"00000000-0000-0000-0000-00000008002b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000008002b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("56e37959-d27c-4e50-d6c4-a90287dea024",
	"00000000-0000-0000-0000-000000080001",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	53,
	0,
	'::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("56e37959-d27c-4e50-d6c4-a90287dea024");
INSERT INTO GD_NCS
	VALUES ("56e37959-d27c-4e50-d6c4-a90287dea024");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"56e37959-d27c-4e50-d6c4-a90287dea024");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"56e37959-d27c-4e50-d6c4-a90287dea024",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56e37959-d27c-4e50-d6c4-a90287dea024",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("61b54460-3f04-0cf8-0b7b-d8b1a8763f3d",
	"00000000-0000-0000-0000-000000080001",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	55,
	0,
	'::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("61b54460-3f04-0cf8-0b7b-d8b1a8763f3d");
INSERT INTO GD_NCS
	VALUES ("61b54460-3f04-0cf8-0b7b-d8b1a8763f3d");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"61b54460-3f04-0cf8-0b7b-d8b1a8763f3d");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"61b54460-3f04-0cf8-0b7b-d8b1a8763f3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("61b54460-3f04-0cf8-0b7b-d8b1a8763f3d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000080001",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DPK
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	'Datatypes',
	"00000000-0000-0000-0000-000000005bb1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	100,
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	53,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("9700388a-1946-16b6-4604-939b238f32e3",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080001",
	50,
	0,
	'::ex1::Datatypes::void');
INSERT INTO GD_SHP
	VALUES ("9700388a-1946-16b6-4604-939b238f32e3");
INSERT INTO GD_NCS
	VALUES ("9700388a-1946-16b6-4604-939b238f32e3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"9700388a-1946-16b6-4604-939b238f32e3");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1195.000000,
	"9700388a-1946-16b6-4604-939b238f32e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9700388a-1946-16b6-4604-939b238f32e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("61dac528-da48-d22b-e006-6d5f75df61e7",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080002",
	50,
	0,
	'::ex1::Datatypes::boolean');
INSERT INTO GD_SHP
	VALUES ("61dac528-da48-d22b-e006-6d5f75df61e7");
INSERT INTO GD_NCS
	VALUES ("61dac528-da48-d22b-e006-6d5f75df61e7");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"61dac528-da48-d22b-e006-6d5f75df61e7");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1195.000000,
	"61dac528-da48-d22b-e006-6d5f75df61e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("61dac528-da48-d22b-e006-6d5f75df61e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("2a92293d-8e18-29ce-fad0-2e4512b89546",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080003",
	50,
	0,
	'::ex1::Datatypes::integer');
INSERT INTO GD_SHP
	VALUES ("2a92293d-8e18-29ce-fad0-2e4512b89546");
INSERT INTO GD_NCS
	VALUES ("2a92293d-8e18-29ce-fad0-2e4512b89546");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"2a92293d-8e18-29ce-fad0-2e4512b89546");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1195.000000,
	"2a92293d-8e18-29ce-fad0-2e4512b89546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a92293d-8e18-29ce-fad0-2e4512b89546",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("3e795fbd-50dd-7466-475c-1bcf20ee98c3",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080004",
	50,
	0,
	'::ex1::Datatypes::real');
INSERT INTO GD_SHP
	VALUES ("3e795fbd-50dd-7466-475c-1bcf20ee98c3");
INSERT INTO GD_NCS
	VALUES ("3e795fbd-50dd-7466-475c-1bcf20ee98c3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"3e795fbd-50dd-7466-475c-1bcf20ee98c3");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1195.000000,
	"3e795fbd-50dd-7466-475c-1bcf20ee98c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e795fbd-50dd-7466-475c-1bcf20ee98c3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080005",
	50,
	0,
	'::ex1::Datatypes::string');
INSERT INTO GD_SHP
	VALUES ("a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe");
INSERT INTO GD_NCS
	VALUES ("a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1195.000000,
	"a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a12a418b-a9ef-d3a5-08ab-29fa2d70a4fe",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("163a0d70-af8f-e689-b39b-2d404fe921d3",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080006",
	50,
	0,
	'::ex1::Datatypes::unique_id');
INSERT INTO GD_SHP
	VALUES ("163a0d70-af8f-e689-b39b-2d404fe921d3");
INSERT INTO GD_NCS
	VALUES ("163a0d70-af8f-e689-b39b-2d404fe921d3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"163a0d70-af8f-e689-b39b-2d404fe921d3");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1360.000000,
	"163a0d70-af8f-e689-b39b-2d404fe921d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("163a0d70-af8f-e689-b39b-2d404fe921d3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("02c49074-ba38-c7a8-237c-0612ac0016e5",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080007",
	50,
	0,
	'::ex1::Datatypes::state<State_Model>');
INSERT INTO GD_SHP
	VALUES ("02c49074-ba38-c7a8-237c-0612ac0016e5");
INSERT INTO GD_NCS
	VALUES ("02c49074-ba38-c7a8-237c-0612ac0016e5");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"02c49074-ba38-c7a8-237c-0612ac0016e5");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1360.000000,
	"02c49074-ba38-c7a8-237c-0612ac0016e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("02c49074-ba38-c7a8-237c-0612ac0016e5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("5b80757c-5564-9645-c575-c6c9fa7c4ef5",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080008",
	50,
	0,
	'::ex1::Datatypes::same_as<Base_Attribute>');
INSERT INTO GD_SHP
	VALUES ("5b80757c-5564-9645-c575-c6c9fa7c4ef5");
INSERT INTO GD_NCS
	VALUES ("5b80757c-5564-9645-c575-c6c9fa7c4ef5");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"5b80757c-5564-9645-c575-c6c9fa7c4ef5");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1360.000000,
	"5b80757c-5564-9645-c575-c6c9fa7c4ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b80757c-5564-9645-c575-c6c9fa7c4ef5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("7fd43a75-45f7-5934-e601-5cfcc94f1782",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080009",
	50,
	0,
	'::ex1::Datatypes::inst_ref<Object>');
INSERT INTO GD_SHP
	VALUES ("7fd43a75-45f7-5934-e601-5cfcc94f1782");
INSERT INTO GD_NCS
	VALUES ("7fd43a75-45f7-5934-e601-5cfcc94f1782");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"7fd43a75-45f7-5934-e601-5cfcc94f1782");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1360.000000,
	"7fd43a75-45f7-5934-e601-5cfcc94f1782",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7fd43a75-45f7-5934-e601-5cfcc94f1782",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("67f556ae-cb7d-5224-520e-07cef1f01db5",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000a",
	50,
	0,
	'::ex1::Datatypes::inst_ref_set<Object>');
INSERT INTO GD_SHP
	VALUES ("67f556ae-cb7d-5224-520e-07cef1f01db5");
INSERT INTO GD_NCS
	VALUES ("67f556ae-cb7d-5224-520e-07cef1f01db5");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"67f556ae-cb7d-5224-520e-07cef1f01db5");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1360.000000,
	"67f556ae-cb7d-5224-520e-07cef1f01db5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67f556ae-cb7d-5224-520e-07cef1f01db5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("044021fe-6c01-cd10-5020-55b8e69d9691",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000b",
	50,
	0,
	'::ex1::Datatypes::inst<Event>');
INSERT INTO GD_SHP
	VALUES ("044021fe-6c01-cd10-5020-55b8e69d9691");
INSERT INTO GD_NCS
	VALUES ("044021fe-6c01-cd10-5020-55b8e69d9691");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"044021fe-6c01-cd10-5020-55b8e69d9691");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1525.000000,
	"044021fe-6c01-cd10-5020-55b8e69d9691",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("044021fe-6c01-cd10-5020-55b8e69d9691",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("3b539ac4-f162-2f80-08f9-4a5a13dad59c",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000c",
	50,
	0,
	'::ex1::Datatypes::inst<Mapping>');
INSERT INTO GD_SHP
	VALUES ("3b539ac4-f162-2f80-08f9-4a5a13dad59c");
INSERT INTO GD_NCS
	VALUES ("3b539ac4-f162-2f80-08f9-4a5a13dad59c");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"3b539ac4-f162-2f80-08f9-4a5a13dad59c");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1525.000000,
	"3b539ac4-f162-2f80-08f9-4a5a13dad59c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b539ac4-f162-2f80-08f9-4a5a13dad59c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("55688db3-32df-d4da-c7f5-27a69311170f",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000d",
	50,
	0,
	'::ex1::Datatypes::inst_ref<Mapping>');
INSERT INTO GD_SHP
	VALUES ("55688db3-32df-d4da-c7f5-27a69311170f");
INSERT INTO GD_NCS
	VALUES ("55688db3-32df-d4da-c7f5-27a69311170f");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"55688db3-32df-d4da-c7f5-27a69311170f");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1525.000000,
	"55688db3-32df-d4da-c7f5-27a69311170f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("55688db3-32df-d4da-c7f5-27a69311170f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("0c1cd340-b41d-86b1-c880-b1aa17e10c50",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000e",
	51,
	0,
	'::ex1::Datatypes::date');
INSERT INTO GD_SHP
	VALUES ("0c1cd340-b41d-86b1-c880-b1aa17e10c50");
INSERT INTO GD_NCS
	VALUES ("0c1cd340-b41d-86b1-c880-b1aa17e10c50");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"0c1cd340-b41d-86b1-c880-b1aa17e10c50");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1690.000000,
	"0c1cd340-b41d-86b1-c880-b1aa17e10c50",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c1cd340-b41d-86b1-c880-b1aa17e10c50",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("dda16a4d-05b1-3287-c962-363afed86590",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000f",
	51,
	0,
	'::ex1::Datatypes::timestamp');
INSERT INTO GD_SHP
	VALUES ("dda16a4d-05b1-3287-c962-363afed86590");
INSERT INTO GD_NCS
	VALUES ("dda16a4d-05b1-3287-c962-363afed86590");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"dda16a4d-05b1-3287-c962-363afed86590");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1690.000000,
	"dda16a4d-05b1-3287-c962-363afed86590",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dda16a4d-05b1-3287-c962-363afed86590",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("df8975ea-5023-5d2b-0f4b-9113724bd9ca",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080010",
	51,
	0,
	'::ex1::Datatypes::inst_ref<Timer>');
INSERT INTO GD_SHP
	VALUES ("df8975ea-5023-5d2b-0f4b-9113724bd9ca");
INSERT INTO GD_NCS
	VALUES ("df8975ea-5023-5d2b-0f4b-9113724bd9ca");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"df8975ea-5023-5d2b-0f4b-9113724bd9ca");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1690.000000,
	"df8975ea-5023-5d2b-0f4b-9113724bd9ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df8975ea-5023-5d2b-0f4b-9113724bd9ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("1865e836-b827-da00-42c9-be83bd170af9",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080011",
	51,
	0,
	'::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("1865e836-b827-da00-42c9-be83bd170af9");
INSERT INTO GD_NCS
	VALUES ("1865e836-b827-da00-42c9-be83bd170af9");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"1865e836-b827-da00-42c9-be83bd170af9");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"1865e836-b827-da00-42c9-be83bd170af9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1865e836-b827-da00-42c9-be83bd170af9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("5cadef52-3b5d-9545-902a-0a513655a8f0",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080012",
	51,
	0,
	'::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("5cadef52-3b5d-9545-902a-0a513655a8f0");
INSERT INTO GD_NCS
	VALUES ("5cadef52-3b5d-9545-902a-0a513655a8f0");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"5cadef52-3b5d-9545-902a-0a513655a8f0");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"5cadef52-3b5d-9545-902a-0a513655a8f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5cadef52-3b5d-9545-902a-0a513655a8f0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("53f5fc93-e469-bc9d-943f-5ac6a5840df0",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080013",
	51,
	0,
	'::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("53f5fc93-e469-bc9d-943f-5ac6a5840df0");
INSERT INTO GD_NCS
	VALUES ("53f5fc93-e469-bc9d-943f-5ac6a5840df0");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"53f5fc93-e469-bc9d-943f-5ac6a5840df0");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"53f5fc93-e469-bc9d-943f-5ac6a5840df0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("53f5fc93-e469-bc9d-943f-5ac6a5840df0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("70aac5be-7ae2-981b-5293-df1eb7ae2ba3",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080014",
	51,
	0,
	'::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("70aac5be-7ae2-981b-5293-df1eb7ae2ba3");
INSERT INTO GD_NCS
	VALUES ("70aac5be-7ae2-981b-5293-df1eb7ae2ba3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"70aac5be-7ae2-981b-5293-df1eb7ae2ba3");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"70aac5be-7ae2-981b-5293-df1eb7ae2ba3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70aac5be-7ae2-981b-5293-df1eb7ae2ba3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("70954493-4cae-9dda-032d-775b3ba700e7",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080015",
	51,
	0,
	'::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("70954493-4cae-9dda-032d-775b3ba700e7");
INSERT INTO GD_NCS
	VALUES ("70954493-4cae-9dda-032d-775b3ba700e7");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"70954493-4cae-9dda-032d-775b3ba700e7");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"70954493-4cae-9dda-032d-775b3ba700e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70954493-4cae-9dda-032d-775b3ba700e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080001");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080001",
	"00000000-0000-0000-0000-000000005bb1",
	'void',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080001",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080001",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080002");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080002",
	"00000000-0000-0000-0000-000000005bb1",
	'boolean',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080002",
	1);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080002",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080003");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080003",
	"00000000-0000-0000-0000-000000005bb1",
	'integer',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080003",
	2);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080003",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080004");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080004",
	"00000000-0000-0000-0000-000000005bb1",
	'real',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080004",
	3);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080004",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080005");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080005",
	"00000000-0000-0000-0000-000000005bb1",
	'string',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080005",
	4);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080005",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080006");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080006",
	"00000000-0000-0000-0000-000000005bb1",
	'unique_id',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080006",
	5);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080006",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080007");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080007",
	"00000000-0000-0000-0000-000000005bb1",
	'state<State_Model>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080007",
	6);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080007",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080008");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080008",
	"00000000-0000-0000-0000-000000005bb1",
	'same_as<Base_Attribute>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080008",
	7);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080008",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080009");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080009",
	"00000000-0000-0000-0000-000000005bb1",
	'inst_ref<Object>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-000000080009",
	8);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080009",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000a");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000a",
	"00000000-0000-0000-0000-000000005bb1",
	'inst_ref_set<Object>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-00000008000a",
	9);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000a",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000b");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000b",
	"00000000-0000-0000-0000-000000005bb1",
	'inst<Event>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-00000008000b",
	10);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000b",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000c");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000c",
	"00000000-0000-0000-0000-000000005bb1",
	'inst<Mapping>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-00000008000c",
	11);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000c",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000d");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000d",
	"00000000-0000-0000-0000-000000005bb1",
	'inst_ref<Mapping>',
	'',
	'');
INSERT INTO S_CDT
	VALUES ("00000000-0000-0000-0000-00000008000d",
	12);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000d",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000e");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000e",
	"00000000-0000-0000-0000-000000005bb1",
	'date',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-00000008000e",
	"00000000-0000-0000-0000-00000008000c",
	1);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000e",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-00000008000f");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-00000008000f",
	"00000000-0000-0000-0000-000000005bb1",
	'timestamp',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-00000008000f",
	"00000000-0000-0000-0000-00000008000c",
	2);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-00000008000f",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080010");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080010",
	"00000000-0000-0000-0000-000000005bb1",
	'inst_ref<Timer>',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080010",
	"00000000-0000-0000-0000-00000008000d",
	3);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080010",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080011");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080011",
	"00000000-0000-0000-0000-000000005bb1",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080011",
	"00000000-0000-0000-0000-000000080002",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080011",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080012");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080012",
	"00000000-0000-0000-0000-000000005bb1",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080012",
	"00000000-0000-0000-0000-000000080003",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080012",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080013");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080013",
	"00000000-0000-0000-0000-000000005bb1",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080013",
	"00000000-0000-0000-0000-000000080004",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080013",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080014");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080014",
	"00000000-0000-0000-0000-000000005bb1",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080014",
	"00000000-0000-0000-0000-000000080005",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080014",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080015");
INSERT INTO S_DT
	VALUES ("00000000-0000-0000-0000-000000080015",
	"00000000-0000-0000-0000-000000005bb1",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00000000-0000-0000-0000-000000080015",
	"00000000-0000-0000-0000-000000080006",
	0);
INSERT INTO PE_PE
	VALUES ("00000000-0000-0000-0000-000000080015",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO EP_SPKG
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_EEPK
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	'External Entities',
	"00000000-0000-0000-0000-000000005bb1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	102,
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	55,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::External Entities');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000008002c",
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000080001",
	12,
	0,
	'::ex1::External Entities::Time');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000008002c");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000008002c");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"00000000-0000-0000-0000-00000008002c");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"00000000-0000-0000-0000-00000008002c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000008002c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000008002d",
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000080002",
	12,
	0,
	'::ex1::External Entities::Architecture');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000008002d");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000008002d");
INSERT INTO DIM_ND
	VALUES (144.000000,
	96.000000,
	"00000000-0000-0000-0000-00000008002d");
INSERT INTO DIM_GE
	VALUES (1792.000000,
	1568.000000,
	"00000000-0000-0000-0000-00000008002d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000008002d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000008002e",
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000080003",
	12,
	0,
	'::ex1::External Entities::Logging');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000008002e");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000008002e");
INSERT INTO DIM_ND
	VALUES (176.000000,
	96.000000,
	"00000000-0000-0000-0000-00000008002e");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1472.000000,
	"00000000-0000-0000-0000-00000008002e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000008002e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PL_EEPID
	VALUES ("00000000-0000-0000-0000-000000005bb1",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9");
INSERT INTO S_EEIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080001");
INSERT INTO S_EE
	VALUES ("00000000-0000-0000-0000-000000080001",
	'Time',
	'',
	'TIM',
	"00000000-0000-0000-0000-000000005bb1");
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080001",
	"00000000-0000-0000-0000-000000080001",
	'current_date',
	'',
	1,
	"00000000-0000-0000-0000-00000008000e",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080002",
	"00000000-0000-0000-0000-000000080001",
	'create_date',
	'',
	1,
	"00000000-0000-0000-0000-00000008000e",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080001",
	"00000000-0000-0000-0000-000000080002",
	'second',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080005",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080002",
	"00000000-0000-0000-0000-000000080002",
	'minute',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080003",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080003",
	"00000000-0000-0000-0000-000000080002",
	'hour',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080004",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080004",
	"00000000-0000-0000-0000-000000080002",
	'day',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080005",
	"00000000-0000-0000-0000-000000080002",
	'month',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080002",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080006",
	"00000000-0000-0000-0000-000000080002",
	'year',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080001",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080003",
	"00000000-0000-0000-0000-000000080001",
	'get_second',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080007",
	"00000000-0000-0000-0000-000000080003",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080004",
	"00000000-0000-0000-0000-000000080001",
	'get_minute',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080008",
	"00000000-0000-0000-0000-000000080004",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080005",
	"00000000-0000-0000-0000-000000080001",
	'get_hour',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080009",
	"00000000-0000-0000-0000-000000080005",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080006",
	"00000000-0000-0000-0000-000000080001",
	'get_day',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000a",
	"00000000-0000-0000-0000-000000080006",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080007",
	"00000000-0000-0000-0000-000000080001",
	'get_month',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000b",
	"00000000-0000-0000-0000-000000080007",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080008",
	"00000000-0000-0000-0000-000000080001",
	'get_year',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000c",
	"00000000-0000-0000-0000-000000080008",
	'date',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080009",
	"00000000-0000-0000-0000-000000080001",
	'current_clock',
	'',
	1,
	"00000000-0000-0000-0000-00000008000f",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000a",
	"00000000-0000-0000-0000-000000080001",
	'timer_start',
	'',
	1,
	"00000000-0000-0000-0000-000000080010",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000d",
	"00000000-0000-0000-0000-00000008000a",
	'microseconds',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-00000008000e",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000e",
	"00000000-0000-0000-0000-00000008000a",
	'event_inst',
	"00000000-0000-0000-0000-00000008000b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000b",
	"00000000-0000-0000-0000-000000080001",
	'timer_start_recurring',
	'',
	1,
	"00000000-0000-0000-0000-000000080010",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008000f",
	"00000000-0000-0000-0000-00000008000b",
	'microseconds',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080010",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080010",
	"00000000-0000-0000-0000-00000008000b",
	'event_inst',
	"00000000-0000-0000-0000-00000008000b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000c",
	"00000000-0000-0000-0000-000000080001",
	'timer_restart',
	'',
	1,
	"00000000-0000-0000-0000-000000080001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080011",
	"00000000-0000-0000-0000-00000008000c",
	'timer_inst_ref',
	"00000000-0000-0000-0000-000000080010",
	0,
	'',
	"00000000-0000-0000-0000-000000080012",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080012",
	"00000000-0000-0000-0000-00000008000c",
	'microseconds',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000080013",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080013",
	"00000000-0000-0000-0000-00000008000c",
	'event_inst',
	"00000000-0000-0000-0000-00000008000b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000d",
	"00000000-0000-0000-0000-000000080001",
	'timer_remaining_time',
	'',
	1,
	"00000000-0000-0000-0000-000000080003",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080014",
	"00000000-0000-0000-0000-00000008000d",
	'timer_inst_ref',
	"00000000-0000-0000-0000-000000080010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000e",
	"00000000-0000-0000-0000-000000080001",
	'timer_reset_time',
	'',
	1,
	"00000000-0000-0000-0000-000000080002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080015",
	"00000000-0000-0000-0000-00000008000e",
	'timer_inst_ref',
	"00000000-0000-0000-0000-000000080010",
	0,
	'',
	"00000000-0000-0000-0000-000000080016",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080016",
	"00000000-0000-0000-0000-00000008000e",
	'microseconds',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-00000008000f",
	"00000000-0000-0000-0000-000000080001",
	'timer_add_time',
	'',
	1,
	"00000000-0000-0000-0000-000000080002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080017",
	"00000000-0000-0000-0000-00000008000f",
	'timer_inst_ref',
	"00000000-0000-0000-0000-000000080010",
	0,
	'',
	"00000000-0000-0000-0000-000000080018",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080018",
	"00000000-0000-0000-0000-00000008000f",
	'microseconds',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080010",
	"00000000-0000-0000-0000-000000080001",
	'timer_cancel',
	'',
	1,
	"00000000-0000-0000-0000-000000080002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080019",
	"00000000-0000-0000-0000-000000080010",
	'timer_inst_ref',
	"00000000-0000-0000-0000-000000080010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_EEIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080002");
INSERT INTO S_EE
	VALUES ("00000000-0000-0000-0000-000000080002",
	'Architecture',
	'',
	'ARCH',
	"00000000-0000-0000-0000-000000005bb1");
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080011",
	"00000000-0000-0000-0000-000000080002",
	'shutdown',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_EEIP
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000080003");
INSERT INTO S_EE
	VALUES ("00000000-0000-0000-0000-000000080003",
	'Logging',
	'',
	'LOG',
	"00000000-0000-0000-0000-000000005bb1");
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080012",
	"00000000-0000-0000-0000-000000080003",
	'LogSuccess',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001a",
	"00000000-0000-0000-0000-000000080012",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080013",
	"00000000-0000-0000-0000-000000080003",
	'LogFailure',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001b",
	"00000000-0000-0000-0000-000000080013",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080014",
	"00000000-0000-0000-0000-000000080003",
	'LogInfo',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001c",
	"00000000-0000-0000-0000-000000080014",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080015",
	"00000000-0000-0000-0000-000000080003",
	'LogDate',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001d",
	"00000000-0000-0000-0000-000000080015",
	'd',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001e",
	"00000000-0000-0000-0000-000000080015",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-00000008001d",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080016",
	"00000000-0000-0000-0000-000000080003",
	'LogTime',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-00000008001f",
	"00000000-0000-0000-0000-000000080016",
	't',
	"00000000-0000-0000-0000-00000008000f",
	0,
	'',
	"00000000-0000-0000-0000-000000080020",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080020",
	"00000000-0000-0000-0000-000000080016",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("00000000-0000-0000-0000-000000080017",
	"00000000-0000-0000-0000-000000080003",
	'LogReal',
	'',
	0,
	"00000000-0000-0000-0000-000000080001",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080021",
	"00000000-0000-0000-0000-000000080017",
	'r',
	"00000000-0000-0000-0000-000000080004",
	0,
	'',
	"00000000-0000-0000-0000-000000080022",
	'');
INSERT INTO S_BPARM
	VALUES ("00000000-0000-0000-0000-000000080022",
	"00000000-0000-0000-0000-000000080017",
	'message',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SID
	VALUES ("00000000-0000-0000-0000-000000005bb1",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO S_SS
	VALUES ("00000000-0000-0000-0000-000000100002",
	'ex',
	'',
	'',
	1,
	"00000000-0000-0000-0000-000000005bb1",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100001",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"00000000-0000-0000-0000-000000080007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100001");
INSERT INTO SM_ISM
	VALUES ("00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO SM_SM
	VALUES ("00000000-0000-0000-0000-000000180003",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("00000000-0000-0000-0000-000000180003");
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180001");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180003",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'');
INSERT INTO SM_TAH
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180001");
INSERT INTO SM_AH
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000180003");
INSERT INTO SM_ACT
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000180003",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000180001",
	8,
	"00000000-0000-0000-0000-000000180003",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000180002",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180001",
	41,
	0,
	'::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000180002");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000180002");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"00000000-0000-0000-0000-000000180002");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"00000000-0000-0000-0000-000000180002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000180002",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	2240.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000180002");
INSERT INTO DIM_CON
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	2176.000000,
	1248.000000,
	"00000000-0000-0000-0000-000000180002");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180001",
	"00000000-0000-0000-0000-000000180001",
	42,
	0,
	'::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000180003",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000180003",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"c92d3e76-8858-d207-4e20-3b389a2092f6");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000180003",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000180004",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"c92d3e76-8858-d207-4e20-3b389a2092f6");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000180005",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180004",
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000180006",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180005",
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"2a78a21f-7600-0579-e460-c6973a3320c0");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000180007",
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000180006",
	"2a78a21f-7600-0579-e460-c6973a3320c0",
	"ba465ca1-66aa-3155-47f1-9a06f1ac0581");
INSERT INTO DIM_WAY
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	2240.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	2320.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9");
INSERT INTO DIM_WAY
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	2320.000000,
	1200.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"c92d3e76-8858-d207-4e20-3b389a2092f6");
INSERT INTO DIM_WAY
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	2176.000000,
	1200.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715");
INSERT INTO DIM_WAY
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	2176.000000,
	1248.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000",
	"2a78a21f-7600-0579-e460-c6973a3320c0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000180003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000180003",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000180003");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000180001",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100002",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	'no_parm_ret_void',
	'',
	"00000000-0000-0000-0000-000000080001",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100002",
	'i_parm_ret_i',
	'',
	"00000000-0000-0000-0000-000000080003",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	'i',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	'r_parm_ret_r',
	'',
	"00000000-0000-0000-0000-000000080004",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	'r',
	"00000000-0000-0000-0000-000000080004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100002",
	'b_parm_ret_b',
	'',
	"00000000-0000-0000-0000-000000080002",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100004",
	'b',
	"00000000-0000-0000-0000-000000080002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002",
	's_parm_ret_s',
	'',
	"00000000-0000-0000-0000-000000080005",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100005",
	's',
	"00000000-0000-0000-0000-000000080005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100002",
	'u_parm_ret_u',
	'',
	"00000000-0000-0000-0000-000000080006",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100006",
	'u',
	"00000000-0000-0000-0000-000000080006",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100002",
	'd_parm_ret_d',
	'',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100007",
	'd',
	"00000000-0000-0000-0000-00000008000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100002",
	't_parm_ret_t',
	'',
	"00000000-0000-0000-0000-00000008000f",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	't',
	"00000000-0000-0000-0000-00000008000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100002",
	'i_parm_ret_void',
	'',
	"00000000-0000-0000-0000-000000080001",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100009",
	'i',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100002",
	'waitOneSec',
	'',
	"00000000-0000-0000-0000-000000080001",
	0,
	'',
	1,
	'',
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100005",
	'i',
	'',
	'',
	'i',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100006",
	'r',
	'',
	'',
	'r',
	0,
	"00000000-0000-0000-0000-000000080004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	'd',
	'',
	'',
	'd',
	0,
	"00000000-0000-0000-0000-00000008000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100008",
	'u',
	'',
	'',
	'u',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100009",
	's',
	'',
	'',
	's',
	0,
	"00000000-0000-0000-0000-000000080005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000a",
	't',
	'',
	'',
	't',
	0,
	"00000000-0000-0000-0000-00000008000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000b",
	'tim',
	'',
	'',
	'tim',
	0,
	"00000000-0000-0000-0000-000000080010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000c",
	'ev',
	'',
	'',
	'ev',
	0,
	"00000000-0000-0000-0000-00000008000b",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000d",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000e",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"00000000-0000-0000-0000-000000080007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010000f",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100010",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"00000000-0000-0000-0000-000000080012",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100011",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"00000000-0000-0000-0000-000000080013",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100012",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"00000000-0000-0000-0000-000000080014",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100013",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"00000000-0000-0000-0000-000000080015",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100014",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100015",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100016",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100017",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100018",
	'r1s',
	'',
	'r1',
	's',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100019",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-00000010001b",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010001b",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001b",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010001a",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-00000010001c",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010001c",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001c",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010001b",
	'r1t',
	'',
	'r1',
	't',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-00000010001d",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010001d",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001d",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010001c",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-00000010001e",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010001e",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001e",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-00000010001d",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100002");
INSERT INTO SM_ISM
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO SM_SM
	VALUES ("00000000-0000-0000-0000-000000200004",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("00000000-0000-0000-0000-000000200004");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	'i',
	'',
	"00000000-0000-0000-0000-000000080003",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200014");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	'b',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	'r',
	'',
	"00000000-0000-0000-0000-000000080004",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200001");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	's',
	'',
	"00000000-0000-0000-0000-000000080005",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200003");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	'u',
	'',
	"00000000-0000-0000-0000-000000080006",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	'my_b',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	'my_i',
	'',
	"00000000-0000-0000-0000-000000080003",
	'',
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200006");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	'my_r',
	'',
	"00000000-0000-0000-0000-000000080004",
	'',
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200007");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	'my_s',
	'',
	"00000000-0000-0000-0000-000000080005",
	'',
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200008");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	'my_u',
	'',
	"00000000-0000-0000-0000-000000080006",
	'',
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200009");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200012");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	'tint1',
	'',
	"00000000-0000-0000-0000-000000080003",
	'',
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	'tint2',
	'',
	"00000000-0000-0000-0000-000000080003",
	'',
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	'treal1',
	'',
	"00000000-0000-0000-0000-000000080004",
	'',
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	'treal2',
	'',
	"00000000-0000-0000-0000-000000080004",
	'',
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	'd',
	'',
	"00000000-0000-0000-0000-00000008000e",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000200004",
	'ts',
	'',
	"00000000-0000-0000-0000-00000008000f",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200013");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200013",
	"00000000-0000-0000-0000-000000200004",
	'tim',
	'',
	"00000000-0000-0000-0000-000000080010",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000200014",
	"00000000-0000-0000-0000-000000200004",
	'ev',
	'',
	"00000000-0000-0000-0000-00000008000b",
	'',
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200011");
INSERT INTO SM_EVTDI
	VALUES ("bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9",
	"00000000-0000-0000-0000-000000200004",
	'i',
	'',
	"00000000-0000-0000-0000-000000080003",
	'',
	"00000000-0000-0000-0000-000000200004",
	"c92d3e76-8858-d207-4e20-3b389a2092f6");
INSERT INTO SM_EVTDI
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000200004",
	'b',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000200004",
	'r',
	'',
	"00000000-0000-0000-0000-000000080004",
	'',
	"00000000-0000-0000-0000-000000200004",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9");
INSERT INTO SM_EVTDI
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200004",
	's',
	'',
	"00000000-0000-0000-0000-000000080005",
	'',
	"00000000-0000-0000-0000-000000200004",
	"3ff88e2e-c1f4-dfd3-262b-7b909585c715");
INSERT INTO SM_EVTDI
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000200004",
	'u',
	'',
	"00000000-0000-0000-0000-000000080006",
	'',
	"00000000-0000-0000-0000-000000200004",
	"2a78a21f-7600-0579-e460-c6973a3320c0");
INSERT INTO SM_EVTDI
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200004",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000200004",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000200004",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000200004",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-00000020000d",
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97");
INSERT INTO SM_EVTDI
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-000000200004",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200010",
	"d9ea294c-aea4-d682-0ff4-88def146b7ac");
INSERT INTO SM_EVTDI
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-000000200004",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000200011",
	"988e775e-ce61-5730-15e0-2810b9ba93ed");
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200004",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200004",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200005");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200004",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200004",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200004",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200004",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_TAH
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001");
INSERT INTO SM_AH
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("c92d3e76-8858-d207-4e20-3b389a2092f6",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200002");
INSERT INTO SM_AH
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200003");
INSERT INTO SM_AH
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_AH
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200005");
INSERT INTO SM_AH
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200006");
INSERT INTO SM_AH
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200007");
INSERT INTO SM_AH
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200008");
INSERT INTO SM_AH
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200009");
INSERT INTO SM_AH
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000a");
INSERT INTO SM_AH
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO SM_AH
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO SM_AH
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO SM_AH
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO SM_AH
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO SM_AH
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200010");
INSERT INTO SM_AH
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000200004");
INSERT INTO SM_ACT
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000200004",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000200001",
	8,
	"00000000-0000-0000-0000-000000200004",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200001",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200002");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200002");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200002");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"00000000-0000-0000-0000-000000200002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200002",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	752.000000,
	1408.000000,
	"00000000-0000-0000-0000-000000200002");
INSERT INTO DIM_CON
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	784.000000,
	1360.000000,
	"00000000-0000-0000-0000-000000200002");
INSERT INTO DIM_CON
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	928.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000200002");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200002",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200003");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200003");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"00000000-0000-0000-0000-000000200003");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"00000000-0000-0000-0000-000000200003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200003",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	2128.000000,
	1616.000000,
	"00000000-0000-0000-0000-000000200003");
INSERT INTO DIM_CON
	VALUES ("e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	1712.000000,
	1568.000000,
	"00000000-0000-0000-0000-000000200003");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200003",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200004");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200004");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"00000000-0000-0000-0000-000000200004");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000200004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200004",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	2128.000000,
	1760.000000,
	"00000000-0000-0000-0000-000000200004");
INSERT INTO DIM_CON
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	2128.000000,
	1792.000000,
	"00000000-0000-0000-0000-000000200004");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200005");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200005");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200005");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"00000000-0000-0000-0000-000000200005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200005",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	2128.000000,
	1920.000000,
	"00000000-0000-0000-0000-000000200005");
INSERT INTO DIM_CON
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	2128.000000,
	1952.000000,
	"00000000-0000-0000-0000-000000200005");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200005",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200006");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200006");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200006");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000200006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200006",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	2592.000000,
	1632.000000,
	"00000000-0000-0000-0000-000000200006");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200006",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200007");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200007");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200007");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"00000000-0000-0000-0000-000000200007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200007",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	2128.000000,
	2048.000000,
	"00000000-0000-0000-0000-000000200007");
INSERT INTO DIM_CON
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	2128.000000,
	2080.000000,
	"00000000-0000-0000-0000-000000200007");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200007",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200008");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200008");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200008");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"00000000-0000-0000-0000-000000200008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200008",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	2400.000000,
	2080.000000,
	"00000000-0000-0000-0000-000000200008");
INSERT INTO DIM_CON
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	2608.000000,
	2016.000000,
	"00000000-0000-0000-0000-000000200008");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200008",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200009");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200009");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200009");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"00000000-0000-0000-0000-000000200009",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200009",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	2608.000000,
	1968.000000,
	"00000000-0000-0000-0000-000000200009");
INSERT INTO DIM_CON
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	2608.000000,
	1872.000000,
	"00000000-0000-0000-0000-000000200009");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200009",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000a");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000a");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"00000000-0000-0000-0000-00000020000a");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"00000000-0000-0000-0000-00000020000a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	2608.000000,
	1808.000000,
	"00000000-0000-0000-0000-00000020000a");
INSERT INTO DIM_CON
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	2592.000000,
	1712.000000,
	"00000000-0000-0000-0000-00000020000a");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000a",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000b");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000b");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"00000000-0000-0000-0000-00000020000b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	928.000000,
	1776.000000,
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO DIM_CON
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	928.000000,
	1680.000000,
	"00000000-0000-0000-0000-00000020000b");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000b",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000c");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000c");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"00000000-0000-0000-0000-00000020000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	928.000000,
	1840.000000,
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO DIM_CON
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	928.000000,
	1936.000000,
	"00000000-0000-0000-0000-00000020000c");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000c",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000d");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000d");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"00000000-0000-0000-0000-00000020000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	928.000000,
	2016.000000,
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO DIM_CON
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	1072.000000,
	2080.000000,
	"00000000-0000-0000-0000-00000020000d");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000d",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000e");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000e");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"00000000-0000-0000-0000-00000020000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	928.000000,
	1616.000000,
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO DIM_CON
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	928.000000,
	1536.000000,
	"00000000-0000-0000-0000-00000020000e");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000e",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000020000f");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000020000f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"00000000-0000-0000-0000-00000020000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020000f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	1280.000000,
	1376.000000,
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO DIM_CON
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	1424.000000,
	1456.000000,
	"00000000-0000-0000-0000-00000020000f");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000f",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200010");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200010");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200010");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"00000000-0000-0000-0000-000000200010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200010",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	1424.000000,
	1520.000000,
	"00000000-0000-0000-0000-000000200010");
INSERT INTO DIM_CON
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	1456.000000,
	1616.000000,
	"00000000-0000-0000-0000-000000200010");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200010",
	41,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000200011");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000200011");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"00000000-0000-0000-0000-000000200011");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000200011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200011",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	1456.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000200011");
INSERT INTO DIM_CON
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	1600.000000,
	1728.000000,
	"00000000-0000-0000-0000-000000200011");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200001",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200012",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2a78a21f-7600-0579-e460-c6973a3320c0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a78a21f-7600-0579-e460-c6973a3320c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000200012",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"ba465ca1-66aa-3155-47f1-9a06f1ac0581");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200012",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200013",
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000",
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"d9ea294c-aea4-d682-0ff4-88def146b7ac");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200014",
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000200013",
	"d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"988e775e-ce61-5730-15e0-2810b9ba93ed");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200015",
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000200014",
	"988e775e-ce61-5730-15e0-2810b9ba93ed",
	"31253fb7-3f56-622c-9eee-6c201626b016");
INSERT INTO DIM_WAY
	VALUES ("84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	2128.000000,
	1616.000000,
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	2176.000000,
	1616.000000,
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000",
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97");
INSERT INTO DIM_WAY
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	2176.000000,
	1760.000000,
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000",
	"d9ea294c-aea4-d682-0ff4-88def146b7ac");
INSERT INTO DIM_WAY
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	2128.000000,
	1760.000000,
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000",
	"988e775e-ce61-5730-15e0-2810b9ba93ed");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200012",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ff88e2e-c1f4-dfd3-262b-7b909585c715",
	"2a78a21f-7600-0579-e460-c6973a3320c0",
	"00000000-0000-0000-0000-000000200012");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200002",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000200016",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d9ea294c-aea4-d682-0ff4-88def146b7ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000200016",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"988e775e-ce61-5730-15e0-2810b9ba93ed");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("988e775e-ce61-5730-15e0-2810b9ba93ed",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000200016",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"31253fb7-3f56-622c-9eee-6c201626b016");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"31253fb7-3f56-622c-9eee-6c201626b016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200017",
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000",
	"9a068d04-7415-f476-0895-0bd32683e3e5",
	"d18678e7-7a62-6066-102c-c247b97d4b31");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200018",
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000200017",
	"d18678e7-7a62-6066-102c-c247b97d4b31",
	"d5087483-482b-d829-7c23-863e412d70dd");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200019",
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000200018",
	"d5087483-482b-d829-7c23-863e412d70dd",
	"f7ab182a-3921-1c53-177f-3394cc6779ba");
INSERT INTO DIM_WAY
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	2128.000000,
	1792.000000,
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	2176.000000,
	1792.000000,
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000",
	"9a068d04-7415-f476-0895-0bd32683e3e5");
INSERT INTO DIM_WAY
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	2176.000000,
	1920.000000,
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000",
	"d18678e7-7a62-6066-102c-c247b97d4b31");
INSERT INTO DIM_WAY
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	2128.000000,
	1920.000000,
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000",
	"d5087483-482b-d829-7c23-863e412d70dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200016",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ba465ca1-66aa-3155-47f1-9a06f1ac0581",
	"84e4dd7e-ecdf-f524-da5d-96a60dc69a97",
	"00000000-0000-0000-0000-000000200016");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200003",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-00000020001a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9a068d04-7415-f476-0895-0bd32683e3e5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9a068d04-7415-f476-0895-0bd32683e3e5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-00000020001a",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"d18678e7-7a62-6066-102c-c247b97d4b31");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"d18678e7-7a62-6066-102c-c247b97d4b31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-00000020001a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d5087483-482b-d829-7c23-863e412d70dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020001b",
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000",
	"0c38e943-6b26-9f55-6827-83bc62034339",
	"985d6049-933c-7bc8-402d-4cdce03bffc7");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020001c",
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-00000020001b",
	"985d6049-933c-7bc8-402d-4cdce03bffc7",
	"9e670860-8d7a-63c2-1030-f2c1108407f0");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020001d",
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-00000020001c",
	"9e670860-8d7a-63c2-1030-f2c1108407f0",
	"4ecfa162-d2cd-273e-4ce2-fe738ebc36e5");
INSERT INTO DIM_WAY
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	2128.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	2176.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000",
	"0c38e943-6b26-9f55-6827-83bc62034339");
INSERT INTO DIM_WAY
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	2176.000000,
	2048.000000,
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000",
	"985d6049-933c-7bc8-402d-4cdce03bffc7");
INSERT INTO DIM_WAY
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	2128.000000,
	2048.000000,
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000",
	"9e670860-8d7a-63c2-1030-f2c1108407f0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000020001a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020001a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d9ea294c-aea4-d682-0ff4-88def146b7ac",
	"988e775e-ce61-5730-15e0-2810b9ba93ed",
	"00000000-0000-0000-0000-00000020001a");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200004",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-00000020001e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f7ab182a-3921-1c53-177f-3394cc6779ba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-00000020001e",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"0c38e943-6b26-9f55-6827-83bc62034339");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-00000020001e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"985d6049-933c-7bc8-402d-4cdce03bffc7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020001f",
	"00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000000000",
	"61f02589-8424-8afc-c243-8f8ba696dad6",
	"a2fa3ff4-c711-7d41-d939-3f50f599c021");
INSERT INTO DIM_WAY
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	2128.000000,
	2080.000000,
	"00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	2400.000000,
	2080.000000,
	"00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000000000",
	"61f02589-8424-8afc-c243-8f8ba696dad6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000020001e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020001e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("31253fb7-3f56-622c-9eee-6c201626b016",
	"9a068d04-7415-f476-0895-0bd32683e3e5",
	"00000000-0000-0000-0000-00000020001e");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200005",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000200020",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9e670860-8d7a-63c2-1030-f2c1108407f0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000200020",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"4ecfa162-d2cd-273e-4ce2-fe738ebc36e5");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000200020",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"61f02589-8424-8afc-c243-8f8ba696dad6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200021",
	"00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000000000",
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"d3ceb4ea-b740-d9cd-8028-19b5b039a2ef");
INSERT INTO DIM_WAY
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	2608.000000,
	2016.000000,
	"00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	2608.000000,
	1968.000000,
	"00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000000000",
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200020",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200020",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d18678e7-7a62-6066-102c-c247b97d4b31",
	"d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000200020");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200006",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000200022",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a2fa3ff4-c711-7d41-d939-3f50f599c021");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000200022",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000200022",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d3ceb4ea-b740-d9cd-8028-19b5b039a2ef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200023",
	"00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000000000",
	"5be46710-7a2e-8911-a152-3123430f6f56",
	"56725b61-db05-8a4c-6354-9c6ebeabd621");
INSERT INTO DIM_WAY
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	2608.000000,
	1872.000000,
	"00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	2608.000000,
	1808.000000,
	"00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000000000",
	"5be46710-7a2e-8911-a152-3123430f6f56");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200022",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200022",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000200022");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200007",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000200024",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5be46710-7a2e-8911-a152-3123430f6f56");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000200024",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"56725b61-db05-8a4c-6354-9c6ebeabd621");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-000000200024",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200025",
	"00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000000000",
	"c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b");
INSERT INTO DIM_WAY
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	2592.000000,
	1712.000000,
	"00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	2592.000000,
	1632.000000,
	"00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000000000",
	"c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200024",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200024",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000200024");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200008",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"00000000-0000-0000-0000-000000200026",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000200026",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"62ee6164-48fa-8dc9-50ab-21816da54bb3");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	"00000000-0000-0000-0000-000000200026",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2c08e448-3dd6-4fcd-ba58-036675239e35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2c08e448-3dd6-4fcd-ba58-036675239e35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200027",
	"00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000000000",
	"62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"2c08e448-3dd6-4fcd-ba58-036675239e35");
INSERT INTO DIM_WAY
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	928.000000,
	1776.000000,
	"00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	928.000000,
	1840.000000,
	"00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000000000",
	"62ee6164-48fa-8dc9-50ab-21816da54bb3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200026",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200026",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000200026");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200009",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000200028",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"58b7adbb-5874-4e3f-8b45-e25910e91603");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	"00000000-0000-0000-0000-000000200028",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"6128bdb4-ee83-2945-9285-2bf4653659fb");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"6128bdb4-ee83-2945-9285-2bf4653659fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000200028",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7d9d671e-5379-9d67-1344-af81bc8136a0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200029",
	"00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000000000",
	"58b7adbb-5874-4e3f-8b45-e25910e91603",
	"6128bdb4-ee83-2945-9285-2bf4653659fb");
INSERT INTO DIM_WAY
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	928.000000,
	1936.000000,
	"00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	928.000000,
	2016.000000,
	"00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000000000",
	"58b7adbb-5874-4e3f-8b45-e25910e91603");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200028",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200028",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000200028");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000a",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"00000000-0000-0000-0000-00000020002a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a89f180d-b0dd-a98a-e613-d4a09ad9ed95");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-00000020002a",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"badfa733-4fcd-1a86-4c05-684418a8aa54");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"00000000-0000-0000-0000-00000020002a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4539a0cd-44ac-ef97-f749-397fcb86aa18");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020002b",
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"7d9d671e-5379-9d67-1344-af81bc8136a0",
	"a89f180d-b0dd-a98a-e613-d4a09ad9ed95");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020002c",
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-00000020002b",
	"a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"badfa733-4fcd-1a86-4c05-684418a8aa54");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020002d",
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-00000020002c",
	"badfa733-4fcd-1a86-4c05-684418a8aa54",
	"4539a0cd-44ac-ef97-f749-397fcb86aa18");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020002e",
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-00000020002d",
	"4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"e9b63ad3-f843-6dc7-e229-4313c55d9a95");
INSERT INTO DIM_WAY
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	752.000000,
	1408.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	624.000000,
	1408.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"7d9d671e-5379-9d67-1344-af81bc8136a0");
INSERT INTO DIM_WAY
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	624.000000,
	1328.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"a89f180d-b0dd-a98a-e613-d4a09ad9ed95");
INSERT INTO DIM_WAY
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	784.000000,
	1328.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"badfa733-4fcd-1a86-4c05-684418a8aa54");
INSERT INTO DIM_WAY
	VALUES ("e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	784.000000,
	1360.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000",
	"4539a0cd-44ac-ef97-f749-397fcb86aa18");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000020002a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020002a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-00000020002a");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000b",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	"00000000-0000-0000-0000-00000020002f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e9b63ad3-f843-6dc7-e229-4313c55d9a95");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("abd3b10f-5410-64f8-0a64-85fc5748ac35",
	"00000000-0000-0000-0000-00000020002f",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"abd3b10f-5410-64f8-0a64-85fc5748ac35");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"abd3b10f-5410-64f8-0a64-85fc5748ac35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("abd3b10f-5410-64f8-0a64-85fc5748ac35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("53aee2fa-a19e-a8e5-8965-12099dd03dac",
	"00000000-0000-0000-0000-00000020002f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"53aee2fa-a19e-a8e5-8965-12099dd03dac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"53aee2fa-a19e-a8e5-8965-12099dd03dac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("53aee2fa-a19e-a8e5-8965-12099dd03dac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200030",
	"00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000000000",
	"abd3b10f-5410-64f8-0a64-85fc5748ac35",
	"53aee2fa-a19e-a8e5-8965-12099dd03dac");
INSERT INTO DIM_WAY
	VALUES ("abd3b10f-5410-64f8-0a64-85fc5748ac35",
	928.000000,
	1616.000000,
	"00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("53aee2fa-a19e-a8e5-8965-12099dd03dac",
	928.000000,
	1680.000000,
	"00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000000000",
	"abd3b10f-5410-64f8-0a64-85fc5748ac35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000020002f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020002f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-00000020002f");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000c",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("535de919-5099-ba50-5cf7-f22437b73801",
	"00000000-0000-0000-0000-000000200031",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"535de919-5099-ba50-5cf7-f22437b73801");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"535de919-5099-ba50-5cf7-f22437b73801",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("535de919-5099-ba50-5cf7-f22437b73801",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	"00000000-0000-0000-0000-000000200031",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"fdc4d242-b524-ff74-d7e9-dde0bcadb375");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	"00000000-0000-0000-0000-000000200031",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"836c17a2-2f81-d2f5-38d1-74159c9e4c97");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200032",
	"00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000000000",
	"535de919-5099-ba50-5cf7-f22437b73801",
	"fdc4d242-b524-ff74-d7e9-dde0bcadb375");
INSERT INTO DIM_WAY
	VALUES ("535de919-5099-ba50-5cf7-f22437b73801",
	928.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	928.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000000000",
	"535de919-5099-ba50-5cf7-f22437b73801");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200031",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200031",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000200031");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000d",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	"00000000-0000-0000-0000-000000200033",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("70bbd8e5-4f6b-645d-152e-26332c906ae1",
	"00000000-0000-0000-0000-000000200033",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"70bbd8e5-4f6b-645d-152e-26332c906ae1");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"70bbd8e5-4f6b-645d-152e-26332c906ae1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70bbd8e5-4f6b-645d-152e-26332c906ae1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	"00000000-0000-0000-0000-000000200033",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0e2e6e7f-aa24-8177-bc93-49032c49f1ab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200034",
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000",
	"836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200035",
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000200034",
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	"70bbd8e5-4f6b-645d-152e-26332c906ae1");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200036",
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000200035",
	"70bbd8e5-4f6b-645d-152e-26332c906ae1",
	"0e2e6e7f-aa24-8177-bc93-49032c49f1ab");
INSERT INTO DIM_WAY
	VALUES ("836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	1072.000000,
	2080.000000,
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	1168.000000,
	2080.000000,
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000",
	"836c17a2-2f81-d2f5-38d1-74159c9e4c97");
INSERT INTO DIM_WAY
	VALUES ("70bbd8e5-4f6b-645d-152e-26332c906ae1",
	1168.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000",
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4");
INSERT INTO DIM_WAY
	VALUES ("0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	1280.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000",
	"70bbd8e5-4f6b-645d-152e-26332c906ae1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200033",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200033",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	"58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000200033");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000e",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2a855418-1a5d-6925-956c-d0448d1ca656",
	"00000000-0000-0000-0000-000000200037",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2a855418-1a5d-6925-956c-d0448d1ca656");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2a855418-1a5d-6925-956c-d0448d1ca656",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a855418-1a5d-6925-956c-d0448d1ca656",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8d532d88-ca1d-058b-0598-a03472402576",
	"00000000-0000-0000-0000-000000200037",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"8d532d88-ca1d-058b-0598-a03472402576");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"8d532d88-ca1d-058b-0598-a03472402576",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8d532d88-ca1d-058b-0598-a03472402576",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b52a36e4-39cf-9461-cade-3878e606f3da",
	"00000000-0000-0000-0000-000000200037",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b52a36e4-39cf-9461-cade-3878e606f3da");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b52a36e4-39cf-9461-cade-3878e606f3da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b52a36e4-39cf-9461-cade-3878e606f3da",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000200038",
	"00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000000000",
	"2a855418-1a5d-6925-956c-d0448d1ca656",
	"8d532d88-ca1d-058b-0598-a03472402576");
INSERT INTO DIM_WAY
	VALUES ("2a855418-1a5d-6925-956c-d0448d1ca656",
	1424.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8d532d88-ca1d-058b-0598-a03472402576",
	1424.000000,
	1520.000000,
	"00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000000000",
	"2a855418-1a5d-6925-956c-d0448d1ca656");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200037",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	"7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000200037");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-00000020000f",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	"00000000-0000-0000-0000-000000200039",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fdeb8fe4-aade-eac0-4b52-fa3b036d32ee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	"00000000-0000-0000-0000-000000200039",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"ba4f5a7b-b713-c28e-2461-0259ec9035d6");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5a538f71-bad6-43ff-86aa-3e257afa1baf",
	"00000000-0000-0000-0000-000000200039",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5a538f71-bad6-43ff-86aa-3e257afa1baf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5a538f71-bad6-43ff-86aa-3e257afa1baf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5a538f71-bad6-43ff-86aa-3e257afa1baf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020003a",
	"00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000000000",
	"b52a36e4-39cf-9461-cade-3878e606f3da",
	"fdeb8fe4-aade-eac0-4b52-fa3b036d32ee");
INSERT INTO DIM_WAY
	VALUES ("b52a36e4-39cf-9461-cade-3878e606f3da",
	1456.000000,
	1616.000000,
	"00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	1456.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000000000",
	"b52a36e4-39cf-9461-cade-3878e606f3da");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000200039",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000200039",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-000000200039");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000200001",
	"00000000-0000-0000-0000-000000200010",
	42,
	0,
	'::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e9f51672-8643-1116-86f5-a8342b9015a6",
	"00000000-0000-0000-0000-00000020003b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e9f51672-8643-1116-86f5-a8342b9015a6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e9f51672-8643-1116-86f5-a8342b9015a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9f51672-8643-1116-86f5-a8342b9015a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("aad1e52b-3aac-3f69-940f-ccce4976b74f",
	"00000000-0000-0000-0000-00000020003b",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"aad1e52b-3aac-3f69-940f-ccce4976b74f");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"aad1e52b-3aac-3f69-940f-ccce4976b74f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aad1e52b-3aac-3f69-940f-ccce4976b74f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	"00000000-0000-0000-0000-00000020003b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b90d50a5-000d-0c86-b06f-b0fbb38c00d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020003c",
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000",
	"ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	"5a538f71-bad6-43ff-86aa-3e257afa1baf");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020003d",
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-00000020003c",
	"5a538f71-bad6-43ff-86aa-3e257afa1baf",
	"e9f51672-8643-1116-86f5-a8342b9015a6");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000020003e",
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-00000020003d",
	"e9f51672-8643-1116-86f5-a8342b9015a6",
	"aad1e52b-3aac-3f69-940f-ccce4976b74f");
INSERT INTO DIM_WAY
	VALUES ("ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	1600.000000,
	1728.000000,
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5a538f71-bad6-43ff-86aa-3e257afa1baf",
	1648.000000,
	1728.000000,
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000",
	"ba4f5a7b-b713-c28e-2461-0259ec9035d6");
INSERT INTO DIM_WAY
	VALUES ("e9f51672-8643-1116-86f5-a8342b9015a6",
	1648.000000,
	1568.000000,
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000",
	"5a538f71-bad6-43ff-86aa-3e257afa1baf");
INSERT INTO DIM_WAY
	VALUES ("aad1e52b-3aac-3f69-940f-ccce4976b74f",
	1712.000000,
	1568.000000,
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000",
	"e9f51672-8643-1116-86f5-a8342b9015a6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000020003b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000020003b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"e9b63ad3-f843-6dc7-e229-4313c55d9a95",
	"00000000-0000-0000-0000-00000020003b");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000200001",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100003",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010001f",
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010001f",
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010001f",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100020",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100020",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100020",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-00000010001f",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100021",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100021",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100021",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100020",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010001f",
	"00000000-0000-0000-0000-000000100003",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100003");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100004",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100022",
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100022",
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100022",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100023",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100023",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100023",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100022",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100022",
	"00000000-0000-0000-0000-000000100004",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100004");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100005",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100024",
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100024",
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100024",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100025",
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100025",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100025",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100024",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100024",
	"00000000-0000-0000-0000-000000100005",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100005");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100006",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_TFR
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100006",
	'i_parm_ret_i',
	'',
	"00000000-0000-0000-0000-000000080003",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010000b",
	'i',
	"00000000-0000-0000-0000-000000080003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100026",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100026",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100026",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100027",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100027",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100027",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100026",
	'b',
	'',
	'',
	'b',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100028",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100028",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100028",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100027",
	'i',
	'',
	'',
	'i',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100029",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100029",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100029",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100028",
	'r',
	'',
	'',
	'r',
	0,
	"00000000-0000-0000-0000-000000080004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002a",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002a",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002a",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000100029",
	's',
	'',
	'',
	's',
	0,
	"00000000-0000-0000-0000-000000080005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002b",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002b",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002b",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010002a",
	'u',
	'',
	'',
	'u',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100026",
	"00000000-0000-0000-0000-000000100006",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100006");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100007",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010002c",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010002d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010002e",
	'r',
	'',
	'',
	'r',
	0,
	"00000000-0000-0000-0000-000000080004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010002f",
	's',
	'',
	'',
	's',
	0,
	"00000000-0000-0000-0000-000000080005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100030",
	'u',
	'',
	'',
	'u',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100031",
	'd',
	'',
	'',
	'd',
	0,
	"00000000-0000-0000-0000-00000008000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100032",
	't',
	'',
	'',
	't',
	0,
	"00000000-0000-0000-0000-00000008000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100033",
	'tim',
	'',
	'',
	'tim',
	0,
	"00000000-0000-0000-0000-000000080010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100034",
	'ev',
	'',
	'',
	'ev',
	0,
	"00000000-0000-0000-0000-00000008000b",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100035",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100037",
	"00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100037",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100037",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100036",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100037",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100039",
	"00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100039",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100039",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100038",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100039",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003b",
	"00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003b",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003b",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003a",
	'r6s',
	'',
	'r6',
	's',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003b",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003d",
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003d",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003d",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003c",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003d",
	'r6t',
	'',
	'r6',
	't',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010003f",
	"00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010003f",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010003f",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003e",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010003f",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100007");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100008",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100041",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100042",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100043",
	'r',
	'',
	'',
	'r',
	0,
	"00000000-0000-0000-0000-000000080004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100044",
	's',
	'',
	'',
	's',
	0,
	"00000000-0000-0000-0000-000000080005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100045",
	'u',
	'',
	'',
	'u',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100046",
	'd',
	'',
	'',
	'd',
	0,
	"00000000-0000-0000-0000-00000008000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100047",
	't',
	'',
	'',
	't',
	0,
	"00000000-0000-0000-0000-00000008000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100048",
	'tim',
	'',
	'',
	'tim',
	0,
	"00000000-0000-0000-0000-000000080010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100049",
	'ev',
	'',
	'',
	'ev',
	0,
	"00000000-0000-0000-0000-00000008000b",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100008");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-000000100009",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010004c",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010004c",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004c",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010004b",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010004d",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010004d",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004d",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010004c",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010000a",
	0,
	"00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-00000010004e",
	"00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010004e",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004e",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010004d",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010000a",
	0,
	"00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-00000010004f",
	"00000000-0000-0000-0000-00000010001b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010004f",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010004f",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010004e",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100050",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100050",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100050",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-00000010004f",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"00000000-0000-0000-0000-000000080007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO SM_ISM
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO SM_SM
	VALUES ("00000000-0000-0000-0000-000000280005",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("00000000-0000-0000-0000-000000280005");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280001");
INSERT INTO SM_EVTDI
	VALUES ("d5087483-482b-d829-7c23-863e412d70dd",
	"00000000-0000-0000-0000-000000280005",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f7ab182a-3921-1c53-177f-3394cc6779ba",
	"00000000-0000-0000-0000-000000280005",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("0c38e943-6b26-9f55-6827-83bc62034339",
	"00000000-0000-0000-0000-000000280005",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("985d6049-933c-7bc8-402d-4cdce03bffc7",
	"00000000-0000-0000-0000-000000280005",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280001",
	"d5087483-482b-d829-7c23-863e412d70dd");
INSERT INTO SM_EVTDI
	VALUES ("9e670860-8d7a-63c2-1030-f2c1108407f0",
	"00000000-0000-0000-0000-000000280005",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280002",
	"f7ab182a-3921-1c53-177f-3394cc6779ba");
INSERT INTO SM_EVTDI
	VALUES ("4ecfa162-d2cd-273e-4ce2-fe738ebc36e5",
	"00000000-0000-0000-0000-000000280005",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080002",
	'',
	"00000000-0000-0000-0000-000000280003",
	"0c38e943-6b26-9f55-6827-83bc62034339");
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280005",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280005",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280004");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280005",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280006");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280005",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_TAH
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001");
INSERT INTO SM_AH
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280002");
INSERT INTO SM_AH
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280003");
INSERT INTO SM_AH
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280004");
INSERT INTO SM_AH
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_AH
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280006");
INSERT INTO SM_AH
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000280005");
INSERT INTO SM_ACT
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000280005",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000280001",
	8,
	"00000000-0000-0000-0000-000000280005",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280001",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280002");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280002");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280002");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"00000000-0000-0000-0000-000000280002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280002",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("abd3b10f-5410-64f8-0a64-85fc5748ac35",
	2064.000000,
	1312.000000,
	"00000000-0000-0000-0000-000000280002");
INSERT INTO DIM_CON
	VALUES ("53aee2fa-a19e-a8e5-8965-12099dd03dac",
	1968.000000,
	1280.000000,
	"00000000-0000-0000-0000-000000280002");
INSERT INTO DIM_CON
	VALUES ("836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	1968.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000280002");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280002",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280003");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280003");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280003");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280003",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("535de919-5099-ba50-5cf7-f22437b73801",
	2064.000000,
	1712.000000,
	"00000000-0000-0000-0000-000000280003");
INSERT INTO DIM_CON
	VALUES ("0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	1968.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280003");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280003",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280004");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280004");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280004");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"00000000-0000-0000-0000-000000280004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280004",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	2320.000000,
	1280.000000,
	"00000000-0000-0000-0000-000000280004");
INSERT INTO DIM_CON
	VALUES ("2a855418-1a5d-6925-956c-d0448d1ca656",
	2320.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000280004");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280004",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280005");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280005");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280005");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280005",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	2320.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280005");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280006");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280006");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280006");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280006",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	1968.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280006");
INSERT INTO DIM_CON
	VALUES ("70bbd8e5-4f6b-645d-152e-26332c906ae1",
	1968.000000,
	1568.000000,
	"00000000-0000-0000-0000-000000280006");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280007",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280006",
	41,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000280007");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000280007");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"00000000-0000-0000-0000-000000280007");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280007",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8d532d88-ca1d-058b-0598-a03472402576",
	2320.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280007");
INSERT INTO DIM_CON
	VALUES ("b52a36e4-39cf-9461-cade-3878e606f3da",
	2320.000000,
	1568.000000,
	"00000000-0000-0000-0000-000000280007");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280001",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9779bd61-b45d-c989-080b-637d409d5a23",
	"00000000-0000-0000-0000-000000280008",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9779bd61-b45d-c989-080b-637d409d5a23");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9779bd61-b45d-c989-080b-637d409d5a23",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9779bd61-b45d-c989-080b-637d409d5a23",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	"00000000-0000-0000-0000-000000280008",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"3ea3c0b6-5313-7314-42f7-fb9b229608c7");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10230607-e6ec-a227-1390-692fdd6e7a92",
	"00000000-0000-0000-0000-000000280008",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"10230607-e6ec-a227-1390-692fdd6e7a92");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"10230607-e6ec-a227-1390-692fdd6e7a92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10230607-e6ec-a227-1390-692fdd6e7a92",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280009",
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	"9779bd61-b45d-c989-080b-637d409d5a23");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000028000a",
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000280009",
	"9779bd61-b45d-c989-080b-637d409d5a23",
	"3ea3c0b6-5313-7314-42f7-fb9b229608c7");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000028000b",
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-00000028000a",
	"3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	"10230607-e6ec-a227-1390-692fdd6e7a92");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000028000c",
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-00000028000b",
	"10230607-e6ec-a227-1390-692fdd6e7a92",
	"499857d5-35ca-138f-f98d-427c085f5d7f");
INSERT INTO DIM_WAY
	VALUES ("b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	2064.000000,
	1312.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9779bd61-b45d-c989-080b-637d409d5a23",
	2128.000000,
	1312.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"b90d50a5-000d-0c86-b06f-b0fbb38c00d2");
INSERT INTO DIM_WAY
	VALUES ("3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	2128.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"9779bd61-b45d-c989-080b-637d409d5a23");
INSERT INTO DIM_WAY
	VALUES ("10230607-e6ec-a227-1390-692fdd6e7a92",
	1968.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"3ea3c0b6-5313-7314-42f7-fb9b229608c7");
INSERT INTO DIM_WAY
	VALUES ("499857d5-35ca-138f-f98d-427c085f5d7f",
	1968.000000,
	1280.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000",
	"10230607-e6ec-a227-1390-692fdd6e7a92");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000280008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280008",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("abd3b10f-5410-64f8-0a64-85fc5748ac35",
	"53aee2fa-a19e-a8e5-8965-12099dd03dac",
	"00000000-0000-0000-0000-000000280008");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280002",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("499857d5-35ca-138f-f98d-427c085f5d7f",
	"00000000-0000-0000-0000-00000028000d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"499857d5-35ca-138f-f98d-427c085f5d7f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"499857d5-35ca-138f-f98d-427c085f5d7f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("499857d5-35ca-138f-f98d-427c085f5d7f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	"00000000-0000-0000-0000-00000028000d",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("27682bd4-fbbf-d04d-3848-c84e2401cd72",
	"00000000-0000-0000-0000-00000028000d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"27682bd4-fbbf-d04d-3848-c84e2401cd72");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"27682bd4-fbbf-d04d-3848-c84e2401cd72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("27682bd4-fbbf-d04d-3848-c84e2401cd72",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000028000e",
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	"27682bd4-fbbf-d04d-3848-c84e2401cd72");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000028000f",
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-00000028000e",
	"27682bd4-fbbf-d04d-3848-c84e2401cd72",
	"7be9d9e7-e31b-d948-b029-5a2506306d62");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280010",
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-00000028000f",
	"7be9d9e7-e31b-d948-b029-5a2506306d62",
	"74e01a6e-88a5-f806-f8af-793d0640222a");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280011",
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000280010",
	"74e01a6e-88a5-f806-f8af-793d0640222a",
	"0f8ea5b8-fa42-34dc-336b-499a0d54ea27");
INSERT INTO DIM_WAY
	VALUES ("f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	2064.000000,
	1712.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("27682bd4-fbbf-d04d-3848-c84e2401cd72",
	2192.000000,
	1712.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4");
INSERT INTO DIM_WAY
	VALUES ("7be9d9e7-e31b-d948-b029-5a2506306d62",
	2192.000000,
	1232.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"27682bd4-fbbf-d04d-3848-c84e2401cd72");
INSERT INTO DIM_WAY
	VALUES ("74e01a6e-88a5-f806-f8af-793d0640222a",
	2320.000000,
	1232.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"7be9d9e7-e31b-d948-b029-5a2506306d62");
INSERT INTO DIM_WAY
	VALUES ("0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	2320.000000,
	1280.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000",
	"74e01a6e-88a5-f806-f8af-793d0640222a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000028000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000028000d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("535de919-5099-ba50-5cf7-f22437b73801",
	"fdc4d242-b524-ff74-d7e9-dde0bcadb375",
	"00000000-0000-0000-0000-00000028000d");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280004",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7be9d9e7-e31b-d948-b029-5a2506306d62",
	"00000000-0000-0000-0000-000000280012",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7be9d9e7-e31b-d948-b029-5a2506306d62");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7be9d9e7-e31b-d948-b029-5a2506306d62",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7be9d9e7-e31b-d948-b029-5a2506306d62",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("74e01a6e-88a5-f806-f8af-793d0640222a",
	"00000000-0000-0000-0000-000000280012",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"74e01a6e-88a5-f806-f8af-793d0640222a");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"74e01a6e-88a5-f806-f8af-793d0640222a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("74e01a6e-88a5-f806-f8af-793d0640222a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	"00000000-0000-0000-0000-000000280012",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0f8ea5b8-fa42-34dc-336b-499a0d54ea27");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280013",
	"00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000000000",
	"7ce7958c-6b30-c8ab-b74b-669386211e32",
	"87dac1ba-0c57-513c-f689-1e9d08e13bfe");
INSERT INTO DIM_WAY
	VALUES ("7ce7958c-6b30-c8ab-b74b-669386211e32",
	1968.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	1968.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000000000",
	"7ce7958c-6b30-c8ab-b74b-669386211e32");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000280012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280012",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("836c17a2-2f81-d2f5-38d1-74159c9e4c97",
	"0d7643d2-96bc-b3b1-afa4-e5be689672e4",
	"00000000-0000-0000-0000-000000280012");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280003",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7ce7958c-6b30-c8ab-b74b-669386211e32",
	"00000000-0000-0000-0000-000000280014",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7ce7958c-6b30-c8ab-b74b-669386211e32");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7ce7958c-6b30-c8ab-b74b-669386211e32",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ce7958c-6b30-c8ab-b74b-669386211e32",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	"00000000-0000-0000-0000-000000280014",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"87dac1ba-0c57-513c-f689-1e9d08e13bfe");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b9281f80-c60e-e44f-85ac-f22548fa016c",
	"00000000-0000-0000-0000-000000280014",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b9281f80-c60e-e44f-85ac-f22548fa016c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b9281f80-c60e-e44f-85ac-f22548fa016c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b9281f80-c60e-e44f-85ac-f22548fa016c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280015",
	"00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000000000",
	"b9281f80-c60e-e44f-85ac-f22548fa016c",
	"716cee8f-d3d7-5cc2-6235-007ded3bf83f");
INSERT INTO DIM_WAY
	VALUES ("b9281f80-c60e-e44f-85ac-f22548fa016c",
	1968.000000,
	1568.000000,
	"00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	1968.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000000000",
	"b9281f80-c60e-e44f-85ac-f22548fa016c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000280014",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280014",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("70bbd8e5-4f6b-645d-152e-26332c906ae1",
	"0e2e6e7f-aa24-8177-bc93-49032c49f1ab",
	"00000000-0000-0000-0000-000000280014");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280006",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	"00000000-0000-0000-0000-000000280016",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"716cee8f-d3d7-5cc2-6235-007ded3bf83f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	"00000000-0000-0000-0000-000000280016",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"d699f5d5-bb27-c9be-645b-3c0038e5fe4b");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("52247c6f-1750-f3cb-270e-45b15a2fef04",
	"00000000-0000-0000-0000-000000280016",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"52247c6f-1750-f3cb-270e-45b15a2fef04");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"52247c6f-1750-f3cb-270e-45b15a2fef04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("52247c6f-1750-f3cb-270e-45b15a2fef04",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280017",
	"00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000000000",
	"d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	"52247c6f-1750-f3cb-270e-45b15a2fef04");
INSERT INTO DIM_WAY
	VALUES ("d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	2320.000000,
	1376.000000,
	"00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("52247c6f-1750-f3cb-270e-45b15a2fef04",
	2320.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000000000",
	"d699f5d5-bb27-c9be-645b-3c0038e5fe4b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000280016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280016",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2a855418-1a5d-6925-956c-d0448d1ca656",
	"8d532d88-ca1d-058b-0598-a03472402576",
	"00000000-0000-0000-0000-000000280016");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000280001",
	"00000000-0000-0000-0000-000000280005",
	42,
	0,
	'::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("20c49080-4708-82e1-3ff6-2fedf526e055",
	"00000000-0000-0000-0000-000000280018",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"20c49080-4708-82e1-3ff6-2fedf526e055");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"20c49080-4708-82e1-3ff6-2fedf526e055",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("20c49080-4708-82e1-3ff6-2fedf526e055",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("39966476-003e-1552-95eb-c252ff00ef6f",
	"00000000-0000-0000-0000-000000280018",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"39966476-003e-1552-95eb-c252ff00ef6f");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"39966476-003e-1552-95eb-c252ff00ef6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("39966476-003e-1552-95eb-c252ff00ef6f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("51460d73-84fb-1a81-95db-8118e611f551",
	"00000000-0000-0000-0000-000000280018",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"51460d73-84fb-1a81-95db-8118e611f551");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"51460d73-84fb-1a81-95db-8118e611f551",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("51460d73-84fb-1a81-95db-8118e611f551",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000280019",
	"00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000000000",
	"20c49080-4708-82e1-3ff6-2fedf526e055",
	"39966476-003e-1552-95eb-c252ff00ef6f");
INSERT INTO DIM_WAY
	VALUES ("20c49080-4708-82e1-3ff6-2fedf526e055",
	2320.000000,
	1568.000000,
	"00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("39966476-003e-1552-95eb-c252ff00ef6f",
	2320.000000,
	1680.000000,
	"00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000000000",
	"20c49080-4708-82e1-3ff6-2fedf526e055");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000280018",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000280018",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b52a36e4-39cf-9461-cade-3878e606f3da",
	"fdeb8fe4-aade-eac0-4b52-fa3b036d32ee",
	"00000000-0000-0000-0000-000000280018");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000280001",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000a",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100051",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100009",
	0,
	"00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000100053",
	"00000000-0000-0000-0000-00000010001c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100053",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100053",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100052",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010000b",
	0,
	"00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100054",
	"00000000-0000-0000-0000-00000010001d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100054",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100054",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100053",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010000b",
	0,
	"00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100055",
	"00000000-0000-0000-0000-00000010001e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100055",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100055",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100054",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000b",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100056",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000c",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100059",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100059",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100059",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100058",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010005a",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010005a",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005a",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100059",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000d",
	0,
	"00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-00000010005b",
	"00000000-0000-0000-0000-00000010001f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010005b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005b",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010005a",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000d",
	0,
	"00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-00000010005c",
	"00000000-0000-0000-0000-000000100020",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-00000010005c",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005c",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010005b",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010005d",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010005d",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005d",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010005c",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"00000000-0000-0000-0000-000000080007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO SM_ISM
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO SM_SM
	VALUES ("00000000-0000-0000-0000-000000300006",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("00000000-0000-0000-0000-000000300006");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300001");
INSERT INTO SM_EVTDI
	VALUES ("61f02589-8424-8afc-c243-8f8ba696dad6",
	"00000000-0000-0000-0000-000000300006",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("a2fa3ff4-c711-7d41-d939-3f50f599c021",
	"00000000-0000-0000-0000-000000300006",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d47ed687-6c8b-1206-fb61-3250b67c2c4f",
	"00000000-0000-0000-0000-000000300006",
	'tfalse',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d3ceb4ea-b740-d9cd-8028-19b5b039a2ef",
	"00000000-0000-0000-0000-000000300006",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300001",
	"61f02589-8424-8afc-c243-8f8ba696dad6");
INSERT INTO SM_EVTDI
	VALUES ("5be46710-7a2e-8911-a152-3123430f6f56",
	"00000000-0000-0000-0000-000000300006",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300002",
	"a2fa3ff4-c711-7d41-d939-3f50f599c021");
INSERT INTO SM_EVTDI
	VALUES ("56725b61-db05-8a4c-6354-9c6ebeabd621",
	"00000000-0000-0000-0000-000000300006",
	'ttrue',
	'',
	"00000000-0000-0000-0000-000000080011",
	'',
	"00000000-0000-0000-0000-000000300003",
	"d47ed687-6c8b-1206-fb61-3250b67c2c4f");
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300006",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300006",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300006",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300005");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300006",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'');
INSERT INTO SM_TAH
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001");
INSERT INTO SM_AH
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("c2d2b3f4-2c66-b014-11b4-145e2dc2c9c1",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300002");
INSERT INTO SM_AH
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("e03ff08f-c311-8ae6-a3eb-b30fa2eddb6b",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300003");
INSERT INTO SM_AH
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("62ee6164-48fa-8dc9-50ab-21816da54bb3",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300004");
INSERT INTO SM_AH
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("2c08e448-3dd6-4fcd-ba58-036675239e35",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300005");
INSERT INTO SM_AH
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("58b7adbb-5874-4e3f-8b45-e25910e91603",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_AH
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	"00000000-0000-0000-0000-000000300006");
INSERT INTO SM_ACT
	VALUES ("6128bdb4-ee83-2945-9285-2bf4653659fb",
	"00000000-0000-0000-0000-000000300006",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000300001",
	8,
	"00000000-0000-0000-0000-000000300006",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300001",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300002");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300002");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"00000000-0000-0000-0000-000000300002");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"00000000-0000-0000-0000-000000300002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300002",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	1872.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300002");
INSERT INTO DIM_CON
	VALUES ("5a538f71-bad6-43ff-86aa-3e257afa1baf",
	1824.000000,
	1264.000000,
	"00000000-0000-0000-0000-000000300002");
INSERT INTO DIM_CON
	VALUES ("e9f51672-8643-1116-86f5-a8342b9015a6",
	1792.000000,
	1344.000000,
	"00000000-0000-0000-0000-000000300002");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300002",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300003");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300003");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"00000000-0000-0000-0000-000000300003");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000300003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300003",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("aad1e52b-3aac-3f69-940f-ccce4976b74f",
	1792.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000300003");
INSERT INTO DIM_CON
	VALUES ("b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	1792.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000300003");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300003",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300004");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300004");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"00000000-0000-0000-0000-000000300004");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"00000000-0000-0000-0000-000000300004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300004",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9779bd61-b45d-c989-080b-637d409d5a23",
	1792.000000,
	1648.000000,
	"00000000-0000-0000-0000-000000300004");
INSERT INTO DIM_CON
	VALUES ("27682bd4-fbbf-d04d-3848-c84e2401cd72",
	1872.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000300004");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300004",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300005");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300005");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"00000000-0000-0000-0000-000000300005");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300005",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	2096.000000,
	1360.000000,
	"00000000-0000-0000-0000-000000300005");
INSERT INTO DIM_CON
	VALUES ("7be9d9e7-e31b-d948-b029-5a2506306d62",
	2096.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300005");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300005",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300006");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300006");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"00000000-0000-0000-0000-000000300006");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000300006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300006",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10230607-e6ec-a227-1390-692fdd6e7a92",
	2096.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000300006");
INSERT INTO DIM_CON
	VALUES ("499857d5-35ca-138f-f98d-427c085f5d7f",
	2096.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000300006");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300007",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	41,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000300007");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000300007");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"00000000-0000-0000-0000-000000300007");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"00000000-0000-0000-0000-000000300007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300007",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	2096.000000,
	1648.000000,
	"00000000-0000-0000-0000-000000300007");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300001",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	"00000000-0000-0000-0000-000000300008",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	"00000000-0000-0000-0000-000000300008",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"ca56ef79-b6c6-d41d-5193-96db7ef0c160");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("56b95c67-4728-11fa-d265-15811bcb0126",
	"00000000-0000-0000-0000-000000300008",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"56b95c67-4728-11fa-d265-15811bcb0126");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"56b95c67-4728-11fa-d265-15811bcb0126",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56b95c67-4728-11fa-d265-15811bcb0126",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300009",
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"51460d73-84fb-1a81-95db-8118e611f551",
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000030000a",
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000300009",
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	"ca56ef79-b6c6-d41d-5193-96db7ef0c160");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000030000b",
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-00000030000a",
	"ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	"56b95c67-4728-11fa-d265-15811bcb0126");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000030000c",
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-00000030000b",
	"56b95c67-4728-11fa-d265-15811bcb0126",
	"64daaaa8-7539-e744-ee32-10a406fe8690");
INSERT INTO DIM_WAY
	VALUES ("51460d73-84fb-1a81-95db-8118e611f551",
	1872.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	1920.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"51460d73-84fb-1a81-95db-8118e611f551");
INSERT INTO DIM_WAY
	VALUES ("ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	1920.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7");
INSERT INTO DIM_WAY
	VALUES ("56b95c67-4728-11fa-d265-15811bcb0126",
	1824.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"ca56ef79-b6c6-d41d-5193-96db7ef0c160");
INSERT INTO DIM_WAY
	VALUES ("64daaaa8-7539-e744-ee32-10a406fe8690",
	1824.000000,
	1264.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000",
	"56b95c67-4728-11fa-d265-15811bcb0126");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000300008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300008",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ba4f5a7b-b713-c28e-2461-0259ec9035d6",
	"5a538f71-bad6-43ff-86aa-3e257afa1baf",
	"00000000-0000-0000-0000-000000300008");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300003",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("64daaaa8-7539-e744-ee32-10a406fe8690",
	"00000000-0000-0000-0000-00000030000d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"64daaaa8-7539-e744-ee32-10a406fe8690");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"64daaaa8-7539-e744-ee32-10a406fe8690",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("64daaaa8-7539-e744-ee32-10a406fe8690",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	"00000000-0000-0000-0000-00000030000d",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"32b470c9-d2cf-0bc4-5237-c1f7773afb9c");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	"00000000-0000-0000-0000-00000030000d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1f483733-52c9-321d-ba80-f67ad4d0d3b7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000030000e",
	"00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000000000",
	"32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	"1f483733-52c9-321d-ba80-f67ad4d0d3b7");
INSERT INTO DIM_WAY
	VALUES ("32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	1792.000000,
	1344.000000,
	"00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	1792.000000,
	1456.000000,
	"00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000000000",
	"32b470c9-d2cf-0bc4-5237-c1f7773afb9c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000030000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000030000d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e9f51672-8643-1116-86f5-a8342b9015a6",
	"aad1e52b-3aac-3f69-940f-ccce4976b74f",
	"00000000-0000-0000-0000-00000030000d");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300004",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("96535a97-a6b9-32ed-b7f0-969040d79158",
	"00000000-0000-0000-0000-00000030000f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"96535a97-a6b9-32ed-b7f0-969040d79158");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"96535a97-a6b9-32ed-b7f0-969040d79158",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96535a97-a6b9-32ed-b7f0-969040d79158",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	"00000000-0000-0000-0000-00000030000f",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"6cfdf073-4203-23d1-5423-af6f0aaaa45f");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb704920-f055-c00d-1b61-64737a9bd6de",
	"00000000-0000-0000-0000-00000030000f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb704920-f055-c00d-1b61-64737a9bd6de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb704920-f055-c00d-1b61-64737a9bd6de",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb704920-f055-c00d-1b61-64737a9bd6de",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300010",
	"00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000000000",
	"96535a97-a6b9-32ed-b7f0-969040d79158",
	"6cfdf073-4203-23d1-5423-af6f0aaaa45f");
INSERT INTO DIM_WAY
	VALUES ("96535a97-a6b9-32ed-b7f0-969040d79158",
	1792.000000,
	1536.000000,
	"00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	1792.000000,
	1648.000000,
	"00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000000000",
	"96535a97-a6b9-32ed-b7f0-969040d79158");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000030000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000030000f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b90d50a5-000d-0c86-b06f-b0fbb38c00d2",
	"9779bd61-b45d-c989-080b-637d409d5a23",
	"00000000-0000-0000-0000-00000030000f");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300005",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	"00000000-0000-0000-0000-000000300011",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3ab2f0fa-f41f-b29a-4a4a-fb39d262c715");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b29ee38f-0815-2236-b73f-28bbcbf7a351",
	"00000000-0000-0000-0000-000000300011",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"b29ee38f-0815-2236-b73f-28bbcbf7a351");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"b29ee38f-0815-2236-b73f-28bbcbf7a351",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b29ee38f-0815-2236-b73f-28bbcbf7a351",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	"00000000-0000-0000-0000-000000300011",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d3cdd6db-2493-d860-8a13-fdf33c4d5749");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300012",
	"00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000000000",
	"cb704920-f055-c00d-1b61-64737a9bd6de",
	"3ab2f0fa-f41f-b29a-4a4a-fb39d262c715");
INSERT INTO DIM_WAY
	VALUES ("cb704920-f055-c00d-1b61-64737a9bd6de",
	2096.000000,
	1360.000000,
	"00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	2096.000000,
	1456.000000,
	"00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000000000",
	"cb704920-f055-c00d-1b61-64737a9bd6de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000300011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300011",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ea3c0b6-5313-7314-42f7-fb9b229608c7",
	"10230607-e6ec-a227-1390-692fdd6e7a92",
	"00000000-0000-0000-0000-000000300011");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300006",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e5eaea95-31c1-5e17-5137-46fde67fafb0",
	"00000000-0000-0000-0000-000000300013",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e5eaea95-31c1-5e17-5137-46fde67fafb0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e5eaea95-31c1-5e17-5137-46fde67fafb0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e5eaea95-31c1-5e17-5137-46fde67fafb0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	"00000000-0000-0000-0000-000000300013",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"57f7e5e6-4928-9485-c9a7-5b397ff623d8");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e97cf25d-6dea-c020-e67b-8179cf4050e3",
	"00000000-0000-0000-0000-000000300013",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e97cf25d-6dea-c020-e67b-8179cf4050e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e97cf25d-6dea-c020-e67b-8179cf4050e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e97cf25d-6dea-c020-e67b-8179cf4050e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300014",
	"00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000000000",
	"b29ee38f-0815-2236-b73f-28bbcbf7a351",
	"d3cdd6db-2493-d860-8a13-fdf33c4d5749");
INSERT INTO DIM_WAY
	VALUES ("b29ee38f-0815-2236-b73f-28bbcbf7a351",
	2096.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	2096.000000,
	1648.000000,
	"00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000000000",
	"b29ee38f-0815-2236-b73f-28bbcbf7a351");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000300013",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300013",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("499857d5-35ca-138f-f98d-427c085f5d7f",
	"f9c6bf7f-c68f-5a61-e13b-8c3e9ff365e4",
	"00000000-0000-0000-0000-000000300013");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000300001",
	"00000000-0000-0000-0000-000000300002",
	42,
	0,
	'::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	"00000000-0000-0000-0000-000000300015",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7a640fc5-2674-ff64-2fcb-c9cf65416cc0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ccfb9342-fdab-1b00-be6f-955a87292eca",
	"00000000-0000-0000-0000-000000300015",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"ccfb9342-fdab-1b00-be6f-955a87292eca");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"ccfb9342-fdab-1b00-be6f-955a87292eca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ccfb9342-fdab-1b00-be6f-955a87292eca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("042587f7-f563-0fa8-f543-57f752a37f90",
	"00000000-0000-0000-0000-000000300015",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"042587f7-f563-0fa8-f543-57f752a37f90");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"042587f7-f563-0fa8-f543-57f752a37f90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("042587f7-f563-0fa8-f543-57f752a37f90",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300016",
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"e5eaea95-31c1-5e17-5137-46fde67fafb0",
	"57f7e5e6-4928-9485-c9a7-5b397ff623d8");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300017",
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000300016",
	"57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	"e97cf25d-6dea-c020-e67b-8179cf4050e3");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300018",
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000300017",
	"e97cf25d-6dea-c020-e67b-8179cf4050e3",
	"7a640fc5-2674-ff64-2fcb-c9cf65416cc0");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000300019",
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000300018",
	"7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	"ccfb9342-fdab-1b00-be6f-955a87292eca");
INSERT INTO DIM_WAY
	VALUES ("e5eaea95-31c1-5e17-5137-46fde67fafb0",
	1872.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	1968.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"e5eaea95-31c1-5e17-5137-46fde67fafb0");
INSERT INTO DIM_WAY
	VALUES ("e97cf25d-6dea-c020-e67b-8179cf4050e3",
	1968.000000,
	1248.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"57f7e5e6-4928-9485-c9a7-5b397ff623d8");
INSERT INTO DIM_WAY
	VALUES ("7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	2096.000000,
	1248.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"e97cf25d-6dea-c020-e67b-8179cf4050e3");
INSERT INTO DIM_WAY
	VALUES ("ccfb9342-fdab-1b00-be6f-955a87292eca",
	2096.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000",
	"7a640fc5-2674-ff64-2fcb-c9cf65416cc0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000300015",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000300015",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("27682bd4-fbbf-d04d-3848-c84e2401cd72",
	"7be9d9e7-e31b-d948-b029-5a2506306d62",
	"00000000-0000-0000-0000-000000300015");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000300001",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000d",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010005e",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000c",
	0,
	"00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000100060",
	"00000000-0000-0000-0000-000000100021",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100060",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100060",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010005f",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000e",
	0,
	"00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000100061",
	"00000000-0000-0000-0000-000000100022",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100061",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100061",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100060",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_REF
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000e",
	0,
	"00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000100062",
	"00000000-0000-0000-0000-000000100023",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("00000000-0000-0000-0000-000000100062",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100062",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100061",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"00000000-0000-0000-0000-000000080008",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000e",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000100063",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"00000000-0000-0000-0000-000000080011",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO O_OBJ
	VALUES ("00000000-0000-0000-0000-00000010000f",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100065",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100065",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100065",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"00000000-0000-0000-0000-000000080006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100066",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100066",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100066",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100065",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"00000000-0000-0000-0000-000000080003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("00000000-0000-0000-0000-000000100067",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_BATTR
	VALUES ("00000000-0000-0000-0000-000000100067",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_ATTR
	VALUES ("00000000-0000-0000-0000-000000100067",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100066",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"00000000-0000-0000-0000-000000080007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_OIDA
	VALUES ("00000000-0000-0000-0000-000000100065",
	"00000000-0000-0000-0000-00000010000f",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO O_ID
	VALUES (2,
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO SM_ISM
	VALUES ("00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO SM_SM
	VALUES ("00000000-0000-0000-0000-000000380007",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("00000000-0000-0000-0000-000000380007");
INSERT INTO SM_EVTDI
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	'message',
	'',
	"00000000-0000-0000-0000-000000080005",
	'',
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000380003",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000380003",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380007",
	1,
	'',
	'');
INSERT INTO SM_MOAH
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002");
INSERT INTO SM_AH
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380007",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'');
INSERT INTO SM_TAH
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380001");
INSERT INTO SM_AH
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("7d9d671e-5379-9d67-1344-af81bc8136a0",
	"00000000-0000-0000-0000-000000380007",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380002");
INSERT INTO SM_AH
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("a89f180d-b0dd-a98a-e613-d4a09ad9ed95",
	"00000000-0000-0000-0000-000000380007",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380003");
INSERT INTO SM_AH
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("badfa733-4fcd-1a86-4c05-684418a8aa54",
	"00000000-0000-0000-0000-000000380007",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380004");
INSERT INTO SM_AH
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"00000000-0000-0000-0000-000000380007");
INSERT INTO SM_ACT
	VALUES ("4539a0cd-44ac-ef97-f749-397fcb86aa18",
	"00000000-0000-0000-0000-000000380007",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000380001",
	8,
	"00000000-0000-0000-0000-000000380007",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380001",
	41,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000380002");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000380002");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"00000000-0000-0000-0000-000000380002");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"00000000-0000-0000-0000-000000380002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000380002",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("74e01a6e-88a5-f806-f8af-793d0640222a",
	1888.000000,
	1328.000000,
	"00000000-0000-0000-0000-000000380002");
INSERT INTO DIM_CON
	VALUES ("0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	2016.000000,
	1328.000000,
	"00000000-0000-0000-0000-000000380002");
INSERT INTO DIM_CON
	VALUES ("b9281f80-c60e-e44f-85ac-f22548fa016c",
	2144.000000,
	1408.000000,
	"00000000-0000-0000-0000-000000380002");
INSERT INTO DIM_CON
	VALUES ("52247c6f-1750-f3cb-270e-45b15a2fef04",
	1856.000000,
	1392.000000,
	"00000000-0000-0000-0000-000000380002");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000380003",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380002",
	41,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000380003");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000380003");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"00000000-0000-0000-0000-000000380003");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"00000000-0000-0000-0000-000000380003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000380003",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7ce7958c-6b30-c8ab-b74b-669386211e32",
	1920.000000,
	1056.000000,
	"00000000-0000-0000-0000-000000380003");
INSERT INTO DIM_CON
	VALUES ("87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	2096.000000,
	1056.000000,
	"00000000-0000-0000-0000-000000380003");
INSERT INTO DIM_CON
	VALUES ("716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	2144.000000,
	1120.000000,
	"00000000-0000-0000-0000-000000380003");
INSERT INTO DIM_CON
	VALUES ("d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	1856.000000,
	1120.000000,
	"00000000-0000-0000-0000-000000380003");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380001",
	42,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("67a43559-3209-fd2a-de96-bfa114c0144c",
	"00000000-0000-0000-0000-000000380004",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"67a43559-3209-fd2a-de96-bfa114c0144c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"67a43559-3209-fd2a-de96-bfa114c0144c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67a43559-3209-fd2a-de96-bfa114c0144c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	"00000000-0000-0000-0000-000000380004",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	"00000000-0000-0000-0000-000000380004",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"17d40b56-bec5-f3e7-7136-07c6dcfacf5f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380005",
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000",
	"042587f7-f563-0fa8-f543-57f752a37f90",
	"67a43559-3209-fd2a-de96-bfa114c0144c");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380006",
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000380005",
	"67a43559-3209-fd2a-de96-bfa114c0144c",
	"5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380007",
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000380006",
	"5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	"17d40b56-bec5-f3e7-7136-07c6dcfacf5f");
INSERT INTO DIM_WAY
	VALUES ("042587f7-f563-0fa8-f543-57f752a37f90",
	1888.000000,
	1328.000000,
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("67a43559-3209-fd2a-de96-bfa114c0144c",
	1888.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000",
	"042587f7-f563-0fa8-f543-57f752a37f90");
INSERT INTO DIM_WAY
	VALUES ("5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	2016.000000,
	1296.000000,
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000",
	"67a43559-3209-fd2a-de96-bfa114c0144c");
INSERT INTO DIM_WAY
	VALUES ("17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	2016.000000,
	1328.000000,
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000",
	"5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000380004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000380004",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("74e01a6e-88a5-f806-f8af-793d0640222a",
	"0f8ea5b8-fa42-34dc-336b-499a0d54ea27",
	"00000000-0000-0000-0000-000000380004");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380002",
	42,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0f093a56-91da-8d01-2ad8-e04c2628be26",
	"00000000-0000-0000-0000-000000380008",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0f093a56-91da-8d01-2ad8-e04c2628be26");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f093a56-91da-8d01-2ad8-e04c2628be26",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f093a56-91da-8d01-2ad8-e04c2628be26",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8e22c574-b332-4081-f71d-95f446b44957",
	"00000000-0000-0000-0000-000000380008",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"8e22c574-b332-4081-f71d-95f446b44957");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"8e22c574-b332-4081-f71d-95f446b44957",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8e22c574-b332-4081-f71d-95f446b44957",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f7fa0cfd-d34f-6b53-9cba-08930f044a35",
	"00000000-0000-0000-0000-000000380008",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f7fa0cfd-d34f-6b53-9cba-08930f044a35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7fa0cfd-d34f-6b53-9cba-08930f044a35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7fa0cfd-d34f-6b53-9cba-08930f044a35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380009",
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000",
	"0f093a56-91da-8d01-2ad8-e04c2628be26",
	"8e22c574-b332-4081-f71d-95f446b44957");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000038000a",
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000380009",
	"8e22c574-b332-4081-f71d-95f446b44957",
	"f7fa0cfd-d34f-6b53-9cba-08930f044a35");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000038000b",
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-00000038000a",
	"f7fa0cfd-d34f-6b53-9cba-08930f044a35",
	"328f8354-f987-5d53-c7be-e037f8011a1d");
INSERT INTO DIM_WAY
	VALUES ("0f093a56-91da-8d01-2ad8-e04c2628be26",
	1920.000000,
	1056.000000,
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8e22c574-b332-4081-f71d-95f446b44957",
	1920.000000,
	1008.000000,
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000",
	"0f093a56-91da-8d01-2ad8-e04c2628be26");
INSERT INTO DIM_WAY
	VALUES ("f7fa0cfd-d34f-6b53-9cba-08930f044a35",
	2096.000000,
	1008.000000,
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000",
	"8e22c574-b332-4081-f71d-95f446b44957");
INSERT INTO DIM_WAY
	VALUES ("328f8354-f987-5d53-c7be-e037f8011a1d",
	2096.000000,
	1056.000000,
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000",
	"f7fa0cfd-d34f-6b53-9cba-08930f044a35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000380008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000380008",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7ce7958c-6b30-c8ab-b74b-669386211e32",
	"87dac1ba-0c57-513c-f689-1e9d08e13bfe",
	"00000000-0000-0000-0000-000000380008");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380004",
	42,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("328f8354-f987-5d53-c7be-e037f8011a1d",
	"00000000-0000-0000-0000-00000038000c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"328f8354-f987-5d53-c7be-e037f8011a1d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"328f8354-f987-5d53-c7be-e037f8011a1d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("328f8354-f987-5d53-c7be-e037f8011a1d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dfc8eef0-a0ee-a47a-158a-3f3c5435e458",
	"00000000-0000-0000-0000-00000038000c",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"dfc8eef0-a0ee-a47a-158a-3f3c5435e458");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"dfc8eef0-a0ee-a47a-158a-3f3c5435e458",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dfc8eef0-a0ee-a47a-158a-3f3c5435e458",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("be224147-aa13-eb43-8d8d-d4e2f14f94e0",
	"00000000-0000-0000-0000-00000038000c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"be224147-aa13-eb43-8d8d-d4e2f14f94e0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"be224147-aa13-eb43-8d8d-d4e2f14f94e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("be224147-aa13-eb43-8d8d-d4e2f14f94e0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000038000d",
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000",
	"dfc8eef0-a0ee-a47a-158a-3f3c5435e458",
	"be224147-aa13-eb43-8d8d-d4e2f14f94e0");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000038000e",
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-00000038000d",
	"be224147-aa13-eb43-8d8d-d4e2f14f94e0",
	"25482ecd-fd00-c780-1f99-d5283c7d8f86");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000038000f",
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-00000038000e",
	"25482ecd-fd00-c780-1f99-d5283c7d8f86",
	"e8b2b1e4-7a96-de23-c0be-febcba886b4a");
INSERT INTO DIM_WAY
	VALUES ("dfc8eef0-a0ee-a47a-158a-3f3c5435e458",
	2144.000000,
	1408.000000,
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("be224147-aa13-eb43-8d8d-d4e2f14f94e0",
	2240.000000,
	1408.000000,
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000",
	"dfc8eef0-a0ee-a47a-158a-3f3c5435e458");
INSERT INTO DIM_WAY
	VALUES ("25482ecd-fd00-c780-1f99-d5283c7d8f86",
	2240.000000,
	1120.000000,
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000",
	"be224147-aa13-eb43-8d8d-d4e2f14f94e0");
INSERT INTO DIM_WAY
	VALUES ("e8b2b1e4-7a96-de23-c0be-febcba886b4a",
	2144.000000,
	1120.000000,
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000",
	"25482ecd-fd00-c780-1f99-d5283c7d8f86");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000038000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000038000c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b9281f80-c60e-e44f-85ac-f22548fa016c",
	"716cee8f-d3d7-5cc2-6235-007ded3bf83f",
	"00000000-0000-0000-0000-00000038000c");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000380001",
	"00000000-0000-0000-0000-000000380003",
	42,
	0,
	'::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("25482ecd-fd00-c780-1f99-d5283c7d8f86",
	"00000000-0000-0000-0000-000000380010",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"25482ecd-fd00-c780-1f99-d5283c7d8f86");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"25482ecd-fd00-c780-1f99-d5283c7d8f86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("25482ecd-fd00-c780-1f99-d5283c7d8f86",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e8b2b1e4-7a96-de23-c0be-febcba886b4a",
	"00000000-0000-0000-0000-000000380010",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"e8b2b1e4-7a96-de23-c0be-febcba886b4a");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"e8b2b1e4-7a96-de23-c0be-febcba886b4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e8b2b1e4-7a96-de23-c0be-febcba886b4a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3e712249-4c65-72ec-1091-c05ade77bc7e",
	"00000000-0000-0000-0000-000000380010",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3e712249-4c65-72ec-1091-c05ade77bc7e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e712249-4c65-72ec-1091-c05ade77bc7e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e712249-4c65-72ec-1091-c05ade77bc7e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380011",
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000",
	"3e712249-4c65-72ec-1091-c05ade77bc7e",
	"95456d3b-7f36-0ba2-b06a-86577e6acfb6");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380012",
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000380011",
	"95456d3b-7f36-0ba2-b06a-86577e6acfb6",
	"6c8753b0-7628-5b7c-dbd3-3557e02bb597");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000380013",
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000380012",
	"6c8753b0-7628-5b7c-dbd3-3557e02bb597",
	"031892fa-d050-5106-9975-7795026e8b65");
INSERT INTO DIM_WAY
	VALUES ("3e712249-4c65-72ec-1091-c05ade77bc7e",
	1856.000000,
	1120.000000,
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("95456d3b-7f36-0ba2-b06a-86577e6acfb6",
	1776.000000,
	1120.000000,
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000",
	"3e712249-4c65-72ec-1091-c05ade77bc7e");
INSERT INTO DIM_WAY
	VALUES ("6c8753b0-7628-5b7c-dbd3-3557e02bb597",
	1776.000000,
	1392.000000,
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000",
	"95456d3b-7f36-0ba2-b06a-86577e6acfb6");
INSERT INTO DIM_WAY
	VALUES ("031892fa-d050-5106-9975-7795026e8b65",
	1856.000000,
	1392.000000,
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000",
	"6c8753b0-7628-5b7c-dbd3-3557e02bb597");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000380010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000380010",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d699f5d5-bb27-c9be-645b-3c0038e5fe4b",
	"52247c6f-1750-f3cb-270e-45b15a2fef04",
	"00000000-0000-0000-0000-000000380010");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000380001",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100001");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100001",
	1,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100031",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010002d",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010002c",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010002f",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010002e",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100030",
	"00000000-0000-0000-0000-000000100007",
	0,
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100001",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100002");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100002",
	2,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100003");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100003",
	3,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100006",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100006");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100004");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100004",
	4,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100007",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100007");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100007",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100008",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100008");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100004",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100005");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100005",
	5,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100006");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100006",
	6,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100008",
	0,
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100006",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100007");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100007",
	8,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000d",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100003",
	"00000000-0000-0000-0000-000000100002",
	0,
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000d",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100002",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000e",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-000000100007",
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100008");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100008",
	9,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-00000010000f",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100010",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100051",
	"00000000-0000-0000-0000-00000010000a",
	0,
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100010");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100052",
	"00000000-0000-0000-0000-00000010000a",
	0,
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100010");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100010",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-000000100009");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-000000100009",
	10,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100011",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-000000100009",
	0,
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100011");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100011",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100012",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100012");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-00000010000a");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-00000010000a",
	11,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100013",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100013");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100014",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100057",
	"00000000-0000-0000-0000-00000010000b",
	0,
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100014");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100056",
	"00000000-0000-0000-0000-00000010000b",
	0,
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100014");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100014",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-00000010000b");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-00000010000b",
	12,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100015",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100015");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100016",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010005f",
	"00000000-0000-0000-0000-00000010000d",
	0,
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100016");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-00000010005e",
	"00000000-0000-0000-0000-00000010000d",
	0,
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100016");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100016",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-00000010000c");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-00000010000c",
	13,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100017",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100058",
	"00000000-0000-0000-0000-00000010000c",
	0,
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100017");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100017",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100017",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100018",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100018");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100018",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("00000000-0000-0000-0000-00000010000d");
INSERT INTO R_REL
	VALUES ("00000000-0000-0000-0000-00000010000d",
	14,
	'',
	"00000000-0000-0000-0000-000000100002");
INSERT INTO R_FORM
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100019",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100019");
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100019",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010001a",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100063",
	"00000000-0000-0000-0000-00000010000e",
	0,
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010001a");
INSERT INTO O_RTIDA
	VALUES ("00000000-0000-0000-0000-000000100064",
	"00000000-0000-0000-0000-00000010000e",
	0,
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010001a");
INSERT INTO R_RTO
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010001a",
	0);
INSERT INTO R_OIR
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-00000010001a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("00000000-0000-0000-0000-000000100005",
	5,
	"00000000-0000-0000-0000-000000100002",
	11,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'::ex1::ex');
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100001",
	21,
	0,
	'::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100008");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100008");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"00000000-0000-0000-0000-000000100008");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000100008",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100008",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002",
	21,
	0,
	'::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100009");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"00000000-0000-0000-0000-000000100009",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100009",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("39966476-003e-1552-95eb-c252ff00ef6f",
	1760.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_CON
	VALUES ("51460d73-84fb-1a81-95db-8118e611f551",
	1888.000000,
	1440.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_CON
	VALUES ("ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	1888.000000,
	1584.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_CON
	VALUES ("64daaaa8-7539-e744-ee32-10a406fe8690",
	1888.000000,
	1728.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_CON
	VALUES ("1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	1888.000000,
	1472.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO DIM_CON
	VALUES ("3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	1856.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100009");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100003",
	21,
	0,
	'::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000a");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000a");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"00000000-0000-0000-0000-00000010000a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	2112.000000,
	1440.000000,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO DIM_CON
	VALUES ("96535a97-a6b9-32ed-b7f0-969040d79158",
	2112.000000,
	1472.000000,
	"00000000-0000-0000-0000-00000010000a");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100004",
	21,
	0,
	'::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000b");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000b");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"00000000-0000-0000-0000-00000010000b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("56b95c67-4728-11fa-d265-15811bcb0126",
	2112.000000,
	1584.000000,
	"00000000-0000-0000-0000-00000010000b");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100005",
	21,
	0,
	'::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000c");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000c");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"00000000-0000-0000-0000-00000010000c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	2112.000000,
	1728.000000,
	"00000000-0000-0000-0000-00000010000c");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100006",
	21,
	0,
	'::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000d");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000d");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"00000000-0000-0000-0000-00000010000d");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"00000000-0000-0000-0000-00000010000d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100007",
	21,
	0,
	'::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000e");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000e");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000010000e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("20c49080-4708-82e1-3ff6-2fedf526e055",
	1760.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO DIM_CON
	VALUES ("6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	1712.000000,
	2320.000000,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO DIM_CON
	VALUES ("b29ee38f-0815-2236-b73f-28bbcbf7a351",
	1856.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000010000e");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100008",
	21,
	0,
	'::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-00000010000f");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-00000010000f");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"00000000-0000-0000-0000-00000010000f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010000f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("cb704920-f055-c00d-1b61-64737a9bd6de",
	1712.000000,
	2432.000000,
	"00000000-0000-0000-0000-00000010000f");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009",
	21,
	0,
	'::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100010");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100010");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"00000000-0000-0000-0000-000000100010");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000100010",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100010",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	1392.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100010");
INSERT INTO DIM_CON
	VALUES ("57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	1552.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100010");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a",
	21,
	0,
	'::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100011");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100011");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"00000000-0000-0000-0000-000000100011");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100011",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100011",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e5eaea95-31c1-5e17-5137-46fde67fafb0",
	1392.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100011");
INSERT INTO DIM_CON
	VALUES ("e97cf25d-6dea-c020-e67b-8179cf4050e3",
	1552.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100011");
INSERT INTO DIM_CON
	VALUES ("7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	1456.000000,
	2048.000000,
	"00000000-0000-0000-0000-000000100011");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000b",
	21,
	0,
	'::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100012");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100012");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"00000000-0000-0000-0000-000000100012");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"00000000-0000-0000-0000-000000100012",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100012",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ccfb9342-fdab-1b00-be6f-955a87292eca",
	1456.000000,
	2160.000000,
	"00000000-0000-0000-0000-000000100012");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000c",
	21,
	0,
	'::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100013");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100013");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"00000000-0000-0000-0000-000000100013");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"00000000-0000-0000-0000-000000100013",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100013",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("042587f7-f563-0fa8-f543-57f752a37f90",
	1024.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100013");
INSERT INTO DIM_CON
	VALUES ("5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	1200.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100013");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000d",
	21,
	0,
	'::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100014");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100014");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"00000000-0000-0000-0000-000000100014");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100014",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100014",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("67a43559-3209-fd2a-de96-bfa114c0144c",
	1024.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100014");
INSERT INTO DIM_CON
	VALUES ("17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	1200.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100014");
INSERT INTO DIM_CON
	VALUES ("0f093a56-91da-8d01-2ad8-e04c2628be26",
	1104.000000,
	2064.000000,
	"00000000-0000-0000-0000-000000100014");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000e",
	21,
	0,
	'::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100015");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100015");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"00000000-0000-0000-0000-000000100015");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"00000000-0000-0000-0000-000000100015",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100015",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8e22c574-b332-4081-f71d-95f446b44957",
	1104.000000,
	2160.000000,
	"00000000-0000-0000-0000-000000100015");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000f",
	21,
	0,
	'::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("00000000-0000-0000-0000-000000100016");
INSERT INTO GD_NCS
	VALUES ("00000000-0000-0000-0000-000000100016");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"00000000-0000-0000-0000-000000100016");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"00000000-0000-0000-0000-000000100016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100016",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100001",
	24,
	0,
	'::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("95456d3b-7f36-0ba2-b06a-86577e6acfb6",
	"00000000-0000-0000-0000-000000100032",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"95456d3b-7f36-0ba2-b06a-86577e6acfb6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"95456d3b-7f36-0ba2-b06a-86577e6acfb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95456d3b-7f36-0ba2-b06a-86577e6acfb6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6c8753b0-7628-5b7c-dbd3-3557e02bb597",
	"00000000-0000-0000-0000-000000100032",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"6c8753b0-7628-5b7c-dbd3-3557e02bb597");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"6c8753b0-7628-5b7c-dbd3-3557e02bb597",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c8753b0-7628-5b7c-dbd3-3557e02bb597",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("031892fa-d050-5106-9975-7795026e8b65",
	"00000000-0000-0000-0000-000000100032",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"031892fa-d050-5106-9975-7795026e8b65");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"031892fa-d050-5106-9975-7795026e8b65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("031892fa-d050-5106-9975-7795026e8b65",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100033",
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000000000",
	"0cfd19af-23c3-fd4e-4d9a-d6d047c8020f",
	"a7ac752c-d30d-9a4f-ffed-fa53a60d5279");
INSERT INTO DIM_WAY
	VALUES ("0cfd19af-23c3-fd4e-4d9a-d6d047c8020f",
	1760.000000,
	1952.000000,
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a7ac752c-d30d-9a4f-ffed-fa53a60d5279",
	1760.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000000000",
	"0cfd19af-23c3-fd4e-4d9a-d6d047c8020f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100032",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100032",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("20c49080-4708-82e1-3ff6-2fedf526e055",
	"39966476-003e-1552-95eb-c252ff00ef6f",
	"00000000-0000-0000-0000-000000100032");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100002",
	24,
	0,
	'::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0cfd19af-23c3-fd4e-4d9a-d6d047c8020f",
	"00000000-0000-0000-0000-000000100034",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0cfd19af-23c3-fd4e-4d9a-d6d047c8020f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0cfd19af-23c3-fd4e-4d9a-d6d047c8020f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0cfd19af-23c3-fd4e-4d9a-d6d047c8020f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a7ac752c-d30d-9a4f-ffed-fa53a60d5279",
	"00000000-0000-0000-0000-000000100034",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a7ac752c-d30d-9a4f-ffed-fa53a60d5279");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"a7ac752c-d30d-9a4f-ffed-fa53a60d5279",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a7ac752c-d30d-9a4f-ffed-fa53a60d5279",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1437e5da-6da0-c149-099f-a0ea10c207a4",
	"00000000-0000-0000-0000-000000100034",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1437e5da-6da0-c149-099f-a0ea10c207a4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1437e5da-6da0-c149-099f-a0ea10c207a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1437e5da-6da0-c149-099f-a0ea10c207a4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100035",
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000000000",
	"1437e5da-6da0-c149-099f-a0ea10c207a4",
	"23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9");
INSERT INTO DIM_WAY
	VALUES ("1437e5da-6da0-c149-099f-a0ea10c207a4",
	1888.000000,
	1440.000000,
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9",
	2112.000000,
	1440.000000,
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000000000",
	"1437e5da-6da0-c149-099f-a0ea10c207a4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100034",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100034",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("51460d73-84fb-1a81-95db-8118e611f551",
	"639c7eb3-5ad4-d071-866e-4e20b4e255a7",
	"00000000-0000-0000-0000-000000100034");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100003",
	24,
	0,
	'::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9",
	"00000000-0000-0000-0000-000000100036",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23fe17c5-f2fb-7fd5-4e8b-89ba30af5eb9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3655c33a-97c3-d3d9-a2c7-4c0e199748d9",
	"00000000-0000-0000-0000-000000100036",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"3655c33a-97c3-d3d9-a2c7-4c0e199748d9");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"3655c33a-97c3-d3d9-a2c7-4c0e199748d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3655c33a-97c3-d3d9-a2c7-4c0e199748d9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fe164a85-5583-a4df-b396-addc276026de",
	"00000000-0000-0000-0000-000000100036",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fe164a85-5583-a4df-b396-addc276026de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fe164a85-5583-a4df-b396-addc276026de",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe164a85-5583-a4df-b396-addc276026de",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100037",
	"00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000000000",
	"3655c33a-97c3-d3d9-a2c7-4c0e199748d9",
	"fe164a85-5583-a4df-b396-addc276026de");
INSERT INTO DIM_WAY
	VALUES ("3655c33a-97c3-d3d9-a2c7-4c0e199748d9",
	1888.000000,
	1584.000000,
	"00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fe164a85-5583-a4df-b396-addc276026de",
	2112.000000,
	1584.000000,
	"00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000000000",
	"3655c33a-97c3-d3d9-a2c7-4c0e199748d9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100036",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100036",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ca56ef79-b6c6-d41d-5193-96db7ef0c160",
	"56b95c67-4728-11fa-d265-15811bcb0126",
	"00000000-0000-0000-0000-000000100036");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100004",
	24,
	0,
	'::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("83988688-cae8-e596-9fb5-2859b58bb808",
	"00000000-0000-0000-0000-000000100038",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"83988688-cae8-e596-9fb5-2859b58bb808");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"83988688-cae8-e596-9fb5-2859b58bb808",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("83988688-cae8-e596-9fb5-2859b58bb808",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cf586903-625f-394a-ee85-ebdf3a995e0e",
	"00000000-0000-0000-0000-000000100038",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"cf586903-625f-394a-ee85-ebdf3a995e0e");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"cf586903-625f-394a-ee85-ebdf3a995e0e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf586903-625f-394a-ee85-ebdf3a995e0e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3d559c5b-064b-712a-9ca6-be78e7ef0556",
	"00000000-0000-0000-0000-000000100038",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3d559c5b-064b-712a-9ca6-be78e7ef0556");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3d559c5b-064b-712a-9ca6-be78e7ef0556",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d559c5b-064b-712a-9ca6-be78e7ef0556",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100039",
	"00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000000000",
	"83988688-cae8-e596-9fb5-2859b58bb808",
	"cf586903-625f-394a-ee85-ebdf3a995e0e");
INSERT INTO DIM_WAY
	VALUES ("83988688-cae8-e596-9fb5-2859b58bb808",
	1888.000000,
	1728.000000,
	"00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cf586903-625f-394a-ee85-ebdf3a995e0e",
	2112.000000,
	1728.000000,
	"00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000000000",
	"83988688-cae8-e596-9fb5-2859b58bb808");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100038",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100038",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("64daaaa8-7539-e744-ee32-10a406fe8690",
	"32b470c9-d2cf-0bc4-5237-c1f7773afb9c",
	"00000000-0000-0000-0000-000000100038");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100005",
	24,
	0,
	'::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bb82881e-7468-9629-4780-7f55e060001d",
	"00000000-0000-0000-0000-00000010003a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bb82881e-7468-9629-4780-7f55e060001d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb82881e-7468-9629-4780-7f55e060001d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb82881e-7468-9629-4780-7f55e060001d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6266d6c0-f2f4-0d35-67e9-6f84eecad69b",
	"00000000-0000-0000-0000-00000010003a",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"6266d6c0-f2f4-0d35-67e9-6f84eecad69b");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"6266d6c0-f2f4-0d35-67e9-6f84eecad69b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6266d6c0-f2f4-0d35-67e9-6f84eecad69b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3039551f-7f61-95fe-6301-7d26797d472c",
	"00000000-0000-0000-0000-00000010003a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3039551f-7f61-95fe-6301-7d26797d472c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3039551f-7f61-95fe-6301-7d26797d472c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3039551f-7f61-95fe-6301-7d26797d472c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000010003b",
	"00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000000000",
	"3d559c5b-064b-712a-9ca6-be78e7ef0556",
	"bb82881e-7468-9629-4780-7f55e060001d");
INSERT INTO DIM_WAY
	VALUES ("3d559c5b-064b-712a-9ca6-be78e7ef0556",
	1888.000000,
	1472.000000,
	"00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("bb82881e-7468-9629-4780-7f55e060001d",
	2112.000000,
	1472.000000,
	"00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000000000",
	"3d559c5b-064b-712a-9ca6-be78e7ef0556");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000010003a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010003a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1f483733-52c9-321d-ba80-f67ad4d0d3b7",
	"96535a97-a6b9-32ed-b7f0-969040d79158",
	"00000000-0000-0000-0000-00000010003a");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100006",
	24,
	0,
	'::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("09ae12c5-d12f-fbfe-a295-6779e9e9e7f1",
	"00000000-0000-0000-0000-00000010003c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"09ae12c5-d12f-fbfe-a295-6779e9e9e7f1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"09ae12c5-d12f-fbfe-a295-6779e9e9e7f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09ae12c5-d12f-fbfe-a295-6779e9e9e7f1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a5cef2a1-de3d-a3e3-516b-3dd04c639e50",
	"00000000-0000-0000-0000-00000010003c",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a5cef2a1-de3d-a3e3-516b-3dd04c639e50");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"a5cef2a1-de3d-a3e3-516b-3dd04c639e50",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5cef2a1-de3d-a3e3-516b-3dd04c639e50",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9571126f-c7cf-1ea9-5a98-a91162e010f9",
	"00000000-0000-0000-0000-00000010003c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9571126f-c7cf-1ea9-5a98-a91162e010f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9571126f-c7cf-1ea9-5a98-a91162e010f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9571126f-c7cf-1ea9-5a98-a91162e010f9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000010003d",
	"00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000000000",
	"6266d6c0-f2f4-0d35-67e9-6f84eecad69b",
	"3039551f-7f61-95fe-6301-7d26797d472c");
INSERT INTO DIM_WAY
	VALUES ("6266d6c0-f2f4-0d35-67e9-6f84eecad69b",
	1712.000000,
	2320.000000,
	"00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3039551f-7f61-95fe-6301-7d26797d472c",
	1712.000000,
	2432.000000,
	"00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000000000",
	"6266d6c0-f2f4-0d35-67e9-6f84eecad69b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000010003c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010003c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6cfdf073-4203-23d1-5423-af6f0aaaa45f",
	"cb704920-f055-c00d-1b61-64737a9bd6de",
	"00000000-0000-0000-0000-00000010003c");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100007",
	24,
	0,
	'::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("406a9911-7a04-a483-f08b-c17788d3b8a9",
	"00000000-0000-0000-0000-00000010003e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"406a9911-7a04-a483-f08b-c17788d3b8a9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"406a9911-7a04-a483-f08b-c17788d3b8a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("406a9911-7a04-a483-f08b-c17788d3b8a9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d525ad41-0649-fa59-5ec2-0927ec8a9a4a",
	"00000000-0000-0000-0000-00000010003e",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"d525ad41-0649-fa59-5ec2-0927ec8a9a4a");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"d525ad41-0649-fa59-5ec2-0927ec8a9a4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d525ad41-0649-fa59-5ec2-0927ec8a9a4a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4ed6bbd0-255d-531b-d775-278ac882967d",
	"00000000-0000-0000-0000-00000010003e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4ed6bbd0-255d-531b-d775-278ac882967d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4ed6bbd0-255d-531b-d775-278ac882967d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ed6bbd0-255d-531b-d775-278ac882967d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000010003f",
	"00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000000000",
	"09ae12c5-d12f-fbfe-a295-6779e9e9e7f1",
	"a5cef2a1-de3d-a3e3-516b-3dd04c639e50");
INSERT INTO DIM_WAY
	VALUES ("09ae12c5-d12f-fbfe-a295-6779e9e9e7f1",
	1856.000000,
	1856.000000,
	"00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a5cef2a1-de3d-a3e3-516b-3dd04c639e50",
	1856.000000,
	1952.000000,
	"00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000000000",
	"09ae12c5-d12f-fbfe-a295-6779e9e9e7f1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000010003e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010003e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ab2f0fa-f41f-b29a-4a4a-fb39d262c715",
	"b29ee38f-0815-2236-b73f-28bbcbf7a351",
	"00000000-0000-0000-0000-00000010003e");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100008",
	24,
	0,
	'::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d9e26728-3d30-376e-0d84-93d1016f8561",
	"00000000-0000-0000-0000-000000100040",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d9e26728-3d30-376e-0d84-93d1016f8561");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d9e26728-3d30-376e-0d84-93d1016f8561",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d9e26728-3d30-376e-0d84-93d1016f8561",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a0f8f62e-72c7-8db8-0457-84cda746ae54",
	"00000000-0000-0000-0000-000000100040",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a0f8f62e-72c7-8db8-0457-84cda746ae54");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"a0f8f62e-72c7-8db8-0457-84cda746ae54",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0f8f62e-72c7-8db8-0457-84cda746ae54",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a3b5c842-41f4-d320-9770-fa09abcba7d7",
	"00000000-0000-0000-0000-000000100040",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a3b5c842-41f4-d320-9770-fa09abcba7d7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a3b5c842-41f4-d320-9770-fa09abcba7d7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a3b5c842-41f4-d320-9770-fa09abcba7d7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100041",
	"00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000000000",
	"9571126f-c7cf-1ea9-5a98-a91162e010f9",
	"406a9911-7a04-a483-f08b-c17788d3b8a9");
INSERT INTO DIM_WAY
	VALUES ("9571126f-c7cf-1ea9-5a98-a91162e010f9",
	1392.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("406a9911-7a04-a483-f08b-c17788d3b8a9",
	1392.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000000000",
	"9571126f-c7cf-1ea9-5a98-a91162e010f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100040",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100040",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d3cdd6db-2493-d860-8a13-fdf33c4d5749",
	"e5eaea95-31c1-5e17-5137-46fde67fafb0",
	"00000000-0000-0000-0000-000000100040");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-000000100009",
	24,
	0,
	'::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("03d93b8d-13e4-1aa8-bfae-149705d7daf5",
	"00000000-0000-0000-0000-000000100042",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"03d93b8d-13e4-1aa8-bfae-149705d7daf5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"03d93b8d-13e4-1aa8-bfae-149705d7daf5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03d93b8d-13e4-1aa8-bfae-149705d7daf5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("21433894-b974-aec5-c11b-8e072e85535b",
	"00000000-0000-0000-0000-000000100042",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"21433894-b974-aec5-c11b-8e072e85535b");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"21433894-b974-aec5-c11b-8e072e85535b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21433894-b974-aec5-c11b-8e072e85535b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("525a2716-c233-bc4c-4714-fd40d44bdf4e",
	"00000000-0000-0000-0000-000000100042",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"525a2716-c233-bc4c-4714-fd40d44bdf4e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"525a2716-c233-bc4c-4714-fd40d44bdf4e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("525a2716-c233-bc4c-4714-fd40d44bdf4e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100043",
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000000000",
	"d525ad41-0649-fa59-5ec2-0927ec8a9a4a",
	"4ed6bbd0-255d-531b-d775-278ac882967d");
INSERT INTO DIM_WAY
	VALUES ("d525ad41-0649-fa59-5ec2-0927ec8a9a4a",
	1552.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4ed6bbd0-255d-531b-d775-278ac882967d",
	1552.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000000000",
	"d525ad41-0649-fa59-5ec2-0927ec8a9a4a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100042",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100042",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("57f7e5e6-4928-9485-c9a7-5b397ff623d8",
	"e97cf25d-6dea-c020-e67b-8179cf4050e3",
	"00000000-0000-0000-0000-000000100042");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000a",
	24,
	0,
	'::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a419f2f1-f017-c9be-9f42-7a9924e53c53",
	"00000000-0000-0000-0000-000000100044",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a419f2f1-f017-c9be-9f42-7a9924e53c53");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a419f2f1-f017-c9be-9f42-7a9924e53c53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a419f2f1-f017-c9be-9f42-7a9924e53c53",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d2291746-426e-4d9e-5bb3-96d234c6b6e3",
	"00000000-0000-0000-0000-000000100044",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d2291746-426e-4d9e-5bb3-96d234c6b6e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d2291746-426e-4d9e-5bb3-96d234c6b6e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d2291746-426e-4d9e-5bb3-96d234c6b6e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d440b2fa-bc88-5edd-f08b-c4e6dac9ac37",
	"00000000-0000-0000-0000-000000100044",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d440b2fa-bc88-5edd-f08b-c4e6dac9ac37");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d440b2fa-bc88-5edd-f08b-c4e6dac9ac37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d440b2fa-bc88-5edd-f08b-c4e6dac9ac37",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100045",
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000000000",
	"d9e26728-3d30-376e-0d84-93d1016f8561",
	"a0f8f62e-72c7-8db8-0457-84cda746ae54");
INSERT INTO DIM_WAY
	VALUES ("d9e26728-3d30-376e-0d84-93d1016f8561",
	1456.000000,
	2048.000000,
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a0f8f62e-72c7-8db8-0457-84cda746ae54",
	1456.000000,
	2160.000000,
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000000000",
	"d9e26728-3d30-376e-0d84-93d1016f8561");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100044",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100044",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7a640fc5-2674-ff64-2fcb-c9cf65416cc0",
	"ccfb9342-fdab-1b00-be6f-955a87292eca",
	"00000000-0000-0000-0000-000000100044");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000b",
	24,
	0,
	'::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("37b4b24d-aaec-8795-31ad-4ecb2deb1fe6",
	"00000000-0000-0000-0000-000000100046",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"37b4b24d-aaec-8795-31ad-4ecb2deb1fe6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"37b4b24d-aaec-8795-31ad-4ecb2deb1fe6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("37b4b24d-aaec-8795-31ad-4ecb2deb1fe6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c0bfd67a-81a6-dbdc-e5be-f6f9f491eea3",
	"00000000-0000-0000-0000-000000100046",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"c0bfd67a-81a6-dbdc-e5be-f6f9f491eea3");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"c0bfd67a-81a6-dbdc-e5be-f6f9f491eea3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0bfd67a-81a6-dbdc-e5be-f6f9f491eea3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("99b60ef4-4e9e-0f53-b812-7adb50ff2b97",
	"00000000-0000-0000-0000-000000100046",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"99b60ef4-4e9e-0f53-b812-7adb50ff2b97");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"99b60ef4-4e9e-0f53-b812-7adb50ff2b97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99b60ef4-4e9e-0f53-b812-7adb50ff2b97",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100047",
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000000000",
	"a3b5c842-41f4-d320-9770-fa09abcba7d7",
	"03d93b8d-13e4-1aa8-bfae-149705d7daf5");
INSERT INTO DIM_WAY
	VALUES ("a3b5c842-41f4-d320-9770-fa09abcba7d7",
	1024.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("03d93b8d-13e4-1aa8-bfae-149705d7daf5",
	1024.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000000000",
	"a3b5c842-41f4-d320-9770-fa09abcba7d7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100046",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100046",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("042587f7-f563-0fa8-f543-57f752a37f90",
	"67a43559-3209-fd2a-de96-bfa114c0144c",
	"00000000-0000-0000-0000-000000100046");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000c",
	24,
	0,
	'::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("44a5722d-23f3-6da4-1746-67c4c9dad52f",
	"00000000-0000-0000-0000-000000100048",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"44a5722d-23f3-6da4-1746-67c4c9dad52f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"44a5722d-23f3-6da4-1746-67c4c9dad52f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("44a5722d-23f3-6da4-1746-67c4c9dad52f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7dca29d6-13d9-07c7-d514-a57dc9aa36d5",
	"00000000-0000-0000-0000-000000100048",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"7dca29d6-13d9-07c7-d514-a57dc9aa36d5");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"7dca29d6-13d9-07c7-d514-a57dc9aa36d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7dca29d6-13d9-07c7-d514-a57dc9aa36d5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8b35a11c-2257-9ac6-17fc-63f96ce7d5ba",
	"00000000-0000-0000-0000-000000100048",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8b35a11c-2257-9ac6-17fc-63f96ce7d5ba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8b35a11c-2257-9ac6-17fc-63f96ce7d5ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b35a11c-2257-9ac6-17fc-63f96ce7d5ba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-000000100049",
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000000000",
	"21433894-b974-aec5-c11b-8e072e85535b",
	"525a2716-c233-bc4c-4714-fd40d44bdf4e");
INSERT INTO DIM_WAY
	VALUES ("21433894-b974-aec5-c11b-8e072e85535b",
	1200.000000,
	1696.000000,
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("525a2716-c233-bc4c-4714-fd40d44bdf4e",
	1200.000000,
	1856.000000,
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000000000",
	"21433894-b974-aec5-c11b-8e072e85535b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000100048",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-000000100048",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5c1c80a3-d4c8-ecb3-f09c-9c5894c0d62b",
	"17d40b56-bec5-f3e7-7136-07c6dcfacf5f",
	"00000000-0000-0000-0000-000000100048");
INSERT INTO GD_GE
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000100005",
	"00000000-0000-0000-0000-00000010000d",
	24,
	0,
	'::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e5212a37-e847-0967-980e-1bb0020e403a",
	"00000000-0000-0000-0000-00000010004a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e5212a37-e847-0967-980e-1bb0020e403a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e5212a37-e847-0967-980e-1bb0020e403a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e5212a37-e847-0967-980e-1bb0020e403a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("59f38d87-be69-ea96-301f-f206a73bf1ca",
	"00000000-0000-0000-0000-00000010004a",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"59f38d87-be69-ea96-301f-f206a73bf1ca");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"59f38d87-be69-ea96-301f-f206a73bf1ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("59f38d87-be69-ea96-301f-f206a73bf1ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c758ae6-9096-5a3e-4330-8748b26695df",
	"00000000-0000-0000-0000-00000010004a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2c758ae6-9096-5a3e-4330-8748b26695df");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2c758ae6-9096-5a3e-4330-8748b26695df",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c758ae6-9096-5a3e-4330-8748b26695df",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("00000000-0000-0000-0000-00000010004b",
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000000000",
	"a419f2f1-f017-c9be-9f42-7a9924e53c53",
	"d2291746-426e-4d9e-5bb3-96d234c6b6e3");
INSERT INTO DIM_WAY
	VALUES ("a419f2f1-f017-c9be-9f42-7a9924e53c53",
	1104.000000,
	2064.000000,
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d2291746-426e-4d9e-5bb3-96d234c6b6e3",
	1104.000000,
	2160.000000,
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000000000",
	"a419f2f1-f017-c9be-9f42-7a9924e53c53");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00000000-0000-0000-0000-00000010004a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00000000-0000-0000-0000-00000010004a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0f093a56-91da-8d01-2ad8-e04c2628be26",
	"8e22c574-b332-4081-f71d-95f446b44957",
	"00000000-0000-0000-0000-00000010004a");
INSERT INTO DIM_DIA
	VALUES ("00000000-0000-0000-0000-000000100005",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PL_EEPID
	VALUES ("00000000-0000-0000-0000-000000005bb1",
	"bf97a9cd-2da0-2ef3-74ce-d3ac014f84f9");
